{
    "sourceFile": "src/components/Dashboard.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 51,
            "patches": [
                {
                    "date": 1751214595417,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1751214789941,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,14 @@\n import React, { useEffect, useState } from 'react';\r\n import { useNavigate } from 'react-router-dom';\r\n+import {\r\n+  Container,\r\n+  Box,\r\n+  Typography,\r\n+  Button,\r\n+  Paper,\r\n+  Alert,\r\n+} from '@mui/material';\r\n \r\n const API_URL = 'http://localhost:5000/api/admin/profile';\r\n \r\n export default function Dashboard() {\r\n@@ -13,13 +21,13 @@\n \r\n     fetch(API_URL, {\r\n       headers: { Authorization: `Bearer ${token}` },\r\n     })\r\n-      .then(res => {\r\n+      .then((res) => {\r\n         if (!res.ok) throw new Error('Unauthorized');\r\n         return res.json();\r\n       })\r\n-      .then(data => setProfile(data))\r\n+      .then(setProfile)\r\n       .catch(() => {\r\n         localStorage.removeItem('token');\r\n         navigate('/');\r\n       });\r\n@@ -30,21 +38,27 @@\n     navigate('/');\r\n   };\r\n \r\n   return (\r\n-    <div className=\"container mt-5\">\r\n-      <div className=\"d-flex justify-content-between align-items-center mb-3\">\r\n-        <h2>Admin Dashboard</h2>\r\n-        <button className=\"btn btn-danger\" onClick={logout}>Logout</button>\r\n-      </div>\r\n+    <Container maxWidth=\"md\">\r\n+      <Box mt={5}>\r\n+        <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\r\n+          <Typography variant=\"h4\">Admin Dashboard</Typography>\r\n+          <Button variant=\"contained\" color=\"error\" onClick={logout}>\r\n+            Logout\r\n+          </Button>\r\n+        </Box>\r\n \r\n-      <div className=\"card p-3 shadow-sm\">\r\n-        <h5 className=\"mb-3\">Your Profile</h5>\r\n-        {profile ? (\r\n-          <pre>{JSON.stringify(profile, null, 2)}</pre>\r\n-        ) : (\r\n-          <p>Loading...</p>\r\n-        )}\r\n-      </div>\r\n-    </div>\r\n+        <Paper elevation={3} sx={{ p: 3, mt: 4 }}>\r\n+          <Typography variant=\"h6\" gutterBottom>\r\n+            Profile Info\r\n+          </Typography>\r\n+          {profile ? (\r\n+            <pre>{JSON.stringify(profile, null, 2)}</pre>\r\n+          ) : (\r\n+            <Alert severity=\"info\">Loading profile...</Alert>\r\n+          )}\r\n+        </Paper>\r\n+      </Box>\r\n+    </Container>\r\n   );\r\n }\r\n"
                },
                {
                    "date": 1751219642497,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,14 +1,8 @@\n import React, { useEffect, useState } from 'react';\r\n import { useNavigate } from 'react-router-dom';\r\n-import {\r\n-  Container,\r\n-  Box,\r\n-  Typography,\r\n-  Button,\r\n-  Paper,\r\n-  Alert,\r\n-} from '@mui/material';\r\n+import { Container, Paper, Typography, Alert } from '@mui/material';\r\n+import NavBar from '../components/NavBar';\r\n \r\n const API_URL = 'http://localhost:5000/api/admin/profile';\r\n \r\n export default function Dashboard() {\r\n@@ -38,18 +32,14 @@\n     navigate('/');\r\n   };\r\n \r\n   return (\r\n-    <Container maxWidth=\"md\">\r\n-      <Box mt={5}>\r\n-        <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\r\n-          <Typography variant=\"h4\">Admin Dashboard</Typography>\r\n-          <Button variant=\"contained\" color=\"error\" onClick={logout}>\r\n-            Logout\r\n-          </Button>\r\n-        </Box>\r\n+    <>\r\n+      {/* ✅ Navbar with props */}\r\n+      <NavBar email={profile?.email} onLogout={logout} />\r\n \r\n-        <Paper elevation={3} sx={{ p: 3, mt: 4 }}>\r\n+      <Container maxWidth=\"md\" sx={{ mt: 4 }}>\r\n+        <Paper elevation={3} sx={{ p: 3 }}>\r\n           <Typography variant=\"h6\" gutterBottom>\r\n             Profile Info\r\n           </Typography>\r\n           {profile ? (\r\n@@ -57,8 +47,8 @@\n           ) : (\r\n             <Alert severity=\"info\">Loading profile...</Alert>\r\n           )}\r\n         </Paper>\r\n-      </Box>\r\n-    </Container>\r\n+      </Container>\r\n+    </>\r\n   );\r\n }\r\n"
                },
                {
                    "date": 1751220212708,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,11 @@\n import React, { useEffect, useState } from 'react';\r\n import { useNavigate } from 'react-router-dom';\r\n-import { Container, Paper, Typography, Alert } from '@mui/material';\r\n+import FullCalendar from '@fullcalendar/react';\r\n+import dayGridPlugin from '@fullcalendar/daygrid';\r\n+import interactionPlugin from '@fullcalendar/interaction';\r\n+import timeGridPlugin from '@fullcalendar/timegrid';\r\n+import { Container, Box } from '@mui/material';\r\n import NavBar from '../components/NavBar';\r\n \r\n const API_URL = 'http://localhost:5000/api/admin/profile';\r\n \r\n@@ -33,22 +37,23 @@\n   };\r\n \r\n   return (\r\n     <>\r\n-      {/* ✅ Navbar with props */}\r\n       <NavBar email={profile?.email} onLogout={logout} />\r\n-\r\n-      <Container maxWidth=\"md\" sx={{ mt: 4 }}>\r\n-        <Paper elevation={3} sx={{ p: 3 }}>\r\n-          <Typography variant=\"h6\" gutterBottom>\r\n-            Profile Info\r\n-          </Typography>\r\n-          {profile ? (\r\n-            <pre>{JSON.stringify(profile, null, 2)}</pre>\r\n-          ) : (\r\n-            <Alert severity=\"info\">Loading profile...</Alert>\r\n-          )}\r\n-        </Paper>\r\n+      <Container maxWidth=\"lg\" sx={{ mt: 4 }}>\r\n+        <Box boxShadow={3} p={2} bgcolor=\"white\" borderRadius={2}>\r\n+          <FullCalendar\r\n+            plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin]}\r\n+            initialView=\"dayGridMonth\"\r\n+            editable={true}\r\n+            selectable={true}\r\n+            events={[\r\n+              { title: 'Team Meeting', date: '2025-07-01' },\r\n+              { title: 'Demo Launch', date: '2025-07-05' },\r\n+              { title: 'Bug Review', date: '2025-07-09' }\r\n+            ]}\r\n+          />\r\n+        </Box>\r\n       </Container>\r\n     </>\r\n   );\r\n }\r\n"
                },
                {
                    "date": 1751834521385,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,137 @@\n+import React, { useEffect, useState } from 'react';\r\n+import { useNavigate } from 'react-router-dom';\r\n+import FullCalendar from '@fullcalendar/react';\r\n+import dayGridPlugin from '@fullcalendar/daygrid';\r\n+import interactionPlugin from '@fullcalendar/interaction';\r\n+import timeGridPlugin from '@fullcalendar/timegrid';\r\n+import { Container, Box } from '@mui/material';\r\n+import NavBar from '../components/NavBar';\r\n+\r\n+const PROFILE_URL = 'http://localhost:5000/api/admin/profile';\r\n+const EVENTS_URL = 'http://localhost:5000/api/events';\r\n+\r\n+export default function Dashboard() {\r\n+  const [profile, setProfile] = useState(null);\r\n+  const [events, setEvents] = useState([]);\r\n+  const navigate = useNavigate();\r\n+\r\n+  const token = localStorage.getItem('token');\r\n+\r\n+  const authHeaders = {\r\n+    Authorization: `Bearer ${token}`,\r\n+    'Content-Type': 'application/json',\r\n+  };\r\n+\r\n+  useEffect(() => {\r\n+    if (!token) return navigate('/');\r\n+\r\n+    // Fetch profile\r\n+    fetch(PROFILE_URL, { headers: authHeaders })\r\n+      .then(res => {\r\n+        if (!res.ok) throw new Error('Unauthorized');\r\n+        return res.json();\r\n+      })\r\n+      .then(setProfile)\r\n+      .catch(() => {\r\n+        localStorage.removeItem('token');\r\n+        navigate('/');\r\n+      });\r\n+\r\n+    // Fetch events\r\n+    fetch(EVENTS_URL, { headers: authHeaders })\r\n+      .then(res => res.json())\r\n+      .then(setEvents)\r\n+      .catch(err => console.error('Error loading events:', err));\r\n+  }, [navigate]);\r\n+\r\n+  const logout = () => {\r\n+    localStorage.removeItem('token');\r\n+    navigate('/');\r\n+  };\r\n+\r\n+  // Add new event\r\n+  const handleDateClick = async (arg) => {\r\n+    const title = prompt('Enter event title:');\r\n+    if (!title) return;\r\n+\r\n+    const newEvent = {\r\n+      title,\r\n+      date: arg.dateStr,\r\n+    };\r\n+\r\n+    try {\r\n+      const res = await fetch(EVENTS_URL, {\r\n+        method: 'POST',\r\n+        headers: authHeaders,\r\n+        body: JSON.stringify(newEvent),\r\n+      });\r\n+\r\n+      const saved = await res.json();\r\n+      setEvents([...events, saved]);\r\n+    } catch (err) {\r\n+      console.error('Failed to create event:', err);\r\n+    }\r\n+  };\r\n+\r\n+  // Edit or delete event\r\n+  const handleEventClick = async (clickInfo) => {\r\n+    const action = prompt(\r\n+      `Edit title or type DELETE to remove:\\nCurrent: ${clickInfo.event.title}`\r\n+    );\r\n+\r\n+    if (action === null) return;\r\n+\r\n+    const eventId = clickInfo.event.id;\r\n+\r\n+    if (action.toUpperCase() === 'DELETE') {\r\n+      try {\r\n+        await fetch(`${EVENTS_URL}/${eventId}`, {\r\n+          method: 'DELETE',\r\n+          headers: authHeaders,\r\n+        });\r\n+\r\n+        setEvents(events.filter((e) => e.id !== eventId));\r\n+      } catch (err) {\r\n+        console.error('Failed to delete event:', err);\r\n+      }\r\n+    } else {\r\n+      try {\r\n+        const updated = {\r\n+          ...clickInfo.event.extendedProps,\r\n+          title: action,\r\n+          date: clickInfo.event.startStr,\r\n+        };\r\n+\r\n+        const res = await fetch(`${EVENTS_URL}/${eventId}`, {\r\n+          method: 'PUT',\r\n+          headers: authHeaders,\r\n+          body: JSON.stringify(updated),\r\n+        });\r\n+\r\n+        const updatedEvent = await res.json();\r\n+        setEvents(events.map((e) => (e.id === eventId ? updatedEvent : e)));\r\n+      } catch (err) {\r\n+        console.error('Failed to update event:', err);\r\n+      }\r\n+    }\r\n+  };\r\n+\r\n+  return (\r\n+    <>\r\n+      <NavBar email={profile?.email} onLogout={logout} />\r\n+      <Container maxWidth=\"lg\" sx={{ mt: 4 }}>\r\n+        <Box boxShadow={3} p={2} bgcolor=\"white\" borderRadius={2}>\r\n+          <FullCalendar\r\n+            plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin]}\r\n+            initialView=\"dayGridMonth\"\r\n+            editable={true}\r\n+            selectable={true}\r\n+            events={events}\r\n+            dateClick={handleDateClick}\r\n+            eventClick={handleEventClick}\r\n+          />\r\n+        </Box>\r\n+      </Container>\r\n+    </>\r\n+  );\r\n+}\r\n"
                },
                {
                    "date": 1751835104484,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,159 @@\n+import React, { useEffect, useState } from 'react';\r\n+import { useNavigate } from 'react-router-dom';\r\n+import FullCalendar from '@fullcalendar/react';\r\n+import dayGridPlugin from '@fullcalendar/daygrid';\r\n+import interactionPlugin from '@fullcalendar/interaction';\r\n+import timeGridPlugin from '@fullcalendar/timegrid';\r\n+import {\r\n+  Container,\r\n+  Box,\r\n+  Dialog,\r\n+  DialogTitle,\r\n+  DialogContent,\r\n+  DialogActions,\r\n+  Button,\r\n+  TextField,\r\n+  MenuItem,\r\n+} from '@mui/material';\r\n+import NavBar from '../components/NavBar';\r\n+\r\n+const PROFILE_URL = 'http://localhost:5000/api/admin/profile';\r\n+const EVENTS_URL = 'http://localhost:5000/api/events';\r\n+\r\n+export default function Dashboard() {\r\n+  const [profile, setProfile] = useState(null);\r\n+  const [events, setEvents] = useState([]);\r\n+  const [open, setOpen] = useState(false);\r\n+  const [newEventDate, setNewEventDate] = useState('');\r\n+  const [formData, setFormData] = useState({\r\n+    name: '',\r\n+    phone: '',\r\n+    type: 'Point',\r\n+  });\r\n+\r\n+  const navigate = useNavigate();\r\n+  const token = localStorage.getItem('token');\r\n+\r\n+  const authHeaders = {\r\n+    Authorization: `Bearer ${token}`,\r\n+    'Content-Type': 'application/json',\r\n+  };\r\n+\r\n+  useEffect(() => {\r\n+    if (!token) return navigate('/');\r\n+\r\n+    // Fetch profile\r\n+    fetch(PROFILE_URL, { headers: authHeaders })\r\n+      .then(res => {\r\n+        if (!res.ok) throw new Error('Unauthorized');\r\n+        return res.json();\r\n+      })\r\n+      .then(setProfile)\r\n+      .catch(() => {\r\n+        localStorage.removeItem('token');\r\n+        navigate('/');\r\n+      });\r\n+\r\n+    // Fetch events\r\n+    fetch(EVENTS_URL, { headers: authHeaders })\r\n+      .then(res => res.json())\r\n+      .then(setEvents)\r\n+      .catch(err => console.error('Error loading events:', err));\r\n+  }, [navigate]);\r\n+\r\n+  const logout = () => {\r\n+    localStorage.removeItem('token');\r\n+    navigate('/');\r\n+  };\r\n+\r\n+  const handleDateClick = (arg) => {\r\n+    setNewEventDate(arg.dateStr);\r\n+    setOpen(true);\r\n+  };\r\n+\r\n+  const handleInputChange = (e) => {\r\n+    setFormData({ ...formData, [e.target.name]: e.target.value });\r\n+  };\r\n+\r\n+  const handleCreateEvent = async () => {\r\n+    const newEvent = {\r\n+      title: `${formData.type} - ${formData.name}`,\r\n+      date: newEventDate,\r\n+      name: formData.name,\r\n+      phone: formData.phone,\r\n+      type: formData.type,\r\n+    };\r\n+\r\n+    try {\r\n+      const res = await fetch(EVENTS_URL, {\r\n+        method: 'POST',\r\n+        headers: authHeaders,\r\n+        body: JSON.stringify(newEvent),\r\n+      });\r\n+\r\n+      const saved = await res.json();\r\n+      setEvents([...events, saved]);\r\n+      setOpen(false);\r\n+      setFormData({ name: '', phone: '', type: 'Point' });\r\n+    } catch (err) {\r\n+      console.error('Failed to create event:', err);\r\n+    }\r\n+  };\r\n+\r\n+  return (\r\n+    <>\r\n+      <NavBar email={profile?.email} onLogout={logout} />\r\n+      <Container maxWidth=\"lg\" sx={{ mt: 4 }}>\r\n+        <Box boxShadow={3} p={2} bgcolor=\"white\" borderRadius={2}>\r\n+          <FullCalendar\r\n+            plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin]}\r\n+            initialView=\"dayGridMonth\"\r\n+            editable={true}\r\n+            selectable={true}\r\n+            events={events}\r\n+            dateClick={handleDateClick}\r\n+          />\r\n+        </Box>\r\n+      </Container>\r\n+\r\n+      {/* Modal to Add Event */}\r\n+      <Dialog open={open} onClose={() => setOpen(false)}>\r\n+        <DialogTitle>Add Event</DialogTitle>\r\n+        <DialogContent>\r\n+          <TextField\r\n+            label=\"Customer Name\"\r\n+            name=\"name\"\r\n+            value={formData.name}\r\n+            onChange={handleInputChange}\r\n+            fullWidth\r\n+            margin=\"dense\"\r\n+          />\r\n+          <TextField\r\n+            label=\"Phone\"\r\n+            name=\"phone\"\r\n+            value={formData.phone}\r\n+            onChange={handleInputChange}\r\n+            fullWidth\r\n+            margin=\"dense\"\r\n+          />\r\n+          <TextField\r\n+            label=\"Type\"\r\n+            name=\"type\"\r\n+            select\r\n+            value={formData.type}\r\n+            onChange={handleInputChange}\r\n+            fullWidth\r\n+            margin=\"dense\"\r\n+          >\r\n+            <MenuItem value=\"Point\">Point</MenuItem>\r\n+            <MenuItem value=\"Rappel\">Rappel</MenuItem>\r\n+          </TextField>\r\n+        </DialogContent>\r\n+        <DialogActions>\r\n+          <Button onClick={() => setOpen(false)}>Cancel</Button>\r\n+          <Button onClick={handleCreateEvent} variant=\"contained\">Add</Button>\r\n+        </DialogActions>\r\n+      </Dialog>\r\n+    </>\r\n+  );\r\n+}\r\n"
                },
                {
                    "date": 1751835225573,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,233 @@\n+import React, { useEffect, useState } from 'react';\r\n+import { useNavigate } from 'react-router-dom';\r\n+import FullCalendar from '@fullcalendar/react';\r\n+import dayGridPlugin from '@fullcalendar/daygrid';\r\n+import interactionPlugin from '@fullcalendar/interaction';\r\n+import timeGridPlugin from '@fullcalendar/timegrid';\r\n+import {\r\n+  Container,\r\n+  Box,\r\n+  Dialog,\r\n+  DialogTitle,\r\n+  DialogContent,\r\n+  DialogActions,\r\n+  Button,\r\n+  TextField,\r\n+  MenuItem,\r\n+  Typography,\r\n+} from '@mui/material';\r\n+import NavBar from '../components/NavBar';\r\n+\r\n+const PROFILE_URL = 'http://localhost:5000/api/admin/profile';\r\n+const EVENTS_URL = 'http://localhost:5000/api/events';\r\n+\r\n+export default function Dashboard() {\r\n+  const [profile, setProfile] = useState(null);\r\n+  const [events, setEvents] = useState([]);\r\n+  const [open, setOpen] = useState(false);\r\n+  const [newEventDate, setNewEventDate] = useState('');\r\n+  const [selectedEvent, setSelectedEvent] = useState(null); // <- for editing\r\n+  const [formData, setFormData] = useState({\r\n+    name: '',\r\n+    phone: '',\r\n+    type: 'Point',\r\n+  });\r\n+  const [errors, setErrors] = useState({});\r\n+\r\n+  const navigate = useNavigate();\r\n+  const token = localStorage.getItem('token');\r\n+\r\n+  const authHeaders = {\r\n+    Authorization: `Bearer ${token}`,\r\n+    'Content-Type': 'application/json',\r\n+  };\r\n+\r\n+  useEffect(() => {\r\n+    if (!token) return navigate('/');\r\n+\r\n+    // Fetch profile\r\n+    fetch(PROFILE_URL, { headers: authHeaders })\r\n+      .then(res => {\r\n+        if (!res.ok) throw new Error('Unauthorized');\r\n+        return res.json();\r\n+      })\r\n+      .then(setProfile)\r\n+      .catch(() => {\r\n+        localStorage.removeItem('token');\r\n+        navigate('/');\r\n+      });\r\n+\r\n+    // Fetch events\r\n+    fetch(EVENTS_URL, { headers: authHeaders })\r\n+      .then(res => res.json())\r\n+      .then(setEvents)\r\n+      .catch(err => console.error('Error loading events:', err));\r\n+  }, [navigate]);\r\n+\r\n+  const logout = () => {\r\n+    localStorage.removeItem('token');\r\n+    navigate('/');\r\n+  };\r\n+\r\n+  // Open modal for new event\r\n+  const handleDateClick = (arg) => {\r\n+    setNewEventDate(arg.dateStr);\r\n+    setFormData({ name: '', phone: '', type: 'Point' });\r\n+    setSelectedEvent(null);\r\n+    setOpen(true);\r\n+  };\r\n+\r\n+  // Open modal for existing event\r\n+  const handleEventClick = (clickInfo) => {\r\n+    const { id, extendedProps, startStr } = clickInfo.event;\r\n+    setFormData({\r\n+      name: extendedProps.name || '',\r\n+      phone: extendedProps.phone || '',\r\n+      type: extendedProps.type || 'Point',\r\n+    });\r\n+    setNewEventDate(startStr);\r\n+    setSelectedEvent({ id });\r\n+    setOpen(true);\r\n+  };\r\n+\r\n+  // Validate input\r\n+  const validate = () => {\r\n+    const errs = {};\r\n+    if (!formData.name.trim()) errs.name = 'Name is required';\r\n+    if (!formData.phone.trim()) errs.phone = 'Phone is required';\r\n+    else if (!/^\\d{10}$/.test(formData.phone)) errs.phone = 'Invalid phone (10 digits)';\r\n+    if (!['Point', 'Rappel'].includes(formData.type)) errs.type = 'Invalid type';\r\n+    setErrors(errs);\r\n+    return Object.keys(errs).length === 0;\r\n+  };\r\n+\r\n+  // Save new or updated event\r\n+  const handleSave = async () => {\r\n+    if (!validate()) return;\r\n+\r\n+    const eventPayload = {\r\n+      title: `${formData.type} - ${formData.name}`,\r\n+      date: newEventDate,\r\n+      name: formData.name,\r\n+      phone: formData.phone,\r\n+      type: formData.type,\r\n+    };\r\n+\r\n+    try {\r\n+      if (selectedEvent) {\r\n+        // Edit mode\r\n+        const res = await fetch(`${EVENTS_URL}/${selectedEvent.id}`, {\r\n+          method: 'PUT',\r\n+          headers: authHeaders,\r\n+          body: JSON.stringify(eventPayload),\r\n+        });\r\n+        const updated = await res.json();\r\n+        setEvents(events.map(e => (e._id === updated._id ? updated : e)));\r\n+      } else {\r\n+        // Create mode\r\n+        const res = await fetch(EVENTS_URL, {\r\n+          method: 'POST',\r\n+          headers: authHeaders,\r\n+          body: JSON.stringify(eventPayload),\r\n+        });\r\n+        const saved = await res.json();\r\n+        setEvents([...events, saved]);\r\n+      }\r\n+\r\n+      setOpen(false);\r\n+      setFormData({ name: '', phone: '', type: 'Point' });\r\n+      setSelectedEvent(null);\r\n+      setErrors({});\r\n+    } catch (err) {\r\n+      console.error('Failed to save event:', err);\r\n+    }\r\n+  };\r\n+\r\n+  // Delete event\r\n+  const handleDelete = async () => {\r\n+    if (!selectedEvent) return;\r\n+    try {\r\n+      await fetch(`${EVENTS_URL}/${selectedEvent.id}`, {\r\n+        method: 'DELETE',\r\n+        headers: authHeaders,\r\n+      });\r\n+      setEvents(events.filter(e => e._id !== selectedEvent.id));\r\n+      setOpen(false);\r\n+      setSelectedEvent(null);\r\n+      setFormData({ name: '', phone: '', type: 'Point' });\r\n+    } catch (err) {\r\n+      console.error('Failed to delete event:', err);\r\n+    }\r\n+  };\r\n+\r\n+  return (\r\n+    <>\r\n+      <NavBar email={profile?.email} onLogout={logout} />\r\n+      <Container maxWidth=\"lg\" sx={{ mt: 4 }}>\r\n+        <Box boxShadow={3} p={2} bgcolor=\"white\" borderRadius={2}>\r\n+          <FullCalendar\r\n+            plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin]}\r\n+            initialView=\"dayGridMonth\"\r\n+            editable={true}\r\n+            selectable={true}\r\n+            events={events}\r\n+            dateClick={handleDateClick}\r\n+            eventClick={handleEventClick}\r\n+          />\r\n+        </Box>\r\n+      </Container>\r\n+\r\n+      {/* Modal */}\r\n+      <Dialog open={open} onClose={() => setOpen(false)}>\r\n+        <DialogTitle>{selectedEvent ? 'Edit Event' : 'Add Event'}</DialogTitle>\r\n+        <DialogContent>\r\n+          <TextField\r\n+            label=\"Customer Name\"\r\n+            name=\"name\"\r\n+            value={formData.name}\r\n+            onChange={(e) => setFormData({ ...formData, name: e.target.value })}\r\n+            fullWidth\r\n+            margin=\"dense\"\r\n+            error={!!errors.name}\r\n+            helperText={errors.name}\r\n+          />\r\n+          <TextField\r\n+            label=\"Phone\"\r\n+            name=\"phone\"\r\n+            value={formData.phone}\r\n+            onChange={(e) => setFormData({ ...formData, phone: e.target.value })}\r\n+            fullWidth\r\n+            margin=\"dense\"\r\n+            error={!!errors.phone}\r\n+            helperText={errors.phone}\r\n+          />\r\n+          <TextField\r\n+            label=\"Type\"\r\n+            name=\"type\"\r\n+            select\r\n+            value={formData.type}\r\n+            onChange={(e) => setFormData({ ...formData, type: e.target.value })}\r\n+            fullWidth\r\n+            margin=\"dense\"\r\n+            error={!!errors.type}\r\n+            helperText={errors.type}\r\n+          >\r\n+            <MenuItem value=\"Point\">Point</MenuItem>\r\n+            <MenuItem value=\"Rappel\">Rappel</MenuItem>\r\n+          </TextField>\r\n+        </DialogContent>\r\n+        <DialogActions>\r\n+          {selectedEvent && (\r\n+            <Button color=\"error\" onClick={handleDelete}>\r\n+              Delete\r\n+            </Button>\r\n+          )}\r\n+          <Button onClick={() => setOpen(false)}>Cancel</Button>\r\n+          <Button variant=\"contained\" onClick={handleSave}>\r\n+            {selectedEvent ? 'Update' : 'Add'}\r\n+          </Button>\r\n+        </DialogActions>\r\n+      </Dialog>\r\n+    </>\r\n+  );\r\n+}\r\n"
                },
                {
                    "date": 1751835466985,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,233 @@\n+import React, { useEffect, useState } from 'react';\r\n+import { useNavigate } from 'react-router-dom';\r\n+import FullCalendar from '@fullcalendar/react';\r\n+import dayGridPlugin from '@fullcalendar/daygrid';\r\n+import interactionPlugin from '@fullcalendar/interaction';\r\n+import timeGridPlugin from '@fullcalendar/timegrid';\r\n+import {\r\n+  Container,\r\n+  Box,\r\n+  Dialog,\r\n+  DialogTitle,\r\n+  DialogContent,\r\n+  DialogActions,\r\n+  Button,\r\n+  TextField,\r\n+  MenuItem,\r\n+  ??Typography,\r\n+} from '@mui/material';\r\n+import NavBar from '../components/NavBar';\r\n+\r\n+const PROFILE_URL = 'http://localhost:5000/api/admin/profile';\r\n+const EVENTS_URL = 'http://localhost:5000/api/events';\r\n+\r\n+export default function Dashboard() {\r\n+  const [profile, setProfile] = useState(null);\r\n+  const [events, setEvents] = useState([]);\r\n+  const [open, setOpen] = useState(false);\r\n+  const [newEventDate, setNewEventDate] = useState('');\r\n+  const [selectedEvent, setSelectedEvent] = useState(null); // <- for editing\r\n+  const [formData, setFormData] = useState({\r\n+    name: '',\r\n+    phone: '',\r\n+    type: 'Point',\r\n+  });\r\n+  const [errors, setErrors] = useState({});\r\n+\r\n+  const navigate = useNavigate();\r\n+  const token = localStorage.getItem('token');\r\n+\r\n+  const authHeaders = {\r\n+    Authorization: `Bearer ${token}`,\r\n+    'Content-Type': 'application/json',\r\n+  };\r\n+\r\n+  useEffect(() => {\r\n+    if (!token) return navigate('/');\r\n+\r\n+    // Fetch profile\r\n+    fetch(PROFILE_URL, { headers: authHeaders })\r\n+      .then(res => {\r\n+        if (!res.ok) throw new Error('Unauthorized');\r\n+        return res.json();\r\n+      })\r\n+      .then(setProfile)\r\n+      .catch(() => {\r\n+        localStorage.removeItem('token');\r\n+        navigate('/');\r\n+      });\r\n+\r\n+    // Fetch events\r\n+    fetch(EVENTS_URL, { headers: authHeaders })\r\n+      .then(res => res.json())\r\n+      .then(setEvents)\r\n+      .catch(err => console.error('Error loading events:', err));\r\n+  }, [navigate]);\r\n+\r\n+  const logout = () => {\r\n+    localStorage.removeItem('token');\r\n+    navigate('/');\r\n+  };\r\n+\r\n+  // Open modal for new event\r\n+  const handleDateClick = (arg) => {\r\n+    setNewEventDate(arg.dateStr);\r\n+    setFormData({ name: '', phone: '', type: 'Point' });\r\n+    setSelectedEvent(null);\r\n+    setOpen(true);\r\n+  };\r\n+\r\n+  // Open modal for existing event\r\n+  const handleEventClick = (clickInfo) => {\r\n+    const { id, extendedProps, startStr } = clickInfo.event;\r\n+    setFormData({\r\n+      name: extendedProps.name || '',\r\n+      phone: extendedProps.phone || '',\r\n+      type: extendedProps.type || 'Point',\r\n+    });\r\n+    setNewEventDate(startStr);\r\n+    setSelectedEvent({ id });\r\n+    setOpen(true);\r\n+  };\r\n+\r\n+  // Validate input\r\n+  const validate = () => {\r\n+    const errs = {};\r\n+    if (!formData.name.trim()) errs.name = 'Name is required';\r\n+    if (!formData.phone.trim()) errs.phone = 'Phone is required';\r\n+    else if (!/^\\d{10}$/.test(formData.phone)) errs.phone = 'Invalid phone (10 digits)';\r\n+    if (!['Point', 'Rappel'].includes(formData.type)) errs.type = 'Invalid type';\r\n+    setErrors(errs);\r\n+    return Object.keys(errs).length === 0;\r\n+  };\r\n+\r\n+  // Save new or updated event\r\n+  const handleSave = async () => {\r\n+    if (!validate()) return;\r\n+\r\n+    const eventPayload = {\r\n+      title: `${formData.type} - ${formData.name}`,\r\n+      date: newEventDate,\r\n+      name: formData.name,\r\n+      phone: formData.phone,\r\n+      type: formData.type,\r\n+    };\r\n+\r\n+    try {\r\n+      if (selectedEvent) {\r\n+        // Edit mode\r\n+        const res = await fetch(`${EVENTS_URL}/${selectedEvent.id}`, {\r\n+          method: 'PUT',\r\n+          headers: authHeaders,\r\n+          body: JSON.stringify(eventPayload),\r\n+        });\r\n+        const updated = await res.json();\r\n+        setEvents(events.map(e => (e._id === updated._id ? updated : e)));\r\n+      } else {\r\n+        // Create mode\r\n+        const res = await fetch(EVENTS_URL, {\r\n+          method: 'POST',\r\n+          headers: authHeaders,\r\n+          body: JSON.stringify(eventPayload),\r\n+        });\r\n+        const saved = await res.json();\r\n+        setEvents([...events, saved]);\r\n+      }\r\n+\r\n+      setOpen(false);\r\n+      setFormData({ name: '', phone: '', type: 'Point' });\r\n+      setSelectedEvent(null);\r\n+      setErrors({});\r\n+    } catch (err) {\r\n+      console.error('Failed to save event:', err);\r\n+    }\r\n+  };\r\n+\r\n+  // Delete event\r\n+  const handleDelete = async () => {\r\n+    if (!selectedEvent) return;\r\n+    try {\r\n+      await fetch(`${EVENTS_URL}/${selectedEvent.id}`, {\r\n+        method: 'DELETE',\r\n+        headers: authHeaders,\r\n+      });\r\n+      setEvents(events.filter(e => e._id !== selectedEvent.id));\r\n+      setOpen(false);\r\n+      setSelectedEvent(null);\r\n+      setFormData({ name: '', phone: '', type: 'Point' });\r\n+    } catch (err) {\r\n+      console.error('Failed to delete event:', err);\r\n+    }\r\n+  };\r\n+\r\n+  return (\r\n+    <>\r\n+      <NavBar email={profile?.email} onLogout={logout} />\r\n+      <Container maxWidth=\"lg\" sx={{ mt: 4 }}>\r\n+        <Box boxShadow={3} p={2} bgcolor=\"white\" borderRadius={2}>\r\n+          <FullCalendar\r\n+            plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin]}\r\n+            initialView=\"dayGridMonth\"\r\n+            editable={true}\r\n+            selectable={true}\r\n+            events={events}\r\n+            dateClick={handleDateClick}\r\n+            eventClick={handleEventClick}\r\n+          />\r\n+        </Box>\r\n+      </Container>\r\n+\r\n+      {/* Modal */}\r\n+      <Dialog open={open} onClose={() => setOpen(false)}>\r\n+        <DialogTitle>{selectedEvent ? 'Edit Event' : 'Add Event'}</DialogTitle>\r\n+        <DialogContent>\r\n+          <TextField\r\n+            label=\"Customer Name\"\r\n+            name=\"name\"\r\n+            value={formData.name}\r\n+            onChange={(e) => setFormData({ ...formData, name: e.target.value })}\r\n+            fullWidth\r\n+            margin=\"dense\"\r\n+            error={!!errors.name}\r\n+            helperText={errors.name}\r\n+          />\r\n+          <TextField\r\n+            label=\"Phone\"\r\n+            name=\"phone\"\r\n+            value={formData.phone}\r\n+            onChange={(e) => setFormData({ ...formData, phone: e.target.value })}\r\n+            fullWidth\r\n+            margin=\"dense\"\r\n+            error={!!errors.phone}\r\n+            helperText={errors.phone}\r\n+          />\r\n+          <TextField\r\n+            label=\"Type\"\r\n+            name=\"type\"\r\n+            select\r\n+            value={formData.type}\r\n+            onChange={(e) => setFormData({ ...formData, type: e.target.value })}\r\n+            fullWidth\r\n+            margin=\"dense\"\r\n+            error={!!errors.type}\r\n+            helperText={errors.type}\r\n+          >\r\n+            <MenuItem value=\"Point\">Point</MenuItem>\r\n+            <MenuItem value=\"Rappel\">Rappel</MenuItem>\r\n+          </TextField>\r\n+        </DialogContent>\r\n+        <DialogActions>\r\n+          {selectedEvent && (\r\n+            <Button color=\"error\" onClick={handleDelete}>\r\n+              Delete\r\n+            </Button>\r\n+          )}\r\n+          <Button onClick={() => setOpen(false)}>Cancel</Button>\r\n+          <Button variant=\"contained\" onClick={handleSave}>\r\n+            {selectedEvent ? 'Update' : 'Add'}\r\n+          </Button>\r\n+        </DialogActions>\r\n+      </Dialog>\r\n+    </>\r\n+  );\r\n+}\r\n"
                },
                {
                    "date": 1751836686022,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,252 @@\n+import React, { useEffect, useState } from 'react';\r\n+import { useNavigate } from 'react-router-dom';\r\n+import FullCalendar from '@fullcalendar/react';\r\n+import dayGridPlugin from '@fullcalendar/daygrid';\r\n+import interactionPlugin from '@fullcalendar/interaction';\r\n+import timeGridPlugin from '@fullcalendar/timegrid';\r\n+import {\r\n+  Container,\r\n+  Box,\r\n+  Dialog,\r\n+  DialogTitle,\r\n+  DialogContent,\r\n+  DialogActions,\r\n+  Button,\r\n+  TextField,\r\n+  MenuItem,\r\n+} from '@mui/material';\r\n+import NavBar from '../components/NavBar';\r\n+\r\n+const PROFILE_URL = 'http://localhost:5000/api/admin/profile';\r\n+const EVENTS_URL = 'http://localhost:5000/api/events';\r\n+\r\n+export default function Dashboard() {\r\n+  const [profile, setProfile] = useState(null);\r\n+  const [events, setEvents] = useState([]);\r\n+  const [open, setOpen] = useState(false);\r\n+  const [newEventDate, setNewEventDate] = useState('');\r\n+  const [eventTime, setEventTime] = useState('09:00');\r\n+  const [selectedEvent, setSelectedEvent] = useState(null);\r\n+  const [formData, setFormData] = useState({\r\n+    name: '',\r\n+    phone: '',\r\n+    type: 'Point',\r\n+  });\r\n+  const [errors, setErrors] = useState({});\r\n+\r\n+  const navigate = useNavigate();\r\n+  const token = localStorage.getItem('token');\r\n+\r\n+  const authHeaders = {\r\n+    Authorization: `Bearer ${token}`,\r\n+    'Content-Type': 'application/json',\r\n+  };\r\n+\r\n+  useEffect(() => {\r\n+    if (!token) return navigate('/');\r\n+\r\n+    // Fetch profile\r\n+    fetch(PROFILE_URL, { headers: authHeaders })\r\n+      .then(res => {\r\n+        if (!res.ok) throw new Error('Unauthorized');\r\n+        return res.json();\r\n+      })\r\n+      .then(setProfile)\r\n+      .catch(() => {\r\n+        localStorage.removeItem('token');\r\n+        navigate('/');\r\n+      });\r\n+\r\n+    // Fetch events\r\n+    fetch(EVENTS_URL, { headers: authHeaders })\r\n+      .then(res => res.json())\r\n+      .then(setEvents)\r\n+      .catch(err => console.error('Error loading events:', err));\r\n+  }, [navigate]);\r\n+\r\n+  const logout = () => {\r\n+    localStorage.removeItem('token');\r\n+    navigate('/');\r\n+  };\r\n+\r\n+  const handleDateClick = (arg) => {\r\n+    setNewEventDate(arg.dateStr);\r\n+    setEventTime('09:00');\r\n+    setFormData({ name: '', phone: '', type: 'Point' });\r\n+    setSelectedEvent(null);\r\n+    setErrors({});\r\n+    setOpen(true);\r\n+  };\r\n+\r\n+  const handleEventClick = (clickInfo) => {\r\n+    const { id, extendedProps, startStr } = clickInfo.event;\r\n+    setFormData({\r\n+      name: extendedProps.name || '',\r\n+      phone: extendedProps.phone || '',\r\n+      type: extendedProps.type || 'Point',\r\n+    });\r\n+\r\n+    // Extract time part from ISO datetime string if available\r\n+    let time = '09:00';\r\n+    if (startStr && startStr.includes('T')) {\r\n+      time = startStr.split('T')[1].slice(0, 5); // HH:mm\r\n+    }\r\n+\r\n+    setNewEventDate(startStr.split('T')[0]);\r\n+    setEventTime(time);\r\n+    setSelectedEvent({ id });\r\n+    setErrors({});\r\n+    setOpen(true);\r\n+  };\r\n+\r\n+  const validate = () => {\r\n+    const errs = {};\r\n+    if (!formData.name.trim()) errs.name = 'Name is required';\r\n+    if (!formData.phone.trim()) errs.phone = 'Phone is required';\r\n+    else if (!/^\\d{10}$/.test(formData.phone)) errs.phone = 'Invalid phone (10 digits)';\r\n+    if (!['Point', 'Rappel'].includes(formData.type)) errs.type = 'Invalid type';\r\n+    setErrors(errs);\r\n+    return Object.keys(errs).length === 0;\r\n+  };\r\n+\r\n+  const handleSave = async () => {\r\n+    if (!validate()) return;\r\n+\r\n+    const dateTime = `${newEventDate}T${eventTime}:00`;\r\n+\r\n+    const eventPayload = {\r\n+      title: `${formData.type} - ${formData.name}`,\r\n+      date: dateTime,\r\n+      name: formData.name,\r\n+      phone: formData.phone,\r\n+      type: formData.type,\r\n+    };\r\n+\r\n+    try {\r\n+      if (selectedEvent) {\r\n+        // Update existing\r\n+        const res = await fetch(`${EVENTS_URL}/${selectedEvent.id}`, {\r\n+          method: 'PUT',\r\n+          headers: authHeaders,\r\n+          body: JSON.stringify(eventPayload),\r\n+        });\r\n+        const updated = await res.json();\r\n+        setEvents(events.map(e => (e._id === updated._id ? updated : e)));\r\n+      } else {\r\n+        // Create new\r\n+        const res = await fetch(EVENTS_URL, {\r\n+          method: 'POST',\r\n+          headers: authHeaders,\r\n+          body: JSON.stringify(eventPayload),\r\n+        });\r\n+        const saved = await res.json();\r\n+        setEvents([...events, saved]);\r\n+      }\r\n+\r\n+      setOpen(false);\r\n+      setSelectedEvent(null);\r\n+      setFormData({ name: '', phone: '', type: 'Point' });\r\n+      setErrors({});\r\n+    } catch (err) {\r\n+      console.error('Failed to save event:', err);\r\n+    }\r\n+  };\r\n+\r\n+  const handleDelete = async () => {\r\n+    if (!selectedEvent) return;\r\n+    try {\r\n+      await fetch(`${EVENTS_URL}/${selectedEvent.id}`, {\r\n+        method: 'DELETE',\r\n+        headers: authHeaders,\r\n+      });\r\n+      setEvents(events.filter(e => e._id !== selectedEvent.id));\r\n+      setOpen(false);\r\n+      setSelectedEvent(null);\r\n+      setFormData({ name: '', phone: '', type: 'Point' });\r\n+    } catch (err) {\r\n+      console.error('Failed to delete event:', err);\r\n+    }\r\n+  };\r\n+\r\n+  return (\r\n+    <>\r\n+      <NavBar email={profile?.email} onLogout={logout} />\r\n+      <Container maxWidth=\"lg\" sx={{ mt: 4 }}>\r\n+        <Box boxShadow={3} p={2} bgcolor=\"white\" borderRadius={2}>\r\n+          <FullCalendar\r\n+            plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin]}\r\n+            initialView=\"dayGridMonth\"\r\n+            editable={true}\r\n+            selectable={true}\r\n+            events={events}\r\n+            dateClick={handleDateClick}\r\n+            eventClick={handleEventClick}\r\n+          />\r\n+        </Box>\r\n+      </Container>\r\n+\r\n+      {/* Modal */}\r\n+      <Dialog open={open} onClose={() => setOpen(false)}>\r\n+        <DialogTitle>{selectedEvent ? 'Edit Event' : 'Add Event'}</DialogTitle>\r\n+        <DialogContent>\r\n+          <TextField\r\n+            label=\"Customer Name\"\r\n+            name=\"name\"\r\n+            value={formData.name}\r\n+            onChange={(e) => setFormData({ ...formData, name: e.target.value })}\r\n+            fullWidth\r\n+            margin=\"dense\"\r\n+            error={!!errors.name}\r\n+            helperText={errors.name}\r\n+          />\r\n+          <TextField\r\n+            label=\"Phone\"\r\n+            name=\"phone\"\r\n+            value={formData.phone}\r\n+            onChange={(e) => setFormData({ ...formData, phone: e.target.value })}\r\n+            fullWidth\r\n+            margin=\"dense\"\r\n+            error={!!errors.phone}\r\n+            helperText={errors.phone}\r\n+          />\r\n+          <TextField\r\n+            label=\"Type\"\r\n+            name=\"type\"\r\n+            select\r\n+            value={formData.type}\r\n+            onChange={(e) => setFormData({ ...formData, type: e.target.value })}\r\n+            fullWidth\r\n+            margin=\"dense\"\r\n+            error={!!errors.type}\r\n+            helperText={errors.type}\r\n+          >\r\n+            <MenuItem value=\"Point\">Point</MenuItem>\r\n+            <MenuItem value=\"Rappel\">Rappel</MenuItem>\r\n+          </TextField>\r\n+\r\n+          <TextField\r\n+            label=\"Time\"\r\n+            type=\"time\"\r\n+            value={eventTime}\r\n+            onChange={(e) => setEventTime(e.target.value)}\r\n+            fullWidth\r\n+            margin=\"dense\"\r\n+            InputLabelProps={{ shrink: true }}\r\n+            inputProps={{ step: 300 }}\r\n+          />\r\n+        </DialogContent>\r\n+        <DialogActions>\r\n+          {selectedEvent && (\r\n+            <Button color=\"error\" onClick={handleDelete}>\r\n+              Delete\r\n+            </Button>\r\n+          )}\r\n+          <Button onClick={() => setOpen(false)}>Cancel</Button>\r\n+          <Button variant=\"contained\" onClick={handleSave}>\r\n+            {selectedEvent ? 'Update' : 'Add'}\r\n+          </Button>\r\n+        </DialogActions>\r\n+      </Dialog>\r\n+    </>\r\n+  );\r\n+}\r\n"
                },
                {
                    "date": 1751836847452,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,74 @@\n+import FullCalendar from '@fullcalendar/react';\r\n+import timeGridPlugin from '@fullcalendar/timegrid';\r\n+\r\n+// state:\r\n+const [openModalDay, setOpenModalDay] = useState(false);\r\n+const [modalDay, setModalDay] = useState(null); // clicked day for modal calendar\r\n+const [modalEvents, setModalEvents] = useState([]); // events for modal calendar day\r\n+\r\n+const [selectedTimeSlot, setSelectedTimeSlot] = useState(null); // for picking hour inside modal calendar\r\n+const [formVisible, setFormVisible] = useState(false);\r\n+\r\n+// When user clicks a day in main calendar:\r\n+function handleDateClick(arg) {\r\n+  setModalDay(arg.dateStr);  // e.g. \"2025-07-10\"\r\n+  setOpenModalDay(true);\r\n+\r\n+  // Filter your events to show only events on this day\r\n+  const filtered = events.filter(e => e.date.startsWith(arg.dateStr));\r\n+  setModalEvents(filtered);\r\n+}\r\n+\r\n+// Inside modal calendar, when user selects a time slot (hour):\r\n+function handleModalSelect(selectionInfo) {\r\n+  setSelectedTimeSlot(selectionInfo); // contains start, end times\r\n+  setFormVisible(true);\r\n+}\r\n+\r\n+// Form submit inside modal to add event for selectedTimeSlot.start\r\n+\r\n+async function addEventForSelectedTime(formData) {\r\n+  const eventPayload = {\r\n+    title: `${formData.type} - ${formData.name}`,\r\n+    date: selectedTimeSlot.startStr, // full ISO datetime with hour\r\n+    name: formData.name,\r\n+    phone: formData.phone,\r\n+    type: formData.type,\r\n+  };\r\n+\r\n+  // send to backend, update events state etc...\r\n+\r\n+  // Close form and refresh modalEvents + main events\r\n+  setFormVisible(false);\r\n+  setSelectedTimeSlot(null);\r\n+  // fetch events again or update states\r\n+}\r\n+\r\n+// Modal render example:\r\n+\r\n+<Dialog open={openModalDay} onClose={() => setOpenModalDay(false)} maxWidth=\"md\" fullWidth>\r\n+  <DialogTitle>{modalDay}</DialogTitle>\r\n+  <DialogContent>\r\n+    <FullCalendar\r\n+      plugins={[timeGridPlugin, interactionPlugin]}\r\n+      initialView=\"timeGridDay\"\r\n+      slotDuration=\"00:30:00\"\r\n+      initialDate={modalDay}\r\n+      selectable={true}\r\n+      select={handleModalSelect}\r\n+      events={modalEvents}\r\n+      height=\"auto\"\r\n+    />\r\n+\r\n+    {formVisible && (\r\n+      <YourEventForm\r\n+        onSubmit={addEventForSelectedTime}\r\n+        onCancel={() => setFormVisible(false)}\r\n+        selectedDateTime={selectedTimeSlot.startStr}\r\n+      />\r\n+    )}\r\n+  </DialogContent>\r\n+  <DialogActions>\r\n+    <Button onClick={() => setOpenModalDay(false)}>Close</Button>\r\n+  </DialogActions>\r\n+</Dialog>\r\n"
                },
                {
                    "date": 1751836952230,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,246 @@\n+import React, { useState, useEffect } from 'react';\r\n+import { useNavigate } from 'react-router-dom';\r\n+import FullCalendar from '@fullcalendar/react';\r\n+import dayGridPlugin from '@fullcalendar/daygrid';\r\n+import timeGridPlugin from '@fullcalendar/timegrid';\r\n+import interactionPlugin from '@fullcalendar/interaction';\r\n+import {\r\n+  Container,\r\n+  Box,\r\n+  Dialog,\r\n+  DialogTitle,\r\n+  DialogContent,\r\n+  DialogActions,\r\n+  Button,\r\n+  TextField,\r\n+  MenuItem,\r\n+} from '@mui/material';\r\n+import NavBar from '../components/NavBar';\r\n+\r\n+const PROFILE_URL = 'http://localhost:5000/api/admin/profile';\r\n+const EVENTS_URL = 'http://localhost:5000/api/events';\r\n+\r\n+function Dashboard() {\r\n+  const [profile, setProfile] = useState(null);\r\n+  const [events, setEvents] = useState([]);\r\n+  const [open, setOpen] = useState(false);\r\n+  const [newEventDate, setNewEventDate] = useState('');\r\n+  const [eventTime, setEventTime] = useState('09:00');\r\n+  const [selectedEvent, setSelectedEvent] = useState(null);\r\n+  const [formData, setFormData] = useState({\r\n+    name: '',\r\n+    phone: '',\r\n+    type: 'Point',\r\n+  });\r\n+  const [errors, setErrors] = useState({});\r\n+\r\n+  const navigate = useNavigate();\r\n+  const token = localStorage.getItem('token');\r\n+\r\n+  const authHeaders = {\r\n+    Authorization: `Bearer ${token}`,\r\n+    'Content-Type': 'application/json',\r\n+  };\r\n+\r\n+  useEffect(() => {\r\n+    if (!token) return navigate('/');\r\n+\r\n+    fetch(PROFILE_URL, { headers: authHeaders })\r\n+      .then(res => {\r\n+        if (!res.ok) throw new Error('Unauthorized');\r\n+        return res.json();\r\n+      })\r\n+      .then(setProfile)\r\n+      .catch(() => {\r\n+        localStorage.removeItem('token');\r\n+        navigate('/');\r\n+      });\r\n+\r\n+    fetch(EVENTS_URL, { headers: authHeaders })\r\n+      .then(res => res.json())\r\n+      .then(setEvents)\r\n+      .catch(err => console.error('Error loading events:', err));\r\n+  }, [navigate]);\r\n+\r\n+  const logout = () => {\r\n+    localStorage.removeItem('token');\r\n+    navigate('/');\r\n+  };\r\n+\r\n+  const handleDateClick = (arg) => {\r\n+    setNewEventDate(arg.dateStr);\r\n+    setEventTime('09:00');\r\n+    setFormData({ name: '', phone: '', type: 'Point' });\r\n+    setSelectedEvent(null);\r\n+    setErrors({});\r\n+    setOpen(true);\r\n+  };\r\n+\r\n+  const handleEventClick = (clickInfo) => {\r\n+    const { id, extendedProps, startStr } = clickInfo.event;\r\n+    setFormData({\r\n+      name: extendedProps.name || '',\r\n+      phone: extendedProps.phone || '',\r\n+      type: extendedProps.type || 'Point',\r\n+    });\r\n+\r\n+    let time = '09:00';\r\n+    if (startStr && startStr.includes('T')) {\r\n+      time = startStr.split('T')[1].slice(0, 5);\r\n+    }\r\n+\r\n+    setNewEventDate(startStr.split('T')[0]);\r\n+    setEventTime(time);\r\n+    setSelectedEvent({ id });\r\n+    setErrors({});\r\n+    setOpen(true);\r\n+  };\r\n+\r\n+  const validate = () => {\r\n+    const errs = {};\r\n+    if (!formData.name.trim()) errs.name = 'Name is required';\r\n+    if (!formData.phone.trim()) errs.phone = 'Phone is required';\r\n+    else if (!/^\\d{10}$/.test(formData.phone)) errs.phone = 'Invalid phone (10 digits)';\r\n+    if (!['Point', 'Rappel'].includes(formData.type)) errs.type = 'Invalid type';\r\n+    setErrors(errs);\r\n+    return Object.keys(errs).length === 0;\r\n+  };\r\n+\r\n+  const handleSave = async () => {\r\n+    if (!validate()) return;\r\n+\r\n+    const dateTime = `${newEventDate}T${eventTime}:00`;\r\n+\r\n+    const eventPayload = {\r\n+      title: `${formData.type} - ${formData.name}`,\r\n+      date: dateTime,\r\n+      name: formData.name,\r\n+      phone: formData.phone,\r\n+      type: formData.type,\r\n+    };\r\n+\r\n+    try {\r\n+      if (selectedEvent) {\r\n+        const res = await fetch(`${EVENTS_URL}/${selectedEvent.id}`, {\r\n+          method: 'PUT',\r\n+          headers: authHeaders,\r\n+          body: JSON.stringify(eventPayload),\r\n+        });\r\n+        const updated = await res.json();\r\n+        setEvents(events.map(e => (e._id === updated._id ? updated : e)));\r\n+      } else {\r\n+        const res = await fetch(EVENTS_URL, {\r\n+          method: 'POST',\r\n+          headers: authHeaders,\r\n+          body: JSON.stringify(eventPayload),\r\n+        });\r\n+        const saved = await res.json();\r\n+        setEvents([...events, saved]);\r\n+      }\r\n+      setOpen(false);\r\n+      setSelectedEvent(null);\r\n+      setFormData({ name: '', phone: '', type: 'Point' });\r\n+      setErrors({});\r\n+    } catch (err) {\r\n+      console.error('Failed to save event:', err);\r\n+    }\r\n+  };\r\n+\r\n+  const handleDelete = async () => {\r\n+    if (!selectedEvent) return;\r\n+    try {\r\n+      await fetch(`${EVENTS_URL}/${selectedEvent.id}`, {\r\n+        method: 'DELETE',\r\n+        headers: authHeaders,\r\n+      });\r\n+      setEvents(events.filter(e => e._id !== selectedEvent.id));\r\n+      setOpen(false);\r\n+      setSelectedEvent(null);\r\n+      setFormData({ name: '', phone: '', type: 'Point' });\r\n+    } catch (err) {\r\n+      console.error('Failed to delete event:', err);\r\n+    }\r\n+  };\r\n+\r\n+  return (\r\n+    <>\r\n+      <NavBar email={profile?.email} onLogout={logout} />\r\n+      <Container maxWidth=\"lg\" sx={{ mt: 4 }}>\r\n+        <Box boxShadow={3} p={2} bgcolor=\"white\" borderRadius={2}>\r\n+          <FullCalendar\r\n+            plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin]}\r\n+            initialView=\"dayGridMonth\"\r\n+            editable={true}\r\n+            selectable={true}\r\n+            events={events}\r\n+            dateClick={handleDateClick}\r\n+            eventClick={handleEventClick}\r\n+          />\r\n+        </Box>\r\n+      </Container>\r\n+\r\n+      <Dialog open={open} onClose={() => setOpen(false)}>\r\n+        <DialogTitle>{selectedEvent ? 'Edit Event' : 'Add Event'}</DialogTitle>\r\n+        <DialogContent>\r\n+          <TextField\r\n+            label=\"Customer Name\"\r\n+            name=\"name\"\r\n+            value={formData.name}\r\n+            onChange={(e) => setFormData({ ...formData, name: e.target.value })}\r\n+            fullWidth\r\n+            margin=\"dense\"\r\n+            error={!!errors.name}\r\n+            helperText={errors.name}\r\n+          />\r\n+          <TextField\r\n+            label=\"Phone\"\r\n+            name=\"phone\"\r\n+            value={formData.phone}\r\n+            onChange={(e) => setFormData({ ...formData, phone: e.target.value })}\r\n+            fullWidth\r\n+            margin=\"dense\"\r\n+            error={!!errors.phone}\r\n+            helperText={errors.phone}\r\n+          />\r\n+          <TextField\r\n+            label=\"Type\"\r\n+            name=\"type\"\r\n+            select\r\n+            value={formData.type}\r\n+            onChange={(e) => setFormData({ ...formData, type: e.target.value })}\r\n+            fullWidth\r\n+            margin=\"dense\"\r\n+            error={!!errors.type}\r\n+            helperText={errors.type}\r\n+          >\r\n+            <MenuItem value=\"Point\">Point</MenuItem>\r\n+            <MenuItem value=\"Rappel\">Rappel</MenuItem>\r\n+          </TextField>\r\n+          <TextField\r\n+            label=\"Time\"\r\n+            type=\"time\"\r\n+            value={eventTime}\r\n+            onChange={(e) => setEventTime(e.target.value)}\r\n+            fullWidth\r\n+            margin=\"dense\"\r\n+            InputLabelProps={{ shrink: true }}\r\n+            inputProps={{ step: 300 }}\r\n+          />\r\n+        </DialogContent>\r\n+        <DialogActions>\r\n+          {selectedEvent && (\r\n+            <Button color=\"error\" onClick={handleDelete}>\r\n+              Delete\r\n+            </Button>\r\n+          )}\r\n+          <Button onClick={() => setOpen(false)}>Cancel</Button>\r\n+          <Button variant=\"contained\" onClick={handleSave}>\r\n+            {selectedEvent ? 'Update' : 'Add'}\r\n+          </Button>\r\n+        </DialogActions>\r\n+      </Dialog>\r\n+    </>\r\n+  );\r\n+}\r\n+\r\n+export default Dashboard;\r\n"
                },
                {
                    "date": 1751837230031,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,139 @@\n+import React, { useState, useEffect } from 'react';\r\n+import { Container, Box, Dialog, DialogTitle, DialogContent, DialogActions, Button, TextField, MenuItem, Table, TableBody, TableRow, TableCell } from '@mui/material';\r\n+import FullCalendar from '@fullcalendar/react';\r\n+import dayGridPlugin from '@fullcalendar/daygrid';\r\n+import interactionPlugin from '@fullcalendar/interaction';\r\n+import NavBar from '../components/NavBar';\r\n+\r\n+const HOURS = Array.from({ length: 16 }, (_, i) => 8 + i); // 8 to 23 (8:00 to 23:00)\r\n+\r\n+function formatHour(h) {\r\n+  return `${h.toString().padStart(2, '0')}:00`;\r\n+}\r\n+\r\n+export default function Dashboard() {\r\n+  const [selectedDay, setSelectedDay] = useState(null); // e.g. '2025-07-10'\r\n+  const [openDayModal, setOpenDayModal] = useState(false);\r\n+  const [addingHour, setAddingHour] = useState(null); // hour number for which we're adding event\r\n+  const [formData, setFormData] = useState({ name: '', phone: '', type: 'Point' });\r\n+  const [events, setEvents] = useState([]);\r\n+\r\n+  // Fetch events on mount (and you should fetch with your token/auth logic)\r\n+  useEffect(() => {\r\n+    // fetch events here and setEvents\r\n+  }, []);\r\n+\r\n+  const handleDateClick = (arg) => {\r\n+    setSelectedDay(arg.dateStr);\r\n+    setOpenDayModal(true);\r\n+    setAddingHour(null);\r\n+    setFormData({ name: '', phone: '', type: 'Point' });\r\n+  };\r\n+\r\n+  const handleAddClick = (hour) => {\r\n+    setAddingHour(hour);\r\n+    setFormData({ name: '', phone: '', type: 'Point' });\r\n+  };\r\n+\r\n+  const handleFormSubmit = () => {\r\n+    if (!formData.name || !formData.phone) {\r\n+      alert('Please fill name and phone');\r\n+      return;\r\n+    }\r\n+    // Construct datetime string with selectedDay + hour\r\n+    const dateTime = `${selectedDay}T${hourToTimeString(addingHour)}:00`;\r\n+\r\n+    // Build event object and send to backend, then refresh events state...\r\n+\r\n+    // Close form\r\n+    setAddingHour(null);\r\n+  };\r\n+\r\n+  const hourToTimeString = (hour) => hour.toString().padStart(2, '0') + ':00';\r\n+\r\n+  return (\r\n+    <>\r\n+      <NavBar /* your props */ />\r\n+      <Container maxWidth=\"lg\" sx={{ mt: 4 }}>\r\n+        <Box boxShadow={3} p={2} bgcolor=\"white\" borderRadius={2}>\r\n+          <FullCalendar\r\n+            plugins={[dayGridPlugin, interactionPlugin]}\r\n+            initialView=\"dayGridMonth\"\r\n+            selectable={true}\r\n+            events={events}\r\n+            dateClick={handleDateClick}\r\n+          />\r\n+        </Box>\r\n+      </Container>\r\n+\r\n+      <Dialog open={openDayModal} onClose={() => setOpenDayModal(false)} maxWidth=\"sm\" fullWidth>\r\n+        <DialogTitle>Schedule for {selectedDay}</DialogTitle>\r\n+        <DialogContent>\r\n+          <Table>\r\n+            <TableBody>\r\n+              {HOURS.map((hour) => (\r\n+                <TableRow key={hour}>\r\n+                  <TableCell>{formatHour(hour)}</TableCell>\r\n+                  <TableCell>\r\n+                    {/* List events for this hour */}\r\n+                    {events\r\n+                      .filter(e => e.date.startsWith(`${selectedDay}T${hourToTimeString(hour)}`))\r\n+                      .map((e) => (\r\n+                        <Box key={e._id} sx={{ bgcolor: '#e0e0e0', p: 1, mb: 0.5, borderRadius: 1 }}>\r\n+                          {e.title}\r\n+                        </Box>\r\n+                      ))}\r\n+                  </TableCell>\r\n+                  <TableCell>\r\n+                    {addingHour === hour ? (\r\n+                      <>\r\n+                        <TextField\r\n+                          size=\"small\"\r\n+                          label=\"Name\"\r\n+                          value={formData.name}\r\n+                          onChange={(e) => setFormData({ ...formData, name: e.target.value })}\r\n+                          sx={{ mr: 1 }}\r\n+                        />\r\n+                        <TextField\r\n+                          size=\"small\"\r\n+                          label=\"Phone\"\r\n+                          value={formData.phone}\r\n+                          onChange={(e) => setFormData({ ...formData, phone: e.target.value })}\r\n+                          sx={{ mr: 1 }}\r\n+                        />\r\n+                        <TextField\r\n+                          size=\"small\"\r\n+                          select\r\n+                          label=\"Type\"\r\n+                          value={formData.type}\r\n+                          onChange={(e) => setFormData({ ...formData, type: e.target.value })}\r\n+                          sx={{ width: 120, mr: 1 }}\r\n+                        >\r\n+                          <MenuItem value=\"Point\">Point</MenuItem>\r\n+                          <MenuItem value=\"Rappel\">Rappel</MenuItem>\r\n+                        </TextField>\r\n+                        <Button variant=\"contained\" size=\"small\" onClick={handleFormSubmit}>\r\n+                          Save\r\n+                        </Button>\r\n+                        <Button size=\"small\" onClick={() => setAddingHour(null)}>\r\n+                          Cancel\r\n+                        </Button>\r\n+                      </>\r\n+                    ) : (\r\n+                      <Button variant=\"outlined\" size=\"small\" onClick={() => handleAddClick(hour)}>\r\n+                        Add Event\r\n+                      </Button>\r\n+                    )}\r\n+                  </TableCell>\r\n+                </TableRow>\r\n+              ))}\r\n+            </TableBody>\r\n+          </Table>\r\n+        </DialogContent>\r\n+        <DialogActions>\r\n+          <Button onClick={() => setOpenDayModal(false)}>Close</Button>\r\n+        </DialogActions>\r\n+      </Dialog>\r\n+    </>\r\n+  );\r\n+}\r\n"
                },
                {
                    "date": 1751837472572,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,60 +1,171 @@\n import React, { useState, useEffect } from 'react';\r\n-import { Container, Box, Dialog, DialogTitle, DialogContent, DialogActions, Button, TextField, MenuItem, Table, TableBody, TableRow, TableCell } from '@mui/material';\r\n+import {\r\n+  Container,\r\n+  Box,\r\n+  Dialog,\r\n+  DialogTitle,\r\n+  DialogContent,\r\n+  DialogActions,\r\n+  Button,\r\n+  TextField,\r\n+  MenuItem,\r\n+  Table,\r\n+  TableBody,\r\n+  TableCell,\r\n+  TableRow,\r\n+  Typography,\r\n+} from '@mui/material';\r\n import FullCalendar from '@fullcalendar/react';\r\n import dayGridPlugin from '@fullcalendar/daygrid';\r\n import interactionPlugin from '@fullcalendar/interaction';\r\n import NavBar from '../components/NavBar';\r\n \r\n-const HOURS = Array.from({ length: 16 }, (_, i) => 8 + i); // 8 to 23 (8:00 to 23:00)\r\n+const HOURS = Array.from({ length: 16 }, (_, i) => 8 + i); // 08:00 to 23:00\r\n \r\n function formatHour(h) {\r\n   return `${h.toString().padStart(2, '0')}:00`;\r\n }\r\n \r\n export default function Dashboard() {\r\n-  const [selectedDay, setSelectedDay] = useState(null); // e.g. '2025-07-10'\r\n+  const [profile, setProfile] = useState(null);\r\n+  const [events, setEvents] = useState([]);\r\n+  const [selectedDay, setSelectedDay] = useState(null);\r\n   const [openDayModal, setOpenDayModal] = useState(false);\r\n-  const [addingHour, setAddingHour] = useState(null); // hour number for which we're adding event\r\n+  const [editingHour, setEditingHour] = useState(null); // hour currently editing\r\n   const [formData, setFormData] = useState({ name: '', phone: '', type: 'Point' });\r\n-  const [events, setEvents] = useState([]);\r\n+  const [errors, setErrors] = useState({});\r\n \r\n-  // Fetch events on mount (and you should fetch with your token/auth logic)\r\n+  const token = localStorage.getItem('token');\r\n+  const authHeaders = {\r\n+    Authorization: `Bearer ${token}`,\r\n+    'Content-Type': 'application/json',\r\n+  };\r\n+\r\n   useEffect(() => {\r\n-    // fetch events here and setEvents\r\n-  }, []);\r\n+    if (!token) return;\r\n \r\n+    // Fetch profile\r\n+    fetch('http://localhost:5000/api/admin/profile', { headers: authHeaders })\r\n+      .then(res => res.ok ? res.json() : Promise.reject())\r\n+      .then(setProfile)\r\n+      .catch(() => {\r\n+        localStorage.removeItem('token');\r\n+        // redirect logic here if needed\r\n+      });\r\n+\r\n+    // Fetch all events\r\n+    fetch('http://localhost:5000/api/events', { headers: authHeaders })\r\n+      .then(res => res.json())\r\n+      .then(setEvents)\r\n+      .catch(console.error);\r\n+  }, [token]);\r\n+\r\n   const handleDateClick = (arg) => {\r\n     setSelectedDay(arg.dateStr);\r\n     setOpenDayModal(true);\r\n-    setAddingHour(null);\r\n+    setEditingHour(null);\r\n     setFormData({ name: '', phone: '', type: 'Point' });\r\n+    setErrors({});\r\n   };\r\n \r\n-  const handleAddClick = (hour) => {\r\n-    setAddingHour(hour);\r\n-    setFormData({ name: '', phone: '', type: 'Point' });\r\n+  // Helper: find event by day+hour (full datetime starts with day + 'T' + hour)\r\n+  const findEventAtHour = (hour) => {\r\n+    const prefix = `${selectedDay}T${formatHour(hour)}`;\r\n+    return events.find(e => e.date.startsWith(prefix));\r\n   };\r\n \r\n-  const handleFormSubmit = () => {\r\n-    if (!formData.name || !formData.phone) {\r\n-      alert('Please fill name and phone');\r\n-      return;\r\n+  const validate = () => {\r\n+    const errs = {};\r\n+    if (!formData.name.trim()) errs.name = 'Name is required';\r\n+    if (!formData.phone.trim()) errs.phone = 'Phone is required';\r\n+    else if (!/^\\d{10}$/.test(formData.phone)) errs.phone = 'Phone must be 10 digits';\r\n+    if (!['Point', 'Rappel'].includes(formData.type)) errs.type = 'Invalid type';\r\n+    setErrors(errs);\r\n+    return Object.keys(errs).length === 0;\r\n+  };\r\n+\r\n+  const handleAddOrUpdate = async () => {\r\n+    if (!validate()) return;\r\n+\r\n+    const dateTime = `${selectedDay}T${formatHour(editingHour)}:00`;\r\n+\r\n+    const eventPayload = {\r\n+      title: `${formData.type} - ${formData.name}`,\r\n+      date: dateTime,\r\n+      name: formData.name,\r\n+      phone: formData.phone,\r\n+      type: formData.type,\r\n+    };\r\n+\r\n+    try {\r\n+      const existingEvent = findEventAtHour(editingHour);\r\n+      if (existingEvent) {\r\n+        // Update\r\n+        const res = await fetch(`http://localhost:5000/api/events/${existingEvent._id}`, {\r\n+          method: 'PUT',\r\n+          headers: authHeaders,\r\n+          body: JSON.stringify(eventPayload),\r\n+        });\r\n+        const updated = await res.json();\r\n+        setEvents(events.map(e => (e._id === updated._id ? updated : e)));\r\n+      } else {\r\n+        // Create\r\n+        const res = await fetch('http://localhost:5000/api/events', {\r\n+          method: 'POST',\r\n+          headers: authHeaders,\r\n+          body: JSON.stringify(eventPayload),\r\n+        });\r\n+        const created = await res.json();\r\n+        setEvents([...events, created]);\r\n+      }\r\n+      setEditingHour(null);\r\n+      setFormData({ name: '', phone: '', type: 'Point' });\r\n+      setErrors({});\r\n+    } catch (error) {\r\n+      console.error('Failed to save event:', error);\r\n     }\r\n-    // Construct datetime string with selectedDay + hour\r\n-    const dateTime = `${selectedDay}T${hourToTimeString(addingHour)}:00`;\r\n+  };\r\n \r\n-    // Build event object and send to backend, then refresh events state...\r\n+  const handleDelete = async () => {\r\n+    const existingEvent = findEventAtHour(editingHour);\r\n+    if (!existingEvent) return;\r\n \r\n-    // Close form\r\n-    setAddingHour(null);\r\n+    try {\r\n+      await fetch(`http://localhost:5000/api/events/${existingEvent._id}`, {\r\n+        method: 'DELETE',\r\n+        headers: authHeaders,\r\n+      });\r\n+      setEvents(events.filter(e => e._id !== existingEvent._id));\r\n+      setEditingHour(null);\r\n+      setFormData({ name: '', phone: '', type: 'Point' });\r\n+      setErrors({});\r\n+    } catch (error) {\r\n+      console.error('Failed to delete event:', error);\r\n+    }\r\n   };\r\n \r\n-  const hourToTimeString = (hour) => hour.toString().padStart(2, '0') + ':00';\r\n+  const startEditing = (hour) => {\r\n+    const ev = findEventAtHour(hour);\r\n+    if (ev) {\r\n+      setFormData({\r\n+        name: ev.name,\r\n+        phone: ev.phone,\r\n+        type: ev.type,\r\n+      });\r\n+    } else {\r\n+      setFormData({ name: '', phone: '', type: 'Point' });\r\n+    }\r\n+    setEditingHour(hour);\r\n+    setErrors({});\r\n+  };\r\n \r\n   return (\r\n     <>\r\n-      <NavBar /* your props */ />\r\n+      <NavBar email={profile?.email} onLogout={() => {\r\n+        localStorage.removeItem('token');\r\n+        // redirect logic here if needed\r\n+      }} />\r\n       <Container maxWidth=\"lg\" sx={{ mt: 4 }}>\r\n         <Box boxShadow={3} p={2} bgcolor=\"white\" borderRadius={2}>\r\n           <FullCalendar\r\n             plugins={[dayGridPlugin, interactionPlugin]}\r\n@@ -65,69 +176,91 @@\n           />\r\n         </Box>\r\n       </Container>\r\n \r\n-      <Dialog open={openDayModal} onClose={() => setOpenDayModal(false)} maxWidth=\"sm\" fullWidth>\r\n+      {/* Daily schedule modal */}\r\n+      <Dialog open={openDayModal} onClose={() => setOpenDayModal(false)} maxWidth=\"md\" fullWidth>\r\n         <DialogTitle>Schedule for {selectedDay}</DialogTitle>\r\n         <DialogContent>\r\n           <Table>\r\n             <TableBody>\r\n-              {HOURS.map((hour) => (\r\n-                <TableRow key={hour}>\r\n-                  <TableCell>{formatHour(hour)}</TableCell>\r\n-                  <TableCell>\r\n-                    {/* List events for this hour */}\r\n-                    {events\r\n-                      .filter(e => e.date.startsWith(`${selectedDay}T${hourToTimeString(hour)}`))\r\n-                      .map((e) => (\r\n-                        <Box key={e._id} sx={{ bgcolor: '#e0e0e0', p: 1, mb: 0.5, borderRadius: 1 }}>\r\n-                          {e.title}\r\n-                        </Box>\r\n-                      ))}\r\n-                  </TableCell>\r\n-                  <TableCell>\r\n-                    {addingHour === hour ? (\r\n-                      <>\r\n-                        <TextField\r\n-                          size=\"small\"\r\n-                          label=\"Name\"\r\n-                          value={formData.name}\r\n-                          onChange={(e) => setFormData({ ...formData, name: e.target.value })}\r\n-                          sx={{ mr: 1 }}\r\n-                        />\r\n-                        <TextField\r\n-                          size=\"small\"\r\n-                          label=\"Phone\"\r\n-                          value={formData.phone}\r\n-                          onChange={(e) => setFormData({ ...formData, phone: e.target.value })}\r\n-                          sx={{ mr: 1 }}\r\n-                        />\r\n-                        <TextField\r\n-                          size=\"small\"\r\n-                          select\r\n-                          label=\"Type\"\r\n-                          value={formData.type}\r\n-                          onChange={(e) => setFormData({ ...formData, type: e.target.value })}\r\n-                          sx={{ width: 120, mr: 1 }}\r\n-                        >\r\n-                          <MenuItem value=\"Point\">Point</MenuItem>\r\n-                          <MenuItem value=\"Rappel\">Rappel</MenuItem>\r\n-                        </TextField>\r\n-                        <Button variant=\"contained\" size=\"small\" onClick={handleFormSubmit}>\r\n-                          Save\r\n+              {HOURS.map((hour) => {\r\n+                const ev = findEventAtHour(hour);\r\n+                const isEditing = editingHour === hour;\r\n+                return (\r\n+                  <TableRow key={hour}>\r\n+                    <TableCell sx={{ width: 80 }}>{formatHour(hour)}</TableCell>\r\n+                    <TableCell sx={{ minWidth: 200 }}>\r\n+                      {ev && !isEditing && (\r\n+                        <>\r\n+                          <Typography><b>Title:</b> {ev.title}</Typography>\r\n+                          <Typography><b>Name:</b> {ev.name}</Typography>\r\n+                          <Typography><b>Phone:</b> {ev.phone}</Typography>\r\n+                        </>\r\n+                      )}\r\n+                      {isEditing && (\r\n+                        <>\r\n+                          <TextField\r\n+                            label=\"Customer Name\"\r\n+                            value={formData.name}\r\n+                            onChange={e => setFormData({ ...formData, name: e.target.value })}\r\n+                            size=\"small\"\r\n+                            error={!!errors.name}\r\n+                            helperText={errors.name}\r\n+                            sx={{ mb: 1 }}\r\n+                            fullWidth\r\n+                          />\r\n+                          <TextField\r\n+                            label=\"Phone\"\r\n+                            value={formData.phone}\r\n+                            onChange={e => setFormData({ ...formData, phone: e.target.value })}\r\n+                            size=\"small\"\r\n+                            error={!!errors.phone}\r\n+                            helperText={errors.phone}\r\n+                            sx={{ mb: 1 }}\r\n+                            fullWidth\r\n+                          />\r\n+                          <TextField\r\n+                            select\r\n+                            label=\"Type\"\r\n+                            value={formData.type}\r\n+                            onChange={e => setFormData({ ...formData, type: e.target.value })}\r\n+                            size=\"small\"\r\n+                            error={!!errors.type}\r\n+                            helperText={errors.type}\r\n+                            fullWidth\r\n+                            sx={{ mb: 1 }}\r\n+                          >\r\n+                            <MenuItem value=\"Point\">Point</MenuItem>\r\n+                            <MenuItem value=\"Rappel\">Rappel</MenuItem>\r\n+                          </TextField>\r\n+                        </>\r\n+                      )}\r\n+                    </TableCell>\r\n+                    <TableCell sx={{ width: 180 }}>\r\n+                      {isEditing ? (\r\n+                        <>\r\n+                          <Button variant=\"contained\" size=\"small\" onClick={handleAddOrUpdate} sx={{ mr: 1 }}>\r\n+                            Save\r\n+                          </Button>\r\n+                          {ev && (\r\n+                            <Button variant=\"outlined\" color=\"error\" size=\"small\" onClick={handleDelete} sx={{ mr: 1 }}>\r\n+                              Delete\r\n+                            </Button>\r\n+                          )}\r\n+                          <Button size=\"small\" onClick={() => setEditingHour(null)}>\r\n+                            Cancel\r\n+                          </Button>\r\n+                        </>\r\n+                      ) : (\r\n+                        <Button variant=\"outlined\" size=\"small\" onClick={() => startEditing(hour)}>\r\n+                          {ev ? 'Modify' : 'Add'}\r\n                         </Button>\r\n-                        <Button size=\"small\" onClick={() => setAddingHour(null)}>\r\n-                          Cancel\r\n-                        </Button>\r\n-                      </>\r\n-                    ) : (\r\n-                      <Button variant=\"outlined\" size=\"small\" onClick={() => handleAddClick(hour)}>\r\n-                        Add Event\r\n-                      </Button>\r\n-                    )}\r\n-                  </TableCell>\r\n-                </TableRow>\r\n-              ))}\r\n+                      )}\r\n+                    </TableCell>\r\n+                  </TableRow>\r\n+                );\r\n+              })}\r\n             </TableBody>\r\n           </Table>\r\n         </DialogContent>\r\n         <DialogActions>\r\n"
                },
                {
                    "date": 1751837622795,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,30 +9,31 @@\n   Button,\r\n   TextField,\r\n   MenuItem,\r\n   Table,\r\n+  TableHead,\r\n   TableBody,\r\n+  TableRow,\r\n   TableCell,\r\n-  TableRow,\r\n   Typography,\r\n } from '@mui/material';\r\n import FullCalendar from '@fullcalendar/react';\r\n import dayGridPlugin from '@fullcalendar/daygrid';\r\n import interactionPlugin from '@fullcalendar/interaction';\r\n import NavBar from '../components/NavBar';\r\n \r\n-const HOURS = Array.from({ length: 16 }, (_, i) => 8 + i); // 08:00 to 23:00\r\n+const HOURS = Array.from({ length: 17 }, (_, i) => 8 + i); // 08:00 to 00:00 (8+16=24)\r\n \r\n function formatHour(h) {\r\n-  return `${h.toString().padStart(2, '0')}:00`;\r\n+  return h === 24 ? '00:00' : `${h.toString().padStart(2, '0')}:00`;\r\n }\r\n \r\n export default function Dashboard() {\r\n   const [profile, setProfile] = useState(null);\r\n   const [events, setEvents] = useState([]);\r\n   const [selectedDay, setSelectedDay] = useState(null);\r\n   const [openDayModal, setOpenDayModal] = useState(false);\r\n-  const [editingHour, setEditingHour] = useState(null); // hour currently editing\r\n+  const [editingHour, setEditingHour] = useState(null);\r\n   const [formData, setFormData] = useState({ name: '', phone: '', type: 'Point' });\r\n   const [errors, setErrors] = useState({});\r\n \r\n   const token = localStorage.getItem('token');\r\n@@ -43,18 +44,16 @@\n \r\n   useEffect(() => {\r\n     if (!token) return;\r\n \r\n-    // Fetch profile\r\n     fetch('http://localhost:5000/api/admin/profile', { headers: authHeaders })\r\n       .then(res => res.ok ? res.json() : Promise.reject())\r\n       .then(setProfile)\r\n       .catch(() => {\r\n         localStorage.removeItem('token');\r\n-        // redirect logic here if needed\r\n+        // redirect if needed\r\n       });\r\n \r\n-    // Fetch all events\r\n     fetch('http://localhost:5000/api/events', { headers: authHeaders })\r\n       .then(res => res.json())\r\n       .then(setEvents)\r\n       .catch(console.error);\r\n@@ -67,11 +66,11 @@\n     setFormData({ name: '', phone: '', type: 'Point' });\r\n     setErrors({});\r\n   };\r\n \r\n-  // Helper: find event by day+hour (full datetime starts with day + 'T' + hour)\r\n   const findEventAtHour = (hour) => {\r\n-    const prefix = `${selectedDay}T${formatHour(hour)}`;\r\n+    const hourStr = hour === 24 ? '00:00' : formatHour(hour);\r\n+    const prefix = `${selectedDay}T${hourStr}`;\r\n     return events.find(e => e.date.startsWith(prefix));\r\n   };\r\n \r\n   const validate = () => {\r\n@@ -86,9 +85,10 @@\n \r\n   const handleAddOrUpdate = async () => {\r\n     if (!validate()) return;\r\n \r\n-    const dateTime = `${selectedDay}T${formatHour(editingHour)}:00`;\r\n+    const hourStr = editingHour === 24 ? '00:00' : formatHour(editingHour);\r\n+    const dateTime = `${selectedDay}T${hourStr}:00`;\r\n \r\n     const eventPayload = {\r\n       title: `${formData.type} - ${formData.name}`,\r\n       date: dateTime,\r\n@@ -99,18 +99,16 @@\n \r\n     try {\r\n       const existingEvent = findEventAtHour(editingHour);\r\n       if (existingEvent) {\r\n-        // Update\r\n         const res = await fetch(`http://localhost:5000/api/events/${existingEvent._id}`, {\r\n           method: 'PUT',\r\n           headers: authHeaders,\r\n           body: JSON.stringify(eventPayload),\r\n         });\r\n         const updated = await res.json();\r\n         setEvents(events.map(e => (e._id === updated._id ? updated : e)));\r\n       } else {\r\n-        // Create\r\n         const res = await fetch('http://localhost:5000/api/events', {\r\n           method: 'POST',\r\n           headers: authHeaders,\r\n           body: JSON.stringify(eventPayload),\r\n@@ -120,10 +118,10 @@\n       }\r\n       setEditingHour(null);\r\n       setFormData({ name: '', phone: '', type: 'Point' });\r\n       setErrors({});\r\n-    } catch (error) {\r\n-      console.error('Failed to save event:', error);\r\n+    } catch (err) {\r\n+      console.error('Save event failed:', err);\r\n     }\r\n   };\r\n \r\n   const handleDelete = async () => {\r\n@@ -138,10 +136,10 @@\n       setEvents(events.filter(e => e._id !== existingEvent._id));\r\n       setEditingHour(null);\r\n       setFormData({ name: '', phone: '', type: 'Point' });\r\n       setErrors({});\r\n-    } catch (error) {\r\n-      console.error('Failed to delete event:', error);\r\n+    } catch (err) {\r\n+      console.error('Delete event failed:', err);\r\n     }\r\n   };\r\n \r\n   const startEditing = (hour) => {\r\n@@ -162,9 +160,9 @@\n   return (\r\n     <>\r\n       <NavBar email={profile?.email} onLogout={() => {\r\n         localStorage.removeItem('token');\r\n-        // redirect logic here if needed\r\n+        // redirect if needed\r\n       }} />\r\n       <Container maxWidth=\"lg\" sx={{ mt: 4 }}>\r\n         <Box boxShadow={3} p={2} bgcolor=\"white\" borderRadius={2}>\r\n           <FullCalendar\r\n@@ -176,84 +174,116 @@\n           />\r\n         </Box>\r\n       </Container>\r\n \r\n-      {/* Daily schedule modal */}\r\n-      <Dialog open={openDayModal} onClose={() => setOpenDayModal(false)} maxWidth=\"md\" fullWidth>\r\n+      <Dialog open={openDayModal} onClose={() => setOpenDayModal(false)} maxWidth=\"lg\" fullWidth>\r\n         <DialogTitle>Schedule for {selectedDay}</DialogTitle>\r\n         <DialogContent>\r\n           <Table>\r\n+            <TableHead>\r\n+              <TableRow>\r\n+                <TableCell>Hour</TableCell>\r\n+                <TableCell>Event Name</TableCell>\r\n+                <TableCell>Customer Name</TableCell>\r\n+                <TableCell>Customer Phone</TableCell>\r\n+                <TableCell>Action</TableCell>\r\n+              </TableRow>\r\n+            </TableHead>\r\n+\r\n             <TableBody>\r\n               {HOURS.map((hour) => {\r\n                 const ev = findEventAtHour(hour);\r\n                 const isEditing = editingHour === hour;\r\n                 return (\r\n                   <TableRow key={hour}>\r\n-                    <TableCell sx={{ width: 80 }}>{formatHour(hour)}</TableCell>\r\n-                    <TableCell sx={{ minWidth: 200 }}>\r\n-                      {ev && !isEditing && (\r\n-                        <>\r\n-                          <Typography><b>Title:</b> {ev.title}</Typography>\r\n-                          <Typography><b>Name:</b> {ev.name}</Typography>\r\n-                          <Typography><b>Phone:</b> {ev.phone}</Typography>\r\n-                        </>\r\n+                    <TableCell>{formatHour(hour)}</TableCell>\r\n+\r\n+                    <TableCell>\r\n+                      {isEditing ? (\r\n+                        <TextField\r\n+                          size=\"small\"\r\n+                          value={formData.type + ' - ' + formData.name}\r\n+                          disabled\r\n+                          fullWidth\r\n+                        />\r\n+                      ) : ev ? (\r\n+                        ev.title\r\n+                      ) : (\r\n+                        ''\r\n                       )}\r\n-                      {isEditing && (\r\n-                        <>\r\n-                          <TextField\r\n-                            label=\"Customer Name\"\r\n-                            value={formData.name}\r\n-                            onChange={e => setFormData({ ...formData, name: e.target.value })}\r\n-                            size=\"small\"\r\n-                            error={!!errors.name}\r\n-                            helperText={errors.name}\r\n-                            sx={{ mb: 1 }}\r\n-                            fullWidth\r\n-                          />\r\n-                          <TextField\r\n-                            label=\"Phone\"\r\n-                            value={formData.phone}\r\n-                            onChange={e => setFormData({ ...formData, phone: e.target.value })}\r\n-                            size=\"small\"\r\n-                            error={!!errors.phone}\r\n-                            helperText={errors.phone}\r\n-                            sx={{ mb: 1 }}\r\n-                            fullWidth\r\n-                          />\r\n-                          <TextField\r\n-                            select\r\n-                            label=\"Type\"\r\n-                            value={formData.type}\r\n-                            onChange={e => setFormData({ ...formData, type: e.target.value })}\r\n-                            size=\"small\"\r\n-                            error={!!errors.type}\r\n-                            helperText={errors.type}\r\n-                            fullWidth\r\n-                            sx={{ mb: 1 }}\r\n-                          >\r\n-                            <MenuItem value=\"Point\">Point</MenuItem>\r\n-                            <MenuItem value=\"Rappel\">Rappel</MenuItem>\r\n-                          </TextField>\r\n-                        </>\r\n+                    </TableCell>\r\n+\r\n+                    <TableCell>\r\n+                      {isEditing ? (\r\n+                        <TextField\r\n+                          size=\"small\"\r\n+                          value={formData.name}\r\n+                          onChange={e => setFormData({ ...formData, name: e.target.value })}\r\n+                          error={!!errors.name}\r\n+                          helperText={errors.name}\r\n+                          fullWidth\r\n+                        />\r\n+                      ) : ev ? (\r\n+                        ev.name\r\n+                      ) : (\r\n+                        ''\r\n                       )}\r\n                     </TableCell>\r\n-                    <TableCell sx={{ width: 180 }}>\r\n+\r\n+                    <TableCell>\r\n                       {isEditing ? (\r\n+                        <TextField\r\n+                          size=\"small\"\r\n+                          value={formData.phone}\r\n+                          onChange={e => setFormData({ ...formData, phone: e.target.value })}\r\n+                          error={!!errors.phone}\r\n+                          helperText={errors.phone}\r\n+                          fullWidth\r\n+                        />\r\n+                      ) : ev ? (\r\n+                        ev.phone\r\n+                      ) : (\r\n+                        ''\r\n+                      )}\r\n+                    </TableCell>\r\n+\r\n+                    <TableCell>\r\n+                      {isEditing ? (\r\n                         <>\r\n-                          <Button variant=\"contained\" size=\"small\" onClick={handleAddOrUpdate} sx={{ mr: 1 }}>\r\n+                          <Button\r\n+                            variant=\"contained\"\r\n+                            size=\"small\"\r\n+                            onClick={handleAddOrUpdate}\r\n+                            sx={{ mr: 1 }}\r\n+                          >\r\n                             Save\r\n                           </Button>\r\n+\r\n                           {ev && (\r\n-                            <Button variant=\"outlined\" color=\"error\" size=\"small\" onClick={handleDelete} sx={{ mr: 1 }}>\r\n+                            <Button\r\n+                              variant=\"outlined\"\r\n+                              color=\"error\"\r\n+                              size=\"small\"\r\n+                              onClick={handleDelete}\r\n+                              sx={{ mr: 1 }}\r\n+                            >\r\n                               Delete\r\n                             </Button>\r\n                           )}\r\n-                          <Button size=\"small\" onClick={() => setEditingHour(null)}>\r\n+\r\n+                          <Button\r\n+                            size=\"small\"\r\n+                            onClick={() => setEditingHour(null)}\r\n+                          >\r\n                             Cancel\r\n                           </Button>\r\n                         </>\r\n                       ) : (\r\n-                        <Button variant=\"outlined\" size=\"small\" onClick={() => startEditing(hour)}>\r\n+                        <Button\r\n+                          variant=\"outlined\"\r\n+                          size=\"small\"\r\n+                          onClick={() => startEditing(hour)}\r\n+                        >\r\n                           {ev ? 'Modify' : 'Add'}\r\n                         </Button>\r\n                       )}\r\n                     </TableCell>\r\n@@ -262,1404 +292,12 @@\n               })}\r\n             </TableBody>\r\n           </Table>\r\n         </DialogContent>\r\n+\r\n         <DialogActions>\r\n           <Button onClick={() => setOpenDayModal(false)}>Close</Button>\r\n         </DialogActions>\r\n       </Dialog>\r\n     </>\r\n   );\r\n }\r\n-import React, { useState, useEffect } from 'react';\r\n-import { useNavigate } from 'react-router-dom';\r\n-import FullCalendar from '@fullcalendar/react';\r\n-import dayGridPlugin from '@fullcalendar/daygrid';\r\n-import timeGridPlugin from '@fullcalendar/timegrid';\r\n-import interactionPlugin from '@fullcalendar/interaction';\r\n-import {\r\n-  Container,\r\n-  Box,\r\n-  Dialog,\r\n-  DialogTitle,\r\n-  DialogContent,\r\n-  DialogActions,\r\n-  Button,\r\n-  TextField,\r\n-  MenuItem,\r\n-} from '@mui/material';\r\n-import NavBar from '../components/NavBar';\r\n-\r\n-const PROFILE_URL = 'http://localhost:5000/api/admin/profile';\r\n-const EVENTS_URL = 'http://localhost:5000/api/events';\r\n-\r\n-function Dashboard() {\r\n-  const [profile, setProfile] = useState(null);\r\n-  const [events, setEvents] = useState([]);\r\n-  const [open, setOpen] = useState(false);\r\n-  const [newEventDate, setNewEventDate] = useState('');\r\n-  const [eventTime, setEventTime] = useState('09:00');\r\n-  const [selectedEvent, setSelectedEvent] = useState(null);\r\n-  const [formData, setFormData] = useState({\r\n-    name: '',\r\n-    phone: '',\r\n-    type: 'Point',\r\n-  });\r\n-  const [errors, setErrors] = useState({});\r\n-\r\n-  const navigate = useNavigate();\r\n-  const token = localStorage.getItem('token');\r\n-\r\n-  const authHeaders = {\r\n-    Authorization: `Bearer ${token}`,\r\n-    'Content-Type': 'application/json',\r\n-  };\r\n-\r\n-  useEffect(() => {\r\n-    if (!token) return navigate('/');\r\n-\r\n-    fetch(PROFILE_URL, { headers: authHeaders })\r\n-      .then(res => {\r\n-        if (!res.ok) throw new Error('Unauthorized');\r\n-        return res.json();\r\n-      })\r\n-      .then(setProfile)\r\n-      .catch(() => {\r\n-        localStorage.removeItem('token');\r\n-        navigate('/');\r\n-      });\r\n-\r\n-    fetch(EVENTS_URL, { headers: authHeaders })\r\n-      .then(res => res.json())\r\n-      .then(setEvents)\r\n-      .catch(err => console.error('Error loading events:', err));\r\n-  }, [navigate]);\r\n-\r\n-  const logout = () => {\r\n-    localStorage.removeItem('token');\r\n-    navigate('/');\r\n-  };\r\n-\r\n-  const handleDateClick = (arg) => {\r\n-    setNewEventDate(arg.dateStr);\r\n-    setEventTime('09:00');\r\n-    setFormData({ name: '', phone: '', type: 'Point' });\r\n-    setSelectedEvent(null);\r\n-    setErrors({});\r\n-    setOpen(true);\r\n-  };\r\n-\r\n-  const handleEventClick = (clickInfo) => {\r\n-    const { id, extendedProps, startStr } = clickInfo.event;\r\n-    setFormData({\r\n-      name: extendedProps.name || '',\r\n-      phone: extendedProps.phone || '',\r\n-      type: extendedProps.type || 'Point',\r\n-    });\r\n-\r\n-    let time = '09:00';\r\n-    if (startStr && startStr.includes('T')) {\r\n-      time = startStr.split('T')[1].slice(0, 5);\r\n-    }\r\n-\r\n-    setNewEventDate(startStr.split('T')[0]);\r\n-    setEventTime(time);\r\n-    setSelectedEvent({ id });\r\n-    setErrors({});\r\n-    setOpen(true);\r\n-  };\r\n-\r\n-  const validate = () => {\r\n-    const errs = {};\r\n-    if (!formData.name.trim()) errs.name = 'Name is required';\r\n-    if (!formData.phone.trim()) errs.phone = 'Phone is required';\r\n-    else if (!/^\\d{10}$/.test(formData.phone)) errs.phone = 'Invalid phone (10 digits)';\r\n-    if (!['Point', 'Rappel'].includes(formData.type)) errs.type = 'Invalid type';\r\n-    setErrors(errs);\r\n-    return Object.keys(errs).length === 0;\r\n-  };\r\n-\r\n-  const handleSave = async () => {\r\n-    if (!validate()) return;\r\n-\r\n-    const dateTime = `${newEventDate}T${eventTime}:00`;\r\n-\r\n-    const eventPayload = {\r\n-      title: `${formData.type} - ${formData.name}`,\r\n-      date: dateTime,\r\n-      name: formData.name,\r\n-      phone: formData.phone,\r\n-      type: formData.type,\r\n-    };\r\n-\r\n-    try {\r\n-      if (selectedEvent) {\r\n-        const res = await fetch(`${EVENTS_URL}/${selectedEvent.id}`, {\r\n-          method: 'PUT',\r\n-          headers: authHeaders,\r\n-          body: JSON.stringify(eventPayload),\r\n-        });\r\n-        const updated = await res.json();\r\n-        setEvents(events.map(e => (e._id === updated._id ? updated : e)));\r\n-      } else {\r\n-        const res = await fetch(EVENTS_URL, {\r\n-          method: 'POST',\r\n-          headers: authHeaders,\r\n-          body: JSON.stringify(eventPayload),\r\n-        });\r\n-        const saved = await res.json();\r\n-        setEvents([...events, saved]);\r\n-      }\r\n-      setOpen(false);\r\n-      setSelectedEvent(null);\r\n-      setFormData({ name: '', phone: '', type: 'Point' });\r\n-      setErrors({});\r\n-    } catch (err) {\r\n-      console.error('Failed to save event:', err);\r\n-    }\r\n-  };\r\n-\r\n-  const handleDelete = async () => {\r\n-    if (!selectedEvent) return;\r\n-    try {\r\n-      await fetch(`${EVENTS_URL}/${selectedEvent.id}`, {\r\n-        method: 'DELETE',\r\n-        headers: authHeaders,\r\n-      });\r\n-      setEvents(events.filter(e => e._id !== selectedEvent.id));\r\n-      setOpen(false);\r\n-      setSelectedEvent(null);\r\n-      setFormData({ name: '', phone: '', type: 'Point' });\r\n-    } catch (err) {\r\n-      console.error('Failed to delete event:', err);\r\n-    }\r\n-  };\r\n-\r\n-  return (\r\n-    <>\r\n-      <NavBar email={profile?.email} onLogout={logout} />\r\n-      <Container maxWidth=\"lg\" sx={{ mt: 4 }}>\r\n-        <Box boxShadow={3} p={2} bgcolor=\"white\" borderRadius={2}>\r\n-          <FullCalendar\r\n-            plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin]}\r\n-            initialView=\"dayGridMonth\"\r\n-            editable={true}\r\n-            selectable={true}\r\n-            events={events}\r\n-            dateClick={handleDateClick}\r\n-            eventClick={handleEventClick}\r\n-          />\r\n-        </Box>\r\n-      </Container>\r\n-\r\n-      <Dialog open={open} onClose={() => setOpen(false)}>\r\n-        <DialogTitle>{selectedEvent ? 'Edit Event' : 'Add Event'}</DialogTitle>\r\n-        <DialogContent>\r\n-          <TextField\r\n-            label=\"Customer Name\"\r\n-            name=\"name\"\r\n-            value={formData.name}\r\n-            onChange={(e) => setFormData({ ...formData, name: e.target.value })}\r\n-            fullWidth\r\n-            margin=\"dense\"\r\n-            error={!!errors.name}\r\n-            helperText={errors.name}\r\n-          />\r\n-          <TextField\r\n-            label=\"Phone\"\r\n-            name=\"phone\"\r\n-            value={formData.phone}\r\n-            onChange={(e) => setFormData({ ...formData, phone: e.target.value })}\r\n-            fullWidth\r\n-            margin=\"dense\"\r\n-            error={!!errors.phone}\r\n-            helperText={errors.phone}\r\n-          />\r\n-          <TextField\r\n-            label=\"Type\"\r\n-            name=\"type\"\r\n-            select\r\n-            value={formData.type}\r\n-            onChange={(e) => setFormData({ ...formData, type: e.target.value })}\r\n-            fullWidth\r\n-            margin=\"dense\"\r\n-            error={!!errors.type}\r\n-            helperText={errors.type}\r\n-          >\r\n-            <MenuItem value=\"Point\">Point</MenuItem>\r\n-            <MenuItem value=\"Rappel\">Rappel</MenuItem>\r\n-          </TextField>\r\n-          <TextField\r\n-            label=\"Time\"\r\n-            type=\"time\"\r\n-            value={eventTime}\r\n-            onChange={(e) => setEventTime(e.target.value)}\r\n-            fullWidth\r\n-            margin=\"dense\"\r\n-            InputLabelProps={{ shrink: true }}\r\n-            inputProps={{ step: 300 }}\r\n-          />\r\n-        </DialogContent>\r\n-        <DialogActions>\r\n-          {selectedEvent && (\r\n-            <Button color=\"error\" onClick={handleDelete}>\r\n-              Delete\r\n-            </Button>\r\n-          )}\r\n-          <Button onClick={() => setOpen(false)}>Cancel</Button>\r\n-          <Button variant=\"contained\" onClick={handleSave}>\r\n-            {selectedEvent ? 'Update' : 'Add'}\r\n-          </Button>\r\n-        </DialogActions>\r\n-      </Dialog>\r\n-    </>\r\n-  );\r\n-}\r\n-\r\n-export default Dashboard;\r\n-import FullCalendar from '@fullcalendar/react';\r\n-import timeGridPlugin from '@fullcalendar/timegrid';\r\n-\r\n-// state:\r\n-const [openModalDay, setOpenModalDay] = useState(false);\r\n-const [modalDay, setModalDay] = useState(null); // clicked day for modal calendar\r\n-const [modalEvents, setModalEvents] = useState([]); // events for modal calendar day\r\n-\r\n-const [selectedTimeSlot, setSelectedTimeSlot] = useState(null); // for picking hour inside modal calendar\r\n-const [formVisible, setFormVisible] = useState(false);\r\n-\r\n-// When user clicks a day in main calendar:\r\n-function handleDateClick(arg) {\r\n-  setModalDay(arg.dateStr);  // e.g. \"2025-07-10\"\r\n-  setOpenModalDay(true);\r\n-\r\n-  // Filter your events to show only events on this day\r\n-  const filtered = events.filter(e => e.date.startsWith(arg.dateStr));\r\n-  setModalEvents(filtered);\r\n-}\r\n-\r\n-// Inside modal calendar, when user selects a time slot (hour):\r\n-function handleModalSelect(selectionInfo) {\r\n-  setSelectedTimeSlot(selectionInfo); // contains start, end times\r\n-  setFormVisible(true);\r\n-}\r\n-\r\n-// Form submit inside modal to add event for selectedTimeSlot.start\r\n-\r\n-async function addEventForSelectedTime(formData) {\r\n-  const eventPayload = {\r\n-    title: `${formData.type} - ${formData.name}`,\r\n-    date: selectedTimeSlot.startStr, // full ISO datetime with hour\r\n-    name: formData.name,\r\n-    phone: formData.phone,\r\n-    type: formData.type,\r\n-  };\r\n-\r\n-  // send to backend, update events state etc...\r\n-\r\n-  // Close form and refresh modalEvents + main events\r\n-  setFormVisible(false);\r\n-  setSelectedTimeSlot(null);\r\n-  // fetch events again or update states\r\n-}\r\n-\r\n-// Modal render example:\r\n-\r\n-<Dialog open={openModalDay} onClose={() => setOpenModalDay(false)} maxWidth=\"md\" fullWidth>\r\n-  <DialogTitle>{modalDay}</DialogTitle>\r\n-  <DialogContent>\r\n-    <FullCalendar\r\n-      plugins={[timeGridPlugin, interactionPlugin]}\r\n-      initialView=\"timeGridDay\"\r\n-      slotDuration=\"00:30:00\"\r\n-      initialDate={modalDay}\r\n-      selectable={true}\r\n-      select={handleModalSelect}\r\n-      events={modalEvents}\r\n-      height=\"auto\"\r\n-    />\r\n-\r\n-    {formVisible && (\r\n-      <YourEventForm\r\n-        onSubmit={addEventForSelectedTime}\r\n-        onCancel={() => setFormVisible(false)}\r\n-        selectedDateTime={selectedTimeSlot.startStr}\r\n-      />\r\n-    )}\r\n-  </DialogContent>\r\n-  <DialogActions>\r\n-    <Button onClick={() => setOpenModalDay(false)}>Close</Button>\r\n-  </DialogActions>\r\n-</Dialog>\r\n-import React, { useEffect, useState } from 'react';\r\n-import { useNavigate } from 'react-router-dom';\r\n-import FullCalendar from '@fullcalendar/react';\r\n-import dayGridPlugin from '@fullcalendar/daygrid';\r\n-import interactionPlugin from '@fullcalendar/interaction';\r\n-import timeGridPlugin from '@fullcalendar/timegrid';\r\n-import {\r\n-  Container,\r\n-  Box,\r\n-  Dialog,\r\n-  DialogTitle,\r\n-  DialogContent,\r\n-  DialogActions,\r\n-  Button,\r\n-  TextField,\r\n-  MenuItem,\r\n-} from '@mui/material';\r\n-import NavBar from '../components/NavBar';\r\n-\r\n-const PROFILE_URL = 'http://localhost:5000/api/admin/profile';\r\n-const EVENTS_URL = 'http://localhost:5000/api/events';\r\n-\r\n-export default function Dashboard() {\r\n-  const [profile, setProfile] = useState(null);\r\n-  const [events, setEvents] = useState([]);\r\n-  const [open, setOpen] = useState(false);\r\n-  const [newEventDate, setNewEventDate] = useState('');\r\n-  const [eventTime, setEventTime] = useState('09:00');\r\n-  const [selectedEvent, setSelectedEvent] = useState(null);\r\n-  const [formData, setFormData] = useState({\r\n-    name: '',\r\n-    phone: '',\r\n-    type: 'Point',\r\n-  });\r\n-  const [errors, setErrors] = useState({});\r\n-\r\n-  const navigate = useNavigate();\r\n-  const token = localStorage.getItem('token');\r\n-\r\n-  const authHeaders = {\r\n-    Authorization: `Bearer ${token}`,\r\n-    'Content-Type': 'application/json',\r\n-  };\r\n-\r\n-  useEffect(() => {\r\n-    if (!token) return navigate('/');\r\n-\r\n-    // Fetch profile\r\n-    fetch(PROFILE_URL, { headers: authHeaders })\r\n-      .then(res => {\r\n-        if (!res.ok) throw new Error('Unauthorized');\r\n-        return res.json();\r\n-      })\r\n-      .then(setProfile)\r\n-      .catch(() => {\r\n-        localStorage.removeItem('token');\r\n-        navigate('/');\r\n-      });\r\n-\r\n-    // Fetch events\r\n-    fetch(EVENTS_URL, { headers: authHeaders })\r\n-      .then(res => res.json())\r\n-      .then(setEvents)\r\n-      .catch(err => console.error('Error loading events:', err));\r\n-  }, [navigate]);\r\n-\r\n-  const logout = () => {\r\n-    localStorage.removeItem('token');\r\n-    navigate('/');\r\n-  };\r\n-\r\n-  const handleDateClick = (arg) => {\r\n-    setNewEventDate(arg.dateStr);\r\n-    setEventTime('09:00');\r\n-    setFormData({ name: '', phone: '', type: 'Point' });\r\n-    setSelectedEvent(null);\r\n-    setErrors({});\r\n-    setOpen(true);\r\n-  };\r\n-\r\n-  const handleEventClick = (clickInfo) => {\r\n-    const { id, extendedProps, startStr } = clickInfo.event;\r\n-    setFormData({\r\n-      name: extendedProps.name || '',\r\n-      phone: extendedProps.phone || '',\r\n-      type: extendedProps.type || 'Point',\r\n-    });\r\n-\r\n-    // Extract time part from ISO datetime string if available\r\n-    let time = '09:00';\r\n-    if (startStr && startStr.includes('T')) {\r\n-      time = startStr.split('T')[1].slice(0, 5); // HH:mm\r\n-    }\r\n-\r\n-    setNewEventDate(startStr.split('T')[0]);\r\n-    setEventTime(time);\r\n-    setSelectedEvent({ id });\r\n-    setErrors({});\r\n-    setOpen(true);\r\n-  };\r\n-\r\n-  const validate = () => {\r\n-    const errs = {};\r\n-    if (!formData.name.trim()) errs.name = 'Name is required';\r\n-    if (!formData.phone.trim()) errs.phone = 'Phone is required';\r\n-    else if (!/^\\d{10}$/.test(formData.phone)) errs.phone = 'Invalid phone (10 digits)';\r\n-    if (!['Point', 'Rappel'].includes(formData.type)) errs.type = 'Invalid type';\r\n-    setErrors(errs);\r\n-    return Object.keys(errs).length === 0;\r\n-  };\r\n-\r\n-  const handleSave = async () => {\r\n-    if (!validate()) return;\r\n-\r\n-    const dateTime = `${newEventDate}T${eventTime}:00`;\r\n-\r\n-    const eventPayload = {\r\n-      title: `${formData.type} - ${formData.name}`,\r\n-      date: dateTime,\r\n-      name: formData.name,\r\n-      phone: formData.phone,\r\n-      type: formData.type,\r\n-    };\r\n-\r\n-    try {\r\n-      if (selectedEvent) {\r\n-        // Update existing\r\n-        const res = await fetch(`${EVENTS_URL}/${selectedEvent.id}`, {\r\n-          method: 'PUT',\r\n-          headers: authHeaders,\r\n-          body: JSON.stringify(eventPayload),\r\n-        });\r\n-        const updated = await res.json();\r\n-        setEvents(events.map(e => (e._id === updated._id ? updated : e)));\r\n-      } else {\r\n-        // Create new\r\n-        const res = await fetch(EVENTS_URL, {\r\n-          method: 'POST',\r\n-          headers: authHeaders,\r\n-          body: JSON.stringify(eventPayload),\r\n-        });\r\n-        const saved = await res.json();\r\n-        setEvents([...events, saved]);\r\n-      }\r\n-\r\n-      setOpen(false);\r\n-      setSelectedEvent(null);\r\n-      setFormData({ name: '', phone: '', type: 'Point' });\r\n-      setErrors({});\r\n-    } catch (err) {\r\n-      console.error('Failed to save event:', err);\r\n-    }\r\n-  };\r\n-\r\n-  const handleDelete = async () => {\r\n-    if (!selectedEvent) return;\r\n-    try {\r\n-      await fetch(`${EVENTS_URL}/${selectedEvent.id}`, {\r\n-        method: 'DELETE',\r\n-        headers: authHeaders,\r\n-      });\r\n-      setEvents(events.filter(e => e._id !== selectedEvent.id));\r\n-      setOpen(false);\r\n-      setSelectedEvent(null);\r\n-      setFormData({ name: '', phone: '', type: 'Point' });\r\n-    } catch (err) {\r\n-      console.error('Failed to delete event:', err);\r\n-    }\r\n-  };\r\n-\r\n-  return (\r\n-    <>\r\n-      <NavBar email={profile?.email} onLogout={logout} />\r\n-      <Container maxWidth=\"lg\" sx={{ mt: 4 }}>\r\n-        <Box boxShadow={3} p={2} bgcolor=\"white\" borderRadius={2}>\r\n-          <FullCalendar\r\n-            plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin]}\r\n-            initialView=\"dayGridMonth\"\r\n-            editable={true}\r\n-            selectable={true}\r\n-            events={events}\r\n-            dateClick={handleDateClick}\r\n-            eventClick={handleEventClick}\r\n-          />\r\n-        </Box>\r\n-      </Container>\r\n-\r\n-      {/* Modal */}\r\n-      <Dialog open={open} onClose={() => setOpen(false)}>\r\n-        <DialogTitle>{selectedEvent ? 'Edit Event' : 'Add Event'}</DialogTitle>\r\n-        <DialogContent>\r\n-          <TextField\r\n-            label=\"Customer Name\"\r\n-            name=\"name\"\r\n-            value={formData.name}\r\n-            onChange={(e) => setFormData({ ...formData, name: e.target.value })}\r\n-            fullWidth\r\n-            margin=\"dense\"\r\n-            error={!!errors.name}\r\n-            helperText={errors.name}\r\n-          />\r\n-          <TextField\r\n-            label=\"Phone\"\r\n-            name=\"phone\"\r\n-            value={formData.phone}\r\n-            onChange={(e) => setFormData({ ...formData, phone: e.target.value })}\r\n-            fullWidth\r\n-            margin=\"dense\"\r\n-            error={!!errors.phone}\r\n-            helperText={errors.phone}\r\n-          />\r\n-          <TextField\r\n-            label=\"Type\"\r\n-            name=\"type\"\r\n-            select\r\n-            value={formData.type}\r\n-            onChange={(e) => setFormData({ ...formData, type: e.target.value })}\r\n-            fullWidth\r\n-            margin=\"dense\"\r\n-            error={!!errors.type}\r\n-            helperText={errors.type}\r\n-          >\r\n-            <MenuItem value=\"Point\">Point</MenuItem>\r\n-            <MenuItem value=\"Rappel\">Rappel</MenuItem>\r\n-          </TextField>\r\n-\r\n-          <TextField\r\n-            label=\"Time\"\r\n-            type=\"time\"\r\n-            value={eventTime}\r\n-            onChange={(e) => setEventTime(e.target.value)}\r\n-            fullWidth\r\n-            margin=\"dense\"\r\n-            InputLabelProps={{ shrink: true }}\r\n-            inputProps={{ step: 300 }}\r\n-          />\r\n-        </DialogContent>\r\n-        <DialogActions>\r\n-          {selectedEvent && (\r\n-            <Button color=\"error\" onClick={handleDelete}>\r\n-              Delete\r\n-            </Button>\r\n-          )}\r\n-          <Button onClick={() => setOpen(false)}>Cancel</Button>\r\n-          <Button variant=\"contained\" onClick={handleSave}>\r\n-            {selectedEvent ? 'Update' : 'Add'}\r\n-          </Button>\r\n-        </DialogActions>\r\n-      </Dialog>\r\n-    </>\r\n-  );\r\n-}\r\n-import React, { useEffect, useState } from 'react';\r\n-import { useNavigate } from 'react-router-dom';\r\n-import FullCalendar from '@fullcalendar/react';\r\n-import dayGridPlugin from '@fullcalendar/daygrid';\r\n-import interactionPlugin from '@fullcalendar/interaction';\r\n-import timeGridPlugin from '@fullcalendar/timegrid';\r\n-import {\r\n-  Container,\r\n-  Box,\r\n-  Dialog,\r\n-  DialogTitle,\r\n-  DialogContent,\r\n-  DialogActions,\r\n-  Button,\r\n-  TextField,\r\n-  MenuItem,\r\n-  ??Typography,\r\n-} from '@mui/material';\r\n-import NavBar from '../components/NavBar';\r\n-\r\n-const PROFILE_URL = 'http://localhost:5000/api/admin/profile';\r\n-const EVENTS_URL = 'http://localhost:5000/api/events';\r\n-\r\n-export default function Dashboard() {\r\n-  const [profile, setProfile] = useState(null);\r\n-  const [events, setEvents] = useState([]);\r\n-  const [open, setOpen] = useState(false);\r\n-  const [newEventDate, setNewEventDate] = useState('');\r\n-  const [selectedEvent, setSelectedEvent] = useState(null); // <- for editing\r\n-  const [formData, setFormData] = useState({\r\n-    name: '',\r\n-    phone: '',\r\n-    type: 'Point',\r\n-  });\r\n-  const [errors, setErrors] = useState({});\r\n-\r\n-  const navigate = useNavigate();\r\n-  const token = localStorage.getItem('token');\r\n-\r\n-  const authHeaders = {\r\n-    Authorization: `Bearer ${token}`,\r\n-    'Content-Type': 'application/json',\r\n-  };\r\n-\r\n-  useEffect(() => {\r\n-    if (!token) return navigate('/');\r\n-\r\n-    // Fetch profile\r\n-    fetch(PROFILE_URL, { headers: authHeaders })\r\n-      .then(res => {\r\n-        if (!res.ok) throw new Error('Unauthorized');\r\n-        return res.json();\r\n-      })\r\n-      .then(setProfile)\r\n-      .catch(() => {\r\n-        localStorage.removeItem('token');\r\n-        navigate('/');\r\n-      });\r\n-\r\n-    // Fetch events\r\n-    fetch(EVENTS_URL, { headers: authHeaders })\r\n-      .then(res => res.json())\r\n-      .then(setEvents)\r\n-      .catch(err => console.error('Error loading events:', err));\r\n-  }, [navigate]);\r\n-\r\n-  const logout = () => {\r\n-    localStorage.removeItem('token');\r\n-    navigate('/');\r\n-  };\r\n-\r\n-  // Open modal for new event\r\n-  const handleDateClick = (arg) => {\r\n-    setNewEventDate(arg.dateStr);\r\n-    setFormData({ name: '', phone: '', type: 'Point' });\r\n-    setSelectedEvent(null);\r\n-    setOpen(true);\r\n-  };\r\n-\r\n-  // Open modal for existing event\r\n-  const handleEventClick = (clickInfo) => {\r\n-    const { id, extendedProps, startStr } = clickInfo.event;\r\n-    setFormData({\r\n-      name: extendedProps.name || '',\r\n-      phone: extendedProps.phone || '',\r\n-      type: extendedProps.type || 'Point',\r\n-    });\r\n-    setNewEventDate(startStr);\r\n-    setSelectedEvent({ id });\r\n-    setOpen(true);\r\n-  };\r\n-\r\n-  // Validate input\r\n-  const validate = () => {\r\n-    const errs = {};\r\n-    if (!formData.name.trim()) errs.name = 'Name is required';\r\n-    if (!formData.phone.trim()) errs.phone = 'Phone is required';\r\n-    else if (!/^\\d{10}$/.test(formData.phone)) errs.phone = 'Invalid phone (10 digits)';\r\n-    if (!['Point', 'Rappel'].includes(formData.type)) errs.type = 'Invalid type';\r\n-    setErrors(errs);\r\n-    return Object.keys(errs).length === 0;\r\n-  };\r\n-\r\n-  // Save new or updated event\r\n-  const handleSave = async () => {\r\n-    if (!validate()) return;\r\n-\r\n-    const eventPayload = {\r\n-      title: `${formData.type} - ${formData.name}`,\r\n-      date: newEventDate,\r\n-      name: formData.name,\r\n-      phone: formData.phone,\r\n-      type: formData.type,\r\n-    };\r\n-\r\n-    try {\r\n-      if (selectedEvent) {\r\n-        // Edit mode\r\n-        const res = await fetch(`${EVENTS_URL}/${selectedEvent.id}`, {\r\n-          method: 'PUT',\r\n-          headers: authHeaders,\r\n-          body: JSON.stringify(eventPayload),\r\n-        });\r\n-        const updated = await res.json();\r\n-        setEvents(events.map(e => (e._id === updated._id ? updated : e)));\r\n-      } else {\r\n-        // Create mode\r\n-        const res = await fetch(EVENTS_URL, {\r\n-          method: 'POST',\r\n-          headers: authHeaders,\r\n-          body: JSON.stringify(eventPayload),\r\n-        });\r\n-        const saved = await res.json();\r\n-        setEvents([...events, saved]);\r\n-      }\r\n-\r\n-      setOpen(false);\r\n-      setFormData({ name: '', phone: '', type: 'Point' });\r\n-      setSelectedEvent(null);\r\n-      setErrors({});\r\n-    } catch (err) {\r\n-      console.error('Failed to save event:', err);\r\n-    }\r\n-  };\r\n-\r\n-  // Delete event\r\n-  const handleDelete = async () => {\r\n-    if (!selectedEvent) return;\r\n-    try {\r\n-      await fetch(`${EVENTS_URL}/${selectedEvent.id}`, {\r\n-        method: 'DELETE',\r\n-        headers: authHeaders,\r\n-      });\r\n-      setEvents(events.filter(e => e._id !== selectedEvent.id));\r\n-      setOpen(false);\r\n-      setSelectedEvent(null);\r\n-      setFormData({ name: '', phone: '', type: 'Point' });\r\n-    } catch (err) {\r\n-      console.error('Failed to delete event:', err);\r\n-    }\r\n-  };\r\n-\r\n-  return (\r\n-    <>\r\n-      <NavBar email={profile?.email} onLogout={logout} />\r\n-      <Container maxWidth=\"lg\" sx={{ mt: 4 }}>\r\n-        <Box boxShadow={3} p={2} bgcolor=\"white\" borderRadius={2}>\r\n-          <FullCalendar\r\n-            plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin]}\r\n-            initialView=\"dayGridMonth\"\r\n-            editable={true}\r\n-            selectable={true}\r\n-            events={events}\r\n-            dateClick={handleDateClick}\r\n-            eventClick={handleEventClick}\r\n-          />\r\n-        </Box>\r\n-      </Container>\r\n-\r\n-      {/* Modal */}\r\n-      <Dialog open={open} onClose={() => setOpen(false)}>\r\n-        <DialogTitle>{selectedEvent ? 'Edit Event' : 'Add Event'}</DialogTitle>\r\n-        <DialogContent>\r\n-          <TextField\r\n-            label=\"Customer Name\"\r\n-            name=\"name\"\r\n-            value={formData.name}\r\n-            onChange={(e) => setFormData({ ...formData, name: e.target.value })}\r\n-            fullWidth\r\n-            margin=\"dense\"\r\n-            error={!!errors.name}\r\n-            helperText={errors.name}\r\n-          />\r\n-          <TextField\r\n-            label=\"Phone\"\r\n-            name=\"phone\"\r\n-            value={formData.phone}\r\n-            onChange={(e) => setFormData({ ...formData, phone: e.target.value })}\r\n-            fullWidth\r\n-            margin=\"dense\"\r\n-            error={!!errors.phone}\r\n-            helperText={errors.phone}\r\n-          />\r\n-          <TextField\r\n-            label=\"Type\"\r\n-            name=\"type\"\r\n-            select\r\n-            value={formData.type}\r\n-            onChange={(e) => setFormData({ ...formData, type: e.target.value })}\r\n-            fullWidth\r\n-            margin=\"dense\"\r\n-            error={!!errors.type}\r\n-            helperText={errors.type}\r\n-          >\r\n-            <MenuItem value=\"Point\">Point</MenuItem>\r\n-            <MenuItem value=\"Rappel\">Rappel</MenuItem>\r\n-          </TextField>\r\n-        </DialogContent>\r\n-        <DialogActions>\r\n-          {selectedEvent && (\r\n-            <Button color=\"error\" onClick={handleDelete}>\r\n-              Delete\r\n-            </Button>\r\n-          )}\r\n-          <Button onClick={() => setOpen(false)}>Cancel</Button>\r\n-          <Button variant=\"contained\" onClick={handleSave}>\r\n-            {selectedEvent ? 'Update' : 'Add'}\r\n-          </Button>\r\n-        </DialogActions>\r\n-      </Dialog>\r\n-    </>\r\n-  );\r\n-}\r\n-import React, { useEffect, useState } from 'react';\r\n-import { useNavigate } from 'react-router-dom';\r\n-import FullCalendar from '@fullcalendar/react';\r\n-import dayGridPlugin from '@fullcalendar/daygrid';\r\n-import interactionPlugin from '@fullcalendar/interaction';\r\n-import timeGridPlugin from '@fullcalendar/timegrid';\r\n-import {\r\n-  Container,\r\n-  Box,\r\n-  Dialog,\r\n-  DialogTitle,\r\n-  DialogContent,\r\n-  DialogActions,\r\n-  Button,\r\n-  TextField,\r\n-  MenuItem,\r\n-  Typography,\r\n-} from '@mui/material';\r\n-import NavBar from '../components/NavBar';\r\n-\r\n-const PROFILE_URL = 'http://localhost:5000/api/admin/profile';\r\n-const EVENTS_URL = 'http://localhost:5000/api/events';\r\n-\r\n-export default function Dashboard() {\r\n-  const [profile, setProfile] = useState(null);\r\n-  const [events, setEvents] = useState([]);\r\n-  const [open, setOpen] = useState(false);\r\n-  const [newEventDate, setNewEventDate] = useState('');\r\n-  const [selectedEvent, setSelectedEvent] = useState(null); // <- for editing\r\n-  const [formData, setFormData] = useState({\r\n-    name: '',\r\n-    phone: '',\r\n-    type: 'Point',\r\n-  });\r\n-  const [errors, setErrors] = useState({});\r\n-\r\n-  const navigate = useNavigate();\r\n-  const token = localStorage.getItem('token');\r\n-\r\n-  const authHeaders = {\r\n-    Authorization: `Bearer ${token}`,\r\n-    'Content-Type': 'application/json',\r\n-  };\r\n-\r\n-  useEffect(() => {\r\n-    if (!token) return navigate('/');\r\n-\r\n-    // Fetch profile\r\n-    fetch(PROFILE_URL, { headers: authHeaders })\r\n-      .then(res => {\r\n-        if (!res.ok) throw new Error('Unauthorized');\r\n-        return res.json();\r\n-      })\r\n-      .then(setProfile)\r\n-      .catch(() => {\r\n-        localStorage.removeItem('token');\r\n-        navigate('/');\r\n-      });\r\n-\r\n-    // Fetch events\r\n-    fetch(EVENTS_URL, { headers: authHeaders })\r\n-      .then(res => res.json())\r\n-      .then(setEvents)\r\n-      .catch(err => console.error('Error loading events:', err));\r\n-  }, [navigate]);\r\n-\r\n-  const logout = () => {\r\n-    localStorage.removeItem('token');\r\n-    navigate('/');\r\n-  };\r\n-\r\n-  // Open modal for new event\r\n-  const handleDateClick = (arg) => {\r\n-    setNewEventDate(arg.dateStr);\r\n-    setFormData({ name: '', phone: '', type: 'Point' });\r\n-    setSelectedEvent(null);\r\n-    setOpen(true);\r\n-  };\r\n-\r\n-  // Open modal for existing event\r\n-  const handleEventClick = (clickInfo) => {\r\n-    const { id, extendedProps, startStr } = clickInfo.event;\r\n-    setFormData({\r\n-      name: extendedProps.name || '',\r\n-      phone: extendedProps.phone || '',\r\n-      type: extendedProps.type || 'Point',\r\n-    });\r\n-    setNewEventDate(startStr);\r\n-    setSelectedEvent({ id });\r\n-    setOpen(true);\r\n-  };\r\n-\r\n-  // Validate input\r\n-  const validate = () => {\r\n-    const errs = {};\r\n-    if (!formData.name.trim()) errs.name = 'Name is required';\r\n-    if (!formData.phone.trim()) errs.phone = 'Phone is required';\r\n-    else if (!/^\\d{10}$/.test(formData.phone)) errs.phone = 'Invalid phone (10 digits)';\r\n-    if (!['Point', 'Rappel'].includes(formData.type)) errs.type = 'Invalid type';\r\n-    setErrors(errs);\r\n-    return Object.keys(errs).length === 0;\r\n-  };\r\n-\r\n-  // Save new or updated event\r\n-  const handleSave = async () => {\r\n-    if (!validate()) return;\r\n-\r\n-    const eventPayload = {\r\n-      title: `${formData.type} - ${formData.name}`,\r\n-      date: newEventDate,\r\n-      name: formData.name,\r\n-      phone: formData.phone,\r\n-      type: formData.type,\r\n-    };\r\n-\r\n-    try {\r\n-      if (selectedEvent) {\r\n-        // Edit mode\r\n-        const res = await fetch(`${EVENTS_URL}/${selectedEvent.id}`, {\r\n-          method: 'PUT',\r\n-          headers: authHeaders,\r\n-          body: JSON.stringify(eventPayload),\r\n-        });\r\n-        const updated = await res.json();\r\n-        setEvents(events.map(e => (e._id === updated._id ? updated : e)));\r\n-      } else {\r\n-        // Create mode\r\n-        const res = await fetch(EVENTS_URL, {\r\n-          method: 'POST',\r\n-          headers: authHeaders,\r\n-          body: JSON.stringify(eventPayload),\r\n-        });\r\n-        const saved = await res.json();\r\n-        setEvents([...events, saved]);\r\n-      }\r\n-\r\n-      setOpen(false);\r\n-      setFormData({ name: '', phone: '', type: 'Point' });\r\n-      setSelectedEvent(null);\r\n-      setErrors({});\r\n-    } catch (err) {\r\n-      console.error('Failed to save event:', err);\r\n-    }\r\n-  };\r\n-\r\n-  // Delete event\r\n-  const handleDelete = async () => {\r\n-    if (!selectedEvent) return;\r\n-    try {\r\n-      await fetch(`${EVENTS_URL}/${selectedEvent.id}`, {\r\n-        method: 'DELETE',\r\n-        headers: authHeaders,\r\n-      });\r\n-      setEvents(events.filter(e => e._id !== selectedEvent.id));\r\n-      setOpen(false);\r\n-      setSelectedEvent(null);\r\n-      setFormData({ name: '', phone: '', type: 'Point' });\r\n-    } catch (err) {\r\n-      console.error('Failed to delete event:', err);\r\n-    }\r\n-  };\r\n-\r\n-  return (\r\n-    <>\r\n-      <NavBar email={profile?.email} onLogout={logout} />\r\n-      <Container maxWidth=\"lg\" sx={{ mt: 4 }}>\r\n-        <Box boxShadow={3} p={2} bgcolor=\"white\" borderRadius={2}>\r\n-          <FullCalendar\r\n-            plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin]}\r\n-            initialView=\"dayGridMonth\"\r\n-            editable={true}\r\n-            selectable={true}\r\n-            events={events}\r\n-            dateClick={handleDateClick}\r\n-            eventClick={handleEventClick}\r\n-          />\r\n-        </Box>\r\n-      </Container>\r\n-\r\n-      {/* Modal */}\r\n-      <Dialog open={open} onClose={() => setOpen(false)}>\r\n-        <DialogTitle>{selectedEvent ? 'Edit Event' : 'Add Event'}</DialogTitle>\r\n-        <DialogContent>\r\n-          <TextField\r\n-            label=\"Customer Name\"\r\n-            name=\"name\"\r\n-            value={formData.name}\r\n-            onChange={(e) => setFormData({ ...formData, name: e.target.value })}\r\n-            fullWidth\r\n-            margin=\"dense\"\r\n-            error={!!errors.name}\r\n-            helperText={errors.name}\r\n-          />\r\n-          <TextField\r\n-            label=\"Phone\"\r\n-            name=\"phone\"\r\n-            value={formData.phone}\r\n-            onChange={(e) => setFormData({ ...formData, phone: e.target.value })}\r\n-            fullWidth\r\n-            margin=\"dense\"\r\n-            error={!!errors.phone}\r\n-            helperText={errors.phone}\r\n-          />\r\n-          <TextField\r\n-            label=\"Type\"\r\n-            name=\"type\"\r\n-            select\r\n-            value={formData.type}\r\n-            onChange={(e) => setFormData({ ...formData, type: e.target.value })}\r\n-            fullWidth\r\n-            margin=\"dense\"\r\n-            error={!!errors.type}\r\n-            helperText={errors.type}\r\n-          >\r\n-            <MenuItem value=\"Point\">Point</MenuItem>\r\n-            <MenuItem value=\"Rappel\">Rappel</MenuItem>\r\n-          </TextField>\r\n-        </DialogContent>\r\n-        <DialogActions>\r\n-          {selectedEvent && (\r\n-            <Button color=\"error\" onClick={handleDelete}>\r\n-              Delete\r\n-            </Button>\r\n-          )}\r\n-          <Button onClick={() => setOpen(false)}>Cancel</Button>\r\n-          <Button variant=\"contained\" onClick={handleSave}>\r\n-            {selectedEvent ? 'Update' : 'Add'}\r\n-          </Button>\r\n-        </DialogActions>\r\n-      </Dialog>\r\n-    </>\r\n-  );\r\n-}\r\n-import React, { useEffect, useState } from 'react';\r\n-import { useNavigate } from 'react-router-dom';\r\n-import FullCalendar from '@fullcalendar/react';\r\n-import dayGridPlugin from '@fullcalendar/daygrid';\r\n-import interactionPlugin from '@fullcalendar/interaction';\r\n-import timeGridPlugin from '@fullcalendar/timegrid';\r\n-import {\r\n-  Container,\r\n-  Box,\r\n-  Dialog,\r\n-  DialogTitle,\r\n-  DialogContent,\r\n-  DialogActions,\r\n-  Button,\r\n-  TextField,\r\n-  MenuItem,\r\n-} from '@mui/material';\r\n-import NavBar from '../components/NavBar';\r\n-\r\n-const PROFILE_URL = 'http://localhost:5000/api/admin/profile';\r\n-const EVENTS_URL = 'http://localhost:5000/api/events';\r\n-\r\n-export default function Dashboard() {\r\n-  const [profile, setProfile] = useState(null);\r\n-  const [events, setEvents] = useState([]);\r\n-  const [open, setOpen] = useState(false);\r\n-  const [newEventDate, setNewEventDate] = useState('');\r\n-  const [formData, setFormData] = useState({\r\n-    name: '',\r\n-    phone: '',\r\n-    type: 'Point',\r\n-  });\r\n-\r\n-  const navigate = useNavigate();\r\n-  const token = localStorage.getItem('token');\r\n-\r\n-  const authHeaders = {\r\n-    Authorization: `Bearer ${token}`,\r\n-    'Content-Type': 'application/json',\r\n-  };\r\n-\r\n-  useEffect(() => {\r\n-    if (!token) return navigate('/');\r\n-\r\n-    // Fetch profile\r\n-    fetch(PROFILE_URL, { headers: authHeaders })\r\n-      .then(res => {\r\n-        if (!res.ok) throw new Error('Unauthorized');\r\n-        return res.json();\r\n-      })\r\n-      .then(setProfile)\r\n-      .catch(() => {\r\n-        localStorage.removeItem('token');\r\n-        navigate('/');\r\n-      });\r\n-\r\n-    // Fetch events\r\n-    fetch(EVENTS_URL, { headers: authHeaders })\r\n-      .then(res => res.json())\r\n-      .then(setEvents)\r\n-      .catch(err => console.error('Error loading events:', err));\r\n-  }, [navigate]);\r\n-\r\n-  const logout = () => {\r\n-    localStorage.removeItem('token');\r\n-    navigate('/');\r\n-  };\r\n-\r\n-  const handleDateClick = (arg) => {\r\n-    setNewEventDate(arg.dateStr);\r\n-    setOpen(true);\r\n-  };\r\n-\r\n-  const handleInputChange = (e) => {\r\n-    setFormData({ ...formData, [e.target.name]: e.target.value });\r\n-  };\r\n-\r\n-  const handleCreateEvent = async () => {\r\n-    const newEvent = {\r\n-      title: `${formData.type} - ${formData.name}`,\r\n-      date: newEventDate,\r\n-      name: formData.name,\r\n-      phone: formData.phone,\r\n-      type: formData.type,\r\n-    };\r\n-\r\n-    try {\r\n-      const res = await fetch(EVENTS_URL, {\r\n-        method: 'POST',\r\n-        headers: authHeaders,\r\n-        body: JSON.stringify(newEvent),\r\n-      });\r\n-\r\n-      const saved = await res.json();\r\n-      setEvents([...events, saved]);\r\n-      setOpen(false);\r\n-      setFormData({ name: '', phone: '', type: 'Point' });\r\n-    } catch (err) {\r\n-      console.error('Failed to create event:', err);\r\n-    }\r\n-  };\r\n-\r\n-  return (\r\n-    <>\r\n-      <NavBar email={profile?.email} onLogout={logout} />\r\n-      <Container maxWidth=\"lg\" sx={{ mt: 4 }}>\r\n-        <Box boxShadow={3} p={2} bgcolor=\"white\" borderRadius={2}>\r\n-          <FullCalendar\r\n-            plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin]}\r\n-            initialView=\"dayGridMonth\"\r\n-            editable={true}\r\n-            selectable={true}\r\n-            events={events}\r\n-            dateClick={handleDateClick}\r\n-          />\r\n-        </Box>\r\n-      </Container>\r\n-\r\n-      {/* Modal to Add Event */}\r\n-      <Dialog open={open} onClose={() => setOpen(false)}>\r\n-        <DialogTitle>Add Event</DialogTitle>\r\n-        <DialogContent>\r\n-          <TextField\r\n-            label=\"Customer Name\"\r\n-            name=\"name\"\r\n-            value={formData.name}\r\n-            onChange={handleInputChange}\r\n-            fullWidth\r\n-            margin=\"dense\"\r\n-          />\r\n-          <TextField\r\n-            label=\"Phone\"\r\n-            name=\"phone\"\r\n-            value={formData.phone}\r\n-            onChange={handleInputChange}\r\n-            fullWidth\r\n-            margin=\"dense\"\r\n-          />\r\n-          <TextField\r\n-            label=\"Type\"\r\n-            name=\"type\"\r\n-            select\r\n-            value={formData.type}\r\n-            onChange={handleInputChange}\r\n-            fullWidth\r\n-            margin=\"dense\"\r\n-          >\r\n-            <MenuItem value=\"Point\">Point</MenuItem>\r\n-            <MenuItem value=\"Rappel\">Rappel</MenuItem>\r\n-          </TextField>\r\n-        </DialogContent>\r\n-        <DialogActions>\r\n-          <Button onClick={() => setOpen(false)}>Cancel</Button>\r\n-          <Button onClick={handleCreateEvent} variant=\"contained\">Add</Button>\r\n-        </DialogActions>\r\n-      </Dialog>\r\n-    </>\r\n-  );\r\n-}\r\n-import React, { useEffect, useState } from 'react';\r\n-import { useNavigate } from 'react-router-dom';\r\n-import FullCalendar from '@fullcalendar/react';\r\n-import dayGridPlugin from '@fullcalendar/daygrid';\r\n-import interactionPlugin from '@fullcalendar/interaction';\r\n-import timeGridPlugin from '@fullcalendar/timegrid';\r\n-import { Container, Box } from '@mui/material';\r\n-import NavBar from '../components/NavBar';\r\n-\r\n-const PROFILE_URL = 'http://localhost:5000/api/admin/profile';\r\n-const EVENTS_URL = 'http://localhost:5000/api/events';\r\n-\r\n-export default function Dashboard() {\r\n-  const [profile, setProfile] = useState(null);\r\n-  const [events, setEvents] = useState([]);\r\n-  const navigate = useNavigate();\r\n-\r\n-  const token = localStorage.getItem('token');\r\n-\r\n-  const authHeaders = {\r\n-    Authorization: `Bearer ${token}`,\r\n-    'Content-Type': 'application/json',\r\n-  };\r\n-\r\n-  useEffect(() => {\r\n-    if (!token) return navigate('/');\r\n-\r\n-    // Fetch profile\r\n-    fetch(PROFILE_URL, { headers: authHeaders })\r\n-      .then(res => {\r\n-        if (!res.ok) throw new Error('Unauthorized');\r\n-        return res.json();\r\n-      })\r\n-      .then(setProfile)\r\n-      .catch(() => {\r\n-        localStorage.removeItem('token');\r\n-        navigate('/');\r\n-      });\r\n-\r\n-    // Fetch events\r\n-    fetch(EVENTS_URL, { headers: authHeaders })\r\n-      .then(res => res.json())\r\n-      .then(setEvents)\r\n-      .catch(err => console.error('Error loading events:', err));\r\n-  }, [navigate]);\r\n-\r\n-  const logout = () => {\r\n-    localStorage.removeItem('token');\r\n-    navigate('/');\r\n-  };\r\n-\r\n-  // Add new event\r\n-  const handleDateClick = async (arg) => {\r\n-    const title = prompt('Enter event title:');\r\n-    if (!title) return;\r\n-\r\n-    const newEvent = {\r\n-      title,\r\n-      date: arg.dateStr,\r\n-    };\r\n-\r\n-    try {\r\n-      const res = await fetch(EVENTS_URL, {\r\n-        method: 'POST',\r\n-        headers: authHeaders,\r\n-        body: JSON.stringify(newEvent),\r\n-      });\r\n-\r\n-      const saved = await res.json();\r\n-      setEvents([...events, saved]);\r\n-    } catch (err) {\r\n-      console.error('Failed to create event:', err);\r\n-    }\r\n-  };\r\n-\r\n-  // Edit or delete event\r\n-  const handleEventClick = async (clickInfo) => {\r\n-    const action = prompt(\r\n-      `Edit title or type DELETE to remove:\\nCurrent: ${clickInfo.event.title}`\r\n-    );\r\n-\r\n-    if (action === null) return;\r\n-\r\n-    const eventId = clickInfo.event.id;\r\n-\r\n-    if (action.toUpperCase() === 'DELETE') {\r\n-      try {\r\n-        await fetch(`${EVENTS_URL}/${eventId}`, {\r\n-          method: 'DELETE',\r\n-          headers: authHeaders,\r\n-        });\r\n-\r\n-        setEvents(events.filter((e) => e.id !== eventId));\r\n-      } catch (err) {\r\n-        console.error('Failed to delete event:', err);\r\n-      }\r\n-    } else {\r\n-      try {\r\n-        const updated = {\r\n-          ...clickInfo.event.extendedProps,\r\n-          title: action,\r\n-          date: clickInfo.event.startStr,\r\n-        };\r\n-\r\n-        const res = await fetch(`${EVENTS_URL}/${eventId}`, {\r\n-          method: 'PUT',\r\n-          headers: authHeaders,\r\n-          body: JSON.stringify(updated),\r\n-        });\r\n-\r\n-        const updatedEvent = await res.json();\r\n-        setEvents(events.map((e) => (e.id === eventId ? updatedEvent : e)));\r\n-      } catch (err) {\r\n-        console.error('Failed to update event:', err);\r\n-      }\r\n-    }\r\n-  };\r\n-\r\n-  return (\r\n-    <>\r\n-      <NavBar email={profile?.email} onLogout={logout} />\r\n-      <Container maxWidth=\"lg\" sx={{ mt: 4 }}>\r\n-        <Box boxShadow={3} p={2} bgcolor=\"white\" borderRadius={2}>\r\n-          <FullCalendar\r\n-            plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin]}\r\n-            initialView=\"dayGridMonth\"\r\n-            editable={true}\r\n-            selectable={true}\r\n-            events={events}\r\n-            dateClick={handleDateClick}\r\n-            eventClick={handleEventClick}\r\n-          />\r\n-        </Box>\r\n-      </Container>\r\n-    </>\r\n-  );\r\n-}\r\n-import React, { useEffect, useState } from 'react';\r\n-import { useNavigate } from 'react-router-dom';\r\n-import FullCalendar from '@fullcalendar/react';\r\n-import dayGridPlugin from '@fullcalendar/daygrid';\r\n-import interactionPlugin from '@fullcalendar/interaction';\r\n-import timeGridPlugin from '@fullcalendar/timegrid';\r\n-import { Container, Box } from '@mui/material';\r\n-import NavBar from '../components/NavBar';\r\n-\r\n-const API_URL = 'http://localhost:5000/api/admin/profile';\r\n-\r\n-export default function Dashboard() {\r\n-  const [profile, setProfile] = useState(null);\r\n-  const navigate = useNavigate();\r\n-\r\n-  useEffect(() => {\r\n-    const token = localStorage.getItem('token');\r\n-    if (!token) return navigate('/');\r\n-\r\n-    fetch(API_URL, {\r\n-      headers: { Authorization: `Bearer ${token}` },\r\n-    })\r\n-      .then((res) => {\r\n-        if (!res.ok) throw new Error('Unauthorized');\r\n-        return res.json();\r\n-      })\r\n-      .then(setProfile)\r\n-      .catch(() => {\r\n-        localStorage.removeItem('token');\r\n-        navigate('/');\r\n-      });\r\n-  }, [navigate]);\r\n-\r\n-  const logout = () => {\r\n-    localStorage.removeItem('token');\r\n-    navigate('/');\r\n-  };\r\n-\r\n-  return (\r\n-    <>\r\n-      <NavBar email={profile?.email} onLogout={logout} />\r\n-      <Container maxWidth=\"lg\" sx={{ mt: 4 }}>\r\n-        <Box boxShadow={3} p={2} bgcolor=\"white\" borderRadius={2}>\r\n-          <FullCalendar\r\n-            plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin]}\r\n-            initialView=\"dayGridMonth\"\r\n-            editable={true}\r\n-            selectable={true}\r\n-            events={[\r\n-              { title: 'Team Meeting', date: '2025-07-01' },\r\n-              { title: 'Demo Launch', date: '2025-07-05' },\r\n-              { title: 'Bug Review', date: '2025-07-09' }\r\n-            ]}\r\n-          />\r\n-        </Box>\r\n-      </Container>\r\n-    </>\r\n-  );\r\n-}\r\n"
                },
                {
                    "date": 1751837747458,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,340 @@\n+import React, { useState, useEffect } from 'react';\r\n+import {\r\n+  Container,\r\n+  Box,\r\n+  Dialog,\r\n+  DialogTitle,\r\n+  DialogContent,\r\n+  DialogActions,\r\n+  Button,\r\n+  TextField,\r\n+  MenuItem,\r\n+  Table,\r\n+  TableHead,\r\n+  TableBody,\r\n+  TableRow,\r\n+  TableCell,\r\n+  Typography,\r\n+  IconButton,\r\n+} from '@mui/material';\r\n+import FullCalendar from '@fullcalendar/react';\r\n+import dayGridPlugin from '@fullcalendar/daygrid';\r\n+import interactionPlugin from '@fullcalendar/interaction';\r\n+import NavBar from '../components/NavBar';\r\n+\r\n+// Import MUI icons\r\n+import AddIcon from '@mui/icons-material/Add';\r\n+import EditIcon from '@mui/icons-material/Edit';\r\n+import DeleteIcon from '@mui/icons-material/Delete';\r\n+import CancelIcon from '@mui/icons-material/Cancel';\r\n+import SaveIcon from '@mui/icons-material/Save';\r\n+\r\n+const HOURS = Array.from({ length: 17 }, (_, i) => 8 + i); // 08:00 to 00:00\r\n+\r\n+function formatHour(h) {\r\n+  return h === 24 ? '00:00' : `${h.toString().padStart(2, '0')}:00`;\r\n+}\r\n+\r\n+export default function Dashboard() {\r\n+  const [profile, setProfile] = useState(null);\r\n+  const [events, setEvents] = useState([]);\r\n+  const [selectedDay, setSelectedDay] = useState(null);\r\n+  const [openDayModal, setOpenDayModal] = useState(false);\r\n+  const [editingHour, setEditingHour] = useState(null);\r\n+  const [formData, setFormData] = useState({ name: '', phone: '', type: 'Point' });\r\n+  const [errors, setErrors] = useState({});\r\n+\r\n+  const token = localStorage.getItem('token');\r\n+  const authHeaders = {\r\n+    Authorization: `Bearer ${token}`,\r\n+    'Content-Type': 'application/json',\r\n+  };\r\n+\r\n+  useEffect(() => {\r\n+    if (!token) return;\r\n+\r\n+    // Load profile\r\n+    fetch('http://localhost:5000/api/admin/profile', { headers: authHeaders })\r\n+      .then(res => (res.ok ? res.json() : Promise.reject()))\r\n+      .then(setProfile)\r\n+      .catch(() => {\r\n+        localStorage.removeItem('token');\r\n+      });\r\n+\r\n+    // Load events\r\n+    fetch('http://localhost:5000/api/events', { headers: authHeaders })\r\n+      .then(res => res.json())\r\n+      .then(setEvents)\r\n+      .catch(console.error);\r\n+  }, [token]);\r\n+\r\n+  const handleDateClick = (arg) => {\r\n+    setSelectedDay(arg.dateStr);\r\n+    setOpenDayModal(true);\r\n+    setEditingHour(null);\r\n+    setFormData({ name: '', phone: '', type: 'Point' });\r\n+    setErrors({});\r\n+  };\r\n+\r\n+  const findEventAtHour = (hour) => {\r\n+    const hourStr = hour === 24 ? '00:00' : formatHour(hour);\r\n+    const prefix = `${selectedDay}T${hourStr}`;\r\n+    return events.find(e => e.date.startsWith(prefix));\r\n+  };\r\n+\r\n+  const validate = () => {\r\n+    const errs = {};\r\n+    if (!formData.name.trim()) errs.name = 'Name is required';\r\n+    if (!formData.phone.trim()) errs.phone = 'Phone is required';\r\n+    else if (!/^\\d{10}$/.test(formData.phone)) errs.phone = 'Phone must be 10 digits';\r\n+    if (!['Point', 'Rappel'].includes(formData.type)) errs.type = 'Invalid type';\r\n+    setErrors(errs);\r\n+    return Object.keys(errs).length === 0;\r\n+  };\r\n+\r\n+  const handleAddOrUpdate = async () => {\r\n+    if (!validate()) return;\r\n+\r\n+    const hourStr = editingHour === 24 ? '00:00' : formatHour(editingHour);\r\n+    const dateTime = `${selectedDay}T${hourStr}:00`;\r\n+\r\n+    const eventPayload = {\r\n+      title: `${formData.type} - ${formData.name}`,\r\n+      date: dateTime,\r\n+      name: formData.name,\r\n+      phone: formData.phone,\r\n+      type: formData.type,\r\n+    };\r\n+\r\n+    try {\r\n+      const existingEvent = findEventAtHour(editingHour);\r\n+      if (existingEvent) {\r\n+        const res = await fetch(`http://localhost:5000/api/events/${existingEvent._id}`, {\r\n+          method: 'PUT',\r\n+          headers: authHeaders,\r\n+          body: JSON.stringify(eventPayload),\r\n+        });\r\n+        const updated = await res.json();\r\n+        setEvents(events.map(e => (e._id === updated._id ? updated : e)));\r\n+      } else {\r\n+        const res = await fetch('http://localhost:5000/api/events', {\r\n+          method: 'POST',\r\n+          headers: authHeaders,\r\n+          body: JSON.stringify(eventPayload),\r\n+        });\r\n+        const created = await res.json();\r\n+        setEvents([...events, created]);\r\n+      }\r\n+      setEditingHour(null);\r\n+      setFormData({ name: '', phone: '', type: 'Point' });\r\n+      setErrors({});\r\n+    } catch (err) {\r\n+      console.error('Save event failed:', err);\r\n+    }\r\n+  };\r\n+\r\n+  const handleDelete = async (hourToDelete) => {\r\n+    const existingEvent = findEventAtHour(hourToDelete);\r\n+    if (!existingEvent) return;\r\n+\r\n+    try {\r\n+      await fetch(`http://localhost:5000/api/events/${existingEvent._id}`, {\r\n+        method: 'DELETE',\r\n+        headers: authHeaders,\r\n+      });\r\n+      setEvents(events.filter(e => e._id !== existingEvent._id));\r\n+      if (editingHour === hourToDelete) {\r\n+        setEditingHour(null);\r\n+        setFormData({ name: '', phone: '', type: 'Point' });\r\n+        setErrors({});\r\n+      }\r\n+    } catch (err) {\r\n+      console.error('Delete event failed:', err);\r\n+    }\r\n+  };\r\n+\r\n+  const startEditing = (hour) => {\r\n+    const ev = findEventAtHour(hour);\r\n+    if (ev) {\r\n+      setFormData({\r\n+        name: ev.name,\r\n+        phone: ev.phone,\r\n+        type: ev.type,\r\n+      });\r\n+    } else {\r\n+      setFormData({ name: '', phone: '', type: 'Point' });\r\n+    }\r\n+    setEditingHour(hour);\r\n+    setErrors({});\r\n+  };\r\n+\r\n+  return (\r\n+    <>\r\n+      <NavBar\r\n+        email={profile?.email}\r\n+        onLogout={() => {\r\n+          localStorage.removeItem('token');\r\n+          // redirect if needed\r\n+        }}\r\n+      />\r\n+      <Container maxWidth=\"lg\" sx={{ mt: 4 }}>\r\n+        <Box boxShadow={3} p={2} bgcolor=\"white\" borderRadius={2}>\r\n+          <FullCalendar\r\n+            plugins={[dayGridPlugin, interactionPlugin]}\r\n+            initialView=\"dayGridMonth\"\r\n+            selectable={true}\r\n+            events={events}\r\n+            dateClick={handleDateClick}\r\n+          />\r\n+        </Box>\r\n+      </Container>\r\n+\r\n+      <Dialog\r\n+        open={openDayModal}\r\n+        onClose={() => setOpenDayModal(false)}\r\n+        maxWidth=\"lg\"\r\n+        fullWidth\r\n+      >\r\n+        <DialogTitle>Schedule for {selectedDay}</DialogTitle>\r\n+        <DialogContent>\r\n+          <Table>\r\n+            <TableHead>\r\n+              <TableRow>\r\n+                <TableCell>Hour</TableCell>\r\n+                <TableCell>Event Name</TableCell>\r\n+                <TableCell>Customer Name</TableCell>\r\n+                <TableCell>Customer Phone</TableCell>\r\n+                <TableCell>Action</TableCell>\r\n+              </TableRow>\r\n+            </TableHead>\r\n+\r\n+            <TableBody>\r\n+              {HOURS.map((hour) => {\r\n+                const ev = findEventAtHour(hour);\r\n+                const isEditing = editingHour === hour;\r\n+                return (\r\n+                  <TableRow key={hour}>\r\n+                    <TableCell>{formatHour(hour)}</TableCell>\r\n+\r\n+                    <TableCell>\r\n+                      {isEditing ? (\r\n+                        <TextField\r\n+                          size=\"small\"\r\n+                          value={`${formData.type} - ${formData.name}`}\r\n+                          disabled\r\n+                          fullWidth\r\n+                        />\r\n+                      ) : ev ? (\r\n+                        ev.title\r\n+                      ) : (\r\n+                        ''\r\n+                      )}\r\n+                    </TableCell>\r\n+\r\n+                    <TableCell>\r\n+                      {isEditing ? (\r\n+                        <TextField\r\n+                          size=\"small\"\r\n+                          value={formData.name}\r\n+                          onChange={e =>\r\n+                            setFormData({ ...formData, name: e.target.value })\r\n+                          }\r\n+                          error={!!errors.name}\r\n+                          helperText={errors.name}\r\n+                          fullWidth\r\n+                        />\r\n+                      ) : ev ? (\r\n+                        ev.name\r\n+                      ) : (\r\n+                        ''\r\n+                      )}\r\n+                    </TableCell>\r\n+\r\n+                    <TableCell>\r\n+                      {isEditing ? (\r\n+                        <TextField\r\n+                          size=\"small\"\r\n+                          value={formData.phone}\r\n+                          onChange={e =>\r\n+                            setFormData({ ...formData, phone: e.target.value })\r\n+                          }\r\n+                          error={!!errors.phone}\r\n+                          helperText={errors.phone}\r\n+                          fullWidth\r\n+                        />\r\n+                      ) : ev ? (\r\n+                        ev.phone\r\n+                      ) : (\r\n+                        ''\r\n+                      )}\r\n+                    </TableCell>\r\n+\r\n+                    <TableCell>\r\n+                      {isEditing ? (\r\n+                        <>\r\n+                          <IconButton\r\n+                            color=\"primary\"\r\n+                            size=\"small\"\r\n+                            onClick={handleAddOrUpdate}\r\n+                            title=\"Save\"\r\n+                          >\r\n+                            <SaveIcon />\r\n+                          </IconButton>\r\n+\r\n+                          {ev && (\r\n+                            <IconButton\r\n+                              color=\"error\"\r\n+                              size=\"small\"\r\n+                              onClick={() => handleDelete(hour)}\r\n+                              title=\"Delete\"\r\n+                            >\r\n+                              <DeleteIcon />\r\n+                            </IconButton>\r\n+                          )}\r\n+\r\n+                          <IconButton\r\n+                            size=\"small\"\r\n+                            onClick={() => setEditingHour(null)}\r\n+                            title=\"Cancel\"\r\n+                          >\r\n+                            <CancelIcon />\r\n+                          </IconButton>\r\n+                        </>\r\n+                      ) : (\r\n+                        <>\r\n+                          <IconButton\r\n+                            color=\"primary\"\r\n+                            size=\"small\"\r\n+                            onClick={() => startEditing(hour)}\r\n+                            title={ev ? 'Modify' : 'Add'}\r\n+                          >\r\n+                            {ev ? <EditIcon /> : <AddIcon />}\r\n+                          </IconButton>\r\n+\r\n+                          {ev && (\r\n+                            <IconButton\r\n+                              color=\"error\"\r\n+                              size=\"small\"\r\n+                              onClick={() => handleDelete(hour)}\r\n+                              title=\"Delete\"\r\n+                            >\r\n+                              <DeleteIcon />\r\n+                            </IconButton>\r\n+                          )}\r\n+                        </>\r\n+                      )}\r\n+                    </TableCell>\r\n+                  </TableRow>\r\n+                );\r\n+              })}\r\n+            </TableBody>\r\n+          </Table>\r\n+        </DialogContent>\r\n+\r\n+        <DialogActions>\r\n+          <Button onClick={() => setOpenDayModal(false)}>Close</Button>\r\n+        </DialogActions>\r\n+      </Dialog>\r\n+    </>\r\n+  );\r\n+}\r\n"
                },
                {
                    "date": 1751839033181,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,84 +1,47 @@\n import React, { useState, useEffect } from 'react';\r\n-import {\r\n-  Container,\r\n-  Box,\r\n-  Dialog,\r\n-  DialogTitle,\r\n-  DialogContent,\r\n-  DialogActions,\r\n-  Button,\r\n-  TextField,\r\n-  MenuItem,\r\n-  Table,\r\n-  TableHead,\r\n-  TableBody,\r\n-  TableRow,\r\n-  TableCell,\r\n-  Typography,\r\n-  IconButton,\r\n-} from '@mui/material';\r\n import FullCalendar from '@fullcalendar/react';\r\n import dayGridPlugin from '@fullcalendar/daygrid';\r\n import interactionPlugin from '@fullcalendar/interaction';\r\n-import NavBar from '../components/NavBar';\r\n \r\n-// Import MUI icons\r\n-import AddIcon from '@mui/icons-material/Add';\r\n-import EditIcon from '@mui/icons-material/Edit';\r\n-import DeleteIcon from '@mui/icons-material/Delete';\r\n-import CancelIcon from '@mui/icons-material/Cancel';\r\n-import SaveIcon from '@mui/icons-material/Save';\r\n+const formatHour = (h) => {\r\n+  if (h === null || h === undefined || isNaN(Number(h))) return '';\r\n+  const hour = Number(h);\r\n+  return hour === 24 ? '00:00' : `${hour.toString().padStart(2, '0')}:00`;\r\n \r\n-const HOURS = Array.from({ length: 17 }, (_, i) => 8 + i); // 08:00 to 00:00\r\n+};:00`;\r\n+};\r\n \r\n-function formatHour(h) {\r\n-  return h === 24 ? '00:00' : `${h.toString().padStart(2, '0')}:00`;\r\n-}\r\n-\r\n-export default function Dashboard() {\r\n-  const [profile, setProfile] = useState(null);\r\n+const Dashboard = () => {\r\n   const [events, setEvents] = useState([]);\r\n   const [selectedDay, setSelectedDay] = useState(null);\r\n-  const [openDayModal, setOpenDayModal] = useState(false);\r\n-  const [editingHour, setEditingHour] = useState(null);\r\n+  const [currentHour, setCurrentHour] = useState(null);\r\n   const [formData, setFormData] = useState({ name: '', phone: '', type: 'Point' });\r\n   const [errors, setErrors] = useState({});\r\n+  const [showEditForm, setShowEditForm] = useState(false);\r\n \r\n   const token = localStorage.getItem('token');\r\n   const authHeaders = {\r\n     Authorization: `Bearer ${token}`,\r\n     'Content-Type': 'application/json',\r\n   };\r\n \r\n   useEffect(() => {\r\n-    if (!token) return;\r\n-\r\n-    // Load profile\r\n-    fetch('http://localhost:5000/api/admin/profile', { headers: authHeaders })\r\n-      .then(res => (res.ok ? res.json() : Promise.reject()))\r\n-      .then(setProfile)\r\n-      .catch(() => {\r\n-        localStorage.removeItem('token');\r\n-      });\r\n-\r\n-    // Load events\r\n     fetch('http://localhost:5000/api/events', { headers: authHeaders })\r\n       .then(res => res.json())\r\n       .then(setEvents)\r\n       .catch(console.error);\r\n   }, [token]);\r\n \r\n   const handleDateClick = (arg) => {\r\n     setSelectedDay(arg.dateStr);\r\n-    setOpenDayModal(true);\r\n-    setEditingHour(null);\r\n-    setFormData({ name: '', phone: '', type: 'Point' });\r\n-    setErrors({});\r\n+    setCurrentHour(8); // default hour\r\n+    setShowEditForm(true);\r\n   };\r\n \r\n   const findEventAtHour = (hour) => {\r\n-    const hourStr = hour === 24 ? '00:00' : formatHour(hour);\r\n+    if (!selectedDay || hour == null) return null;\r\n+    const hourStr = formatHour(hour);\r\n     const prefix = `${selectedDay}T${hourStr}`;\r\n     return events.find(e => e.date.startsWith(prefix));\r\n   };\r\n \r\n@@ -86,558 +49,125 @@\n     const errs = {};\r\n     if (!formData.name.trim()) errs.name = 'Name is required';\r\n     if (!formData.phone.trim()) errs.phone = 'Phone is required';\r\n     else if (!/^\\d{10}$/.test(formData.phone)) errs.phone = 'Phone must be 10 digits';\r\n-    if (!['Point', 'Rappel'].includes(formData.type)) errs.type = 'Invalid type';\r\n     setErrors(errs);\r\n     return Object.keys(errs).length === 0;\r\n   };\r\n \r\n   const handleAddOrUpdate = async () => {\r\n     if (!validate()) return;\r\n-\r\n-    const hourStr = editingHour === 24 ? '00:00' : formatHour(editingHour);\r\n-    const dateTime = `${selectedDay}T${hourStr}:00`;\r\n-\r\n+    const dateTime = `${selectedDay}T${formatHour(currentHour)}:00`;\r\n     const eventPayload = {\r\n       title: `${formData.type} - ${formData.name}`,\r\n       date: dateTime,\r\n       name: formData.name,\r\n       phone: formData.phone,\r\n       type: formData.type,\r\n     };\r\n-\r\n+    const existingEvent = findEventAtHour(currentHour);\r\n     try {\r\n-      const existingEvent = findEventAtHour(editingHour);\r\n       if (existingEvent) {\r\n         const res = await fetch(`http://localhost:5000/api/events/${existingEvent._id}`, {\r\n-          method: 'PUT',\r\n-          headers: authHeaders,\r\n-          body: JSON.stringify(eventPayload),\r\n+          method: 'PUT', headers: authHeaders, body: JSON.stringify(eventPayload),\r\n         });\r\n         const updated = await res.json();\r\n         setEvents(events.map(e => (e._id === updated._id ? updated : e)));\r\n       } else {\r\n         const res = await fetch('http://localhost:5000/api/events', {\r\n-          method: 'POST',\r\n-          headers: authHeaders,\r\n-          body: JSON.stringify(eventPayload),\r\n+          method: 'POST', headers: authHeaders, body: JSON.stringify(eventPayload),\r\n         });\r\n         const created = await res.json();\r\n         setEvents([...events, created]);\r\n       }\r\n-      setEditingHour(null);\r\n-      setFormData({ name: '', phone: '', type: 'Point' });\r\n-      setErrors({});\r\n+      setShowEditForm(false);\r\n     } catch (err) {\r\n-      console.error('Save event failed:', err);\r\n+      console.error('Error saving event', err);\r\n     }\r\n   };\r\n \r\n-  const handleDelete = async (hourToDelete) => {\r\n-    const existingEvent = findEventAtHour(hourToDelete);\r\n+  const handleDelete = async (hour) => {\r\n+    const existingEvent = findEventAtHour(hour);\r\n     if (!existingEvent) return;\r\n-\r\n     try {\r\n       await fetch(`http://localhost:5000/api/events/${existingEvent._id}`, {\r\n-        method: 'DELETE',\r\n-        headers: authHeaders,\r\n+        method: 'DELETE', headers: authHeaders,\r\n       });\r\n       setEvents(events.filter(e => e._id !== existingEvent._id));\r\n-      if (editingHour === hourToDelete) {\r\n-        setEditingHour(null);\r\n-        setFormData({ name: '', phone: '', type: 'Point' });\r\n-        setErrors({});\r\n-      }\r\n+      setShowEditForm(false);\r\n     } catch (err) {\r\n-      console.error('Delete event failed:', err);\r\n+      console.error('Delete failed', err);\r\n     }\r\n   };\r\n \r\n-  const startEditing = (hour) => {\r\n-    const ev = findEventAtHour(hour);\r\n-    if (ev) {\r\n-      setFormData({\r\n-        name: ev.name,\r\n-        phone: ev.phone,\r\n-        type: ev.type,\r\n-      });\r\n-    } else {\r\n-      setFormData({ name: '', phone: '', type: 'Point' });\r\n-    }\r\n-    setEditingHour(hour);\r\n-    setErrors({});\r\n-  };\r\n-\r\n   return (\r\n     <>\r\n-      <NavBar\r\n-        email={profile?.email}\r\n-        onLogout={() => {\r\n-          localStorage.removeItem('token');\r\n-          // redirect if needed\r\n-        }}\r\n+      <FullCalendar\r\n+        plugins={[dayGridPlugin, interactionPlugin]}\r\n+        initialView=\"dayGridMonth\"\r\n+        selectable={true}\r\n+        events={events}\r\n+        dateClick={handleDateClick}\r\n       />\r\n-      <Container maxWidth=\"lg\" sx={{ mt: 4 }}>\r\n-        <Box boxShadow={3} p={2} bgcolor=\"white\" borderRadius={2}>\r\n-          <FullCalendar\r\n-            plugins={[dayGridPlugin, interactionPlugin]}\r\n-            initialView=\"dayGridMonth\"\r\n-            selectable={true}\r\n-            events={events}\r\n-            dateClick={handleDateClick}\r\n-          />\r\n-        </Box>\r\n-      </Container>\r\n \r\n-      <Dialog\r\n-        open={openDayModal}\r\n-        onClose={() => setOpenDayModal(false)}\r\n-        maxWidth=\"lg\"\r\n-        fullWidth\r\n-      >\r\n-        <DialogTitle>Schedule for {selectedDay}</DialogTitle>\r\n-        <DialogContent>\r\n-          <Table>\r\n-            <TableHead>\r\n-              <TableRow>\r\n-                <TableCell>Hour</TableCell>\r\n-                <TableCell>Event Name</TableCell>\r\n-                <TableCell>Customer Name</TableCell>\r\n-                <TableCell>Customer Phone</TableCell>\r\n-                <TableCell>Action</TableCell>\r\n-              </TableRow>\r\n-            </TableHead>\r\n-\r\n-            <TableBody>\r\n-              {HOURS.map((hour) => {\r\n-                const ev = findEventAtHour(hour);\r\n-                const isEditing = editingHour === hour;\r\n-                return (\r\n-                  <TableRow key={hour}>\r\n-                    <TableCell>{formatHour(hour)}</TableCell>\r\n-\r\n-                    <TableCell>\r\n-                      {isEditing ? (\r\n-                        <TextField\r\n-                          size=\"small\"\r\n-                          value={`${formData.type} - ${formData.name}`}\r\n-                          disabled\r\n-                          fullWidth\r\n-                        />\r\n-                      ) : ev ? (\r\n-                        ev.title\r\n-                      ) : (\r\n-                        ''\r\n-                      )}\r\n-                    </TableCell>\r\n-\r\n-                    <TableCell>\r\n-                      {isEditing ? (\r\n-                        <TextField\r\n-                          size=\"small\"\r\n-                          value={formData.name}\r\n-                          onChange={e =>\r\n-                            setFormData({ ...formData, name: e.target.value })\r\n-                          }\r\n-                          error={!!errors.name}\r\n-                          helperText={errors.name}\r\n-                          fullWidth\r\n-                        />\r\n-                      ) : ev ? (\r\n-                        ev.name\r\n-                      ) : (\r\n-                        ''\r\n-                      )}\r\n-                    </TableCell>\r\n-\r\n-                    <TableCell>\r\n-                      {isEditing ? (\r\n-                        <TextField\r\n-                          size=\"small\"\r\n-                          value={formData.phone}\r\n-                          onChange={e =>\r\n-                            setFormData({ ...formData, phone: e.target.value })\r\n-                          }\r\n-                          error={!!errors.phone}\r\n-                          helperText={errors.phone}\r\n-                          fullWidth\r\n-                        />\r\n-                      ) : ev ? (\r\n-                        ev.phone\r\n-                      ) : (\r\n-                        ''\r\n-                      )}\r\n-                    </TableCell>\r\n-\r\n-                    <TableCell>\r\n-                      {isEditing ? (\r\n-                        <>\r\n-                          <IconButton\r\n-                            color=\"primary\"\r\n-                            size=\"small\"\r\n-                            onClick={handleAddOrUpdate}\r\n-                            title=\"Save\"\r\n-                          >\r\n-                            <SaveIcon />\r\n-                          </IconButton>\r\n-\r\n-                          {ev && (\r\n-                            <IconButton\r\n-                              color=\"error\"\r\n-                              size=\"small\"\r\n-                              onClick={() => handleDelete(hour)}\r\n-                              title=\"Delete\"\r\n-                            >\r\n-                              <DeleteIcon />\r\n-                            </IconButton>\r\n-                          )}\r\n-\r\n-                          <IconButton\r\n-                            size=\"small\"\r\n-                            onClick={() => setEditingHour(null)}\r\n-                            title=\"Cancel\"\r\n-                          >\r\n-                            <CancelIcon />\r\n-                          </IconButton>\r\n-                        </>\r\n-                      ) : (\r\n-                        <>\r\n-                          <IconButton\r\n-                            color=\"primary\"\r\n-                            size=\"small\"\r\n-                            onClick={() => startEditing(hour)}\r\n-                            title={ev ? 'Modify' : 'Add'}\r\n-                          >\r\n-                            {ev ? <EditIcon /> : <AddIcon />}\r\n-                          </IconButton>\r\n-\r\n-                          {ev && (\r\n-                            <IconButton\r\n-                              color=\"error\"\r\n-                              size=\"small\"\r\n-                              onClick={() => handleDelete(hour)}\r\n-                              title=\"Delete\"\r\n-                            >\r\n-                              <DeleteIcon />\r\n-                            </IconButton>\r\n-                          )}\r\n-                        </>\r\n-                      )}\r\n-                    </TableCell>\r\n-                  </TableRow>\r\n-                );\r\n-              })}\r\n-            </TableBody>\r\n-          </Table>\r\n-        </DialogContent>\r\n-\r\n-        <DialogActions>\r\n-          <Button onClick={() => setOpenDayModal(false)}>Close</Button>\r\n-        </DialogActions>\r\n-      </Dialog>\r\n+      {showEditForm && (\r\n+        <div style={{\r\n+          position: 'fixed', top: 0, left: 0, right: 0, bottom: 0,\r\n+          backgroundColor: 'rgba(0,0,0,0.5)', display: 'flex',\r\n+          alignItems: 'center', justifyContent: 'center'\r\n+        }}>\r\n+          <div style={{ backgroundColor: 'white', padding: 20, borderRadius: 8 }}>\r\n+            <h3>{findEventAtHour(currentHour) ? 'Edit' : 'Add'} Event</h3>\r\n+            <label>\r\n+              Hour:\r\n+              <input\r\n+                type=\"number\"\r\n+                value={currentHour}\r\n+                onChange={(e) => setCurrentHour(parseInt(e.target.value))}\r\n+                min=\"0\" max=\"23\"\r\n+              />\r\n+            </label>\r\n+            <br />\r\n+            <label>\r\n+              Name:\r\n+              <input\r\n+                type=\"text\"\r\n+                value={formData.name}\r\n+                onChange={(e) => setFormData({ ...formData, name: e.target.value })}\r\n+              />\r\n+              {errors.name && <div style={{ color: 'red' }}>{errors.name}</div>}\r\n+            </label>\r\n+            <br />\r\n+            <label>\r\n+              Phone:\r\n+              <input\r\n+                type=\"text\"\r\n+                value={formData.phone}\r\n+                onChange={(e) => setFormData({ ...formData, phone: e.target.value })}\r\n+              />\r\n+              {errors.phone && <div style={{ color: 'red' }}>{errors.phone}</div>}\r\n+            </label>\r\n+            <br />\r\n+            <label>\r\n+              Type:\r\n+              <select\r\n+                value={formData.type}\r\n+                onChange={(e) => setFormData({ ...formData, type: e.target.value })}\r\n+              >\r\n+                <option value=\"Point\">Point</option>\r\n+                <option value=\"Rappel\">Rappel</option>\r\n+              </select>\r\n+            </label>\r\n+            <br />\r\n+            <button onClick={handleAddOrUpdate}>Save</button>\r\n+            <button onClick={() => setShowEditForm(false)}>Cancel</button>\r\n+            {findEventAtHour(currentHour) && (\r\n+              <button onClick={() => handleDelete(currentHour)}>Delete</button>\r\n+            )}\r\n+          </div>\r\n+        </div>\r\n+      )}\r\n     </>\r\n   );\r\n-}\r\n-import React, { useState, useEffect } from 'react';\r\n-import {\r\n-  Container,\r\n-  Box,\r\n-  Dialog,\r\n-  DialogTitle,\r\n-  DialogContent,\r\n-  DialogActions,\r\n-  Button,\r\n-  TextField,\r\n-  MenuItem,\r\n-  Table,\r\n-  TableHead,\r\n-  TableBody,\r\n-  TableRow,\r\n-  TableCell,\r\n-  Typography,\r\n-} from '@mui/material';\r\n-import FullCalendar from '@fullcalendar/react';\r\n-import dayGridPlugin from '@fullcalendar/daygrid';\r\n-import interactionPlugin from '@fullcalendar/interaction';\r\n-import NavBar from '../components/NavBar';\r\n+};\r\n \r\n-const HOURS = Array.from({ length: 17 }, (_, i) => 8 + i); // 08:00 to 00:00 (8+16=24)\r\n-\r\n-function formatHour(h) {\r\n-  return h === 24 ? '00:00' : `${h.toString().padStart(2, '0')}:00`;\r\n-}\r\n-\r\n-export default function Dashboard() {\r\n-  const [profile, setProfile] = useState(null);\r\n-  const [events, setEvents] = useState([]);\r\n-  const [selectedDay, setSelectedDay] = useState(null);\r\n-  const [openDayModal, setOpenDayModal] = useState(false);\r\n-  const [editingHour, setEditingHour] = useState(null);\r\n-  const [formData, setFormData] = useState({ name: '', phone: '', type: 'Point' });\r\n-  const [errors, setErrors] = useState({});\r\n-\r\n-  const token = localStorage.getItem('token');\r\n-  const authHeaders = {\r\n-    Authorization: `Bearer ${token}`,\r\n-    'Content-Type': 'application/json',\r\n-  };\r\n-\r\n-  useEffect(() => {\r\n-    if (!token) return;\r\n-\r\n-    fetch('http://localhost:5000/api/admin/profile', { headers: authHeaders })\r\n-      .then(res => res.ok ? res.json() : Promise.reject())\r\n-      .then(setProfile)\r\n-      .catch(() => {\r\n-        localStorage.removeItem('token');\r\n-        // redirect if needed\r\n-      });\r\n-\r\n-    fetch('http://localhost:5000/api/events', { headers: authHeaders })\r\n-      .then(res => res.json())\r\n-      .then(setEvents)\r\n-      .catch(console.error);\r\n-  }, [token]);\r\n-\r\n-  const handleDateClick = (arg) => {\r\n-    setSelectedDay(arg.dateStr);\r\n-    setOpenDayModal(true);\r\n-    setEditingHour(null);\r\n-    setFormData({ name: '', phone: '', type: 'Point' });\r\n-    setErrors({});\r\n-  };\r\n-\r\n-  const findEventAtHour = (hour) => {\r\n-    const hourStr = hour === 24 ? '00:00' : formatHour(hour);\r\n-    const prefix = `${selectedDay}T${hourStr}`;\r\n-    return events.find(e => e.date.startsWith(prefix));\r\n-  };\r\n-\r\n-  const validate = () => {\r\n-    const errs = {};\r\n-    if (!formData.name.trim()) errs.name = 'Name is required';\r\n-    if (!formData.phone.trim()) errs.phone = 'Phone is required';\r\n-    else if (!/^\\d{10}$/.test(formData.phone)) errs.phone = 'Phone must be 10 digits';\r\n-    if (!['Point', 'Rappel'].includes(formData.type)) errs.type = 'Invalid type';\r\n-    setErrors(errs);\r\n-    return Object.keys(errs).length === 0;\r\n-  };\r\n-\r\n-  const handleAddOrUpdate = async () => {\r\n-    if (!validate()) return;\r\n-\r\n-    const hourStr = editingHour === 24 ? '00:00' : formatHour(editingHour);\r\n-    const dateTime = `${selectedDay}T${hourStr}:00`;\r\n-\r\n-    const eventPayload = {\r\n-      title: `${formData.type} - ${formData.name}`,\r\n-      date: dateTime,\r\n-      name: formData.name,\r\n-      phone: formData.phone,\r\n-      type: formData.type,\r\n-    };\r\n-\r\n-    try {\r\n-      const existingEvent = findEventAtHour(editingHour);\r\n-      if (existingEvent) {\r\n-        const res = await fetch(`http://localhost:5000/api/events/${existingEvent._id}`, {\r\n-          method: 'PUT',\r\n-          headers: authHeaders,\r\n-          body: JSON.stringify(eventPayload),\r\n-        });\r\n-        const updated = await res.json();\r\n-        setEvents(events.map(e => (e._id === updated._id ? updated : e)));\r\n-      } else {\r\n-        const res = await fetch('http://localhost:5000/api/events', {\r\n-          method: 'POST',\r\n-          headers: authHeaders,\r\n-          body: JSON.stringify(eventPayload),\r\n-        });\r\n-        const created = await res.json();\r\n-        setEvents([...events, created]);\r\n-      }\r\n-      setEditingHour(null);\r\n-      setFormData({ name: '', phone: '', type: 'Point' });\r\n-      setErrors({});\r\n-    } catch (err) {\r\n-      console.error('Save event failed:', err);\r\n-    }\r\n-  };\r\n-\r\n-  const handleDelete = async () => {\r\n-    const existingEvent = findEventAtHour(editingHour);\r\n-    if (!existingEvent) return;\r\n-\r\n-    try {\r\n-      await fetch(`http://localhost:5000/api/events/${existingEvent._id}`, {\r\n-        method: 'DELETE',\r\n-        headers: authHeaders,\r\n-      });\r\n-      setEvents(events.filter(e => e._id !== existingEvent._id));\r\n-      setEditingHour(null);\r\n-      setFormData({ name: '', phone: '', type: 'Point' });\r\n-      setErrors({});\r\n-    } catch (err) {\r\n-      console.error('Delete event failed:', err);\r\n-    }\r\n-  };\r\n-\r\n-  const startEditing = (hour) => {\r\n-    const ev = findEventAtHour(hour);\r\n-    if (ev) {\r\n-      setFormData({\r\n-        name: ev.name,\r\n-        phone: ev.phone,\r\n-        type: ev.type,\r\n-      });\r\n-    } else {\r\n-      setFormData({ name: '', phone: '', type: 'Point' });\r\n-    }\r\n-    setEditingHour(hour);\r\n-    setErrors({});\r\n-  };\r\n-\r\n-  return (\r\n-    <>\r\n-      <NavBar email={profile?.email} onLogout={() => {\r\n-        localStorage.removeItem('token');\r\n-        // redirect if needed\r\n-      }} />\r\n-      <Container maxWidth=\"lg\" sx={{ mt: 4 }}>\r\n-        <Box boxShadow={3} p={2} bgcolor=\"white\" borderRadius={2}>\r\n-          <FullCalendar\r\n-            plugins={[dayGridPlugin, interactionPlugin]}\r\n-            initialView=\"dayGridMonth\"\r\n-            selectable={true}\r\n-            events={events}\r\n-            dateClick={handleDateClick}\r\n-          />\r\n-        </Box>\r\n-      </Container>\r\n-\r\n-      <Dialog open={openDayModal} onClose={() => setOpenDayModal(false)} maxWidth=\"lg\" fullWidth>\r\n-        <DialogTitle>Schedule for {selectedDay}</DialogTitle>\r\n-        <DialogContent>\r\n-          <Table>\r\n-            <TableHead>\r\n-              <TableRow>\r\n-                <TableCell>Hour</TableCell>\r\n-                <TableCell>Event Name</TableCell>\r\n-                <TableCell>Customer Name</TableCell>\r\n-                <TableCell>Customer Phone</TableCell>\r\n-                <TableCell>Action</TableCell>\r\n-              </TableRow>\r\n-            </TableHead>\r\n-\r\n-            <TableBody>\r\n-              {HOURS.map((hour) => {\r\n-                const ev = findEventAtHour(hour);\r\n-                const isEditing = editingHour === hour;\r\n-                return (\r\n-                  <TableRow key={hour}>\r\n-                    <TableCell>{formatHour(hour)}</TableCell>\r\n-\r\n-                    <TableCell>\r\n-                      {isEditing ? (\r\n-                        <TextField\r\n-                          size=\"small\"\r\n-                          value={formData.type + ' - ' + formData.name}\r\n-                          disabled\r\n-                          fullWidth\r\n-                        />\r\n-                      ) : ev ? (\r\n-                        ev.title\r\n-                      ) : (\r\n-                        ''\r\n-                      )}\r\n-                    </TableCell>\r\n-\r\n-                    <TableCell>\r\n-                      {isEditing ? (\r\n-                        <TextField\r\n-                          size=\"small\"\r\n-                          value={formData.name}\r\n-                          onChange={e => setFormData({ ...formData, name: e.target.value })}\r\n-                          error={!!errors.name}\r\n-                          helperText={errors.name}\r\n-                          fullWidth\r\n-                        />\r\n-                      ) : ev ? (\r\n-                        ev.name\r\n-                      ) : (\r\n-                        ''\r\n-                      )}\r\n-                    </TableCell>\r\n-\r\n-                    <TableCell>\r\n-                      {isEditing ? (\r\n-                        <TextField\r\n-                          size=\"small\"\r\n-                          value={formData.phone}\r\n-                          onChange={e => setFormData({ ...formData, phone: e.target.value })}\r\n-                          error={!!errors.phone}\r\n-                          helperText={errors.phone}\r\n-                          fullWidth\r\n-                        />\r\n-                      ) : ev ? (\r\n-                        ev.phone\r\n-                      ) : (\r\n-                        ''\r\n-                      )}\r\n-                    </TableCell>\r\n-\r\n-                    <TableCell>\r\n-                      {isEditing ? (\r\n-                        <>\r\n-                          <Button\r\n-                            variant=\"contained\"\r\n-                            size=\"small\"\r\n-                            onClick={handleAddOrUpdate}\r\n-                            sx={{ mr: 1 }}\r\n-                          >\r\n-                            Save\r\n-                          </Button>\r\n-\r\n-                          {ev && (\r\n-                            <Button\r\n-                              variant=\"outlined\"\r\n-                              color=\"error\"\r\n-                              size=\"small\"\r\n-                              onClick={handleDelete}\r\n-                              sx={{ mr: 1 }}\r\n-                            >\r\n-                              Delete\r\n-                            </Button>\r\n-                          )}\r\n-\r\n-                          <Button\r\n-                            size=\"small\"\r\n-                            onClick={() => setEditingHour(null)}\r\n-                          >\r\n-                            Cancel\r\n-                          </Button>\r\n-                        </>\r\n-                      ) : (\r\n-                        <Button\r\n-                          variant=\"outlined\"\r\n-                          size=\"small\"\r\n-                          onClick={() => startEditing(hour)}\r\n-                        >\r\n-                          {ev ? 'Modify' : 'Add'}\r\n-                        </Button>\r\n-                      )}\r\n-                    </TableCell>\r\n-                  </TableRow>\r\n-                );\r\n-              })}\r\n-            </TableBody>\r\n-          </Table>\r\n-        </DialogContent>\r\n-\r\n-        <DialogActions>\r\n-          <Button onClick={() => setOpenDayModal(false)}>Close</Button>\r\n-        </DialogActions>\r\n-      </Dialog>\r\n-    </>\r\n-  );\r\n-}\r\n+export default Dashboard; \r\n"
                },
                {
                    "date": 1751839062132,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,173 @@\n+import React, { useState, useEffect } from 'react';\r\n+import FullCalendar from '@fullcalendar/react';\r\n+import dayGridPlugin from '@fullcalendar/daygrid';\r\n+import interactionPlugin from '@fullcalendar/interaction';\r\n+\r\n+const formatHour = (h) => {\r\n+  if (h === null || h === undefined || isNaN(Number(h))) return '';\r\n+  const hour = Number(h);\r\n+  return hour === 24 ? '00:00' : `${hour.toString().padStart(2, '0')}:00`;\r\n+};:00`;\r\n+};:00`;\r\n+};\r\n+\r\n+const Dashboard = () => {\r\n+  const [events, setEvents] = useState([]);\r\n+  const [selectedDay, setSelectedDay] = useState(null);\r\n+  const [currentHour, setCurrentHour] = useState(null);\r\n+  const [formData, setFormData] = useState({ name: '', phone: '', type: 'Point' });\r\n+  const [errors, setErrors] = useState({});\r\n+  const [showEditForm, setShowEditForm] = useState(false);\r\n+\r\n+  const token = localStorage.getItem('token');\r\n+  const authHeaders = {\r\n+    Authorization: `Bearer ${token}`,\r\n+    'Content-Type': 'application/json',\r\n+  };\r\n+\r\n+  useEffect(() => {\r\n+    fetch('http://localhost:5000/api/events', { headers: authHeaders })\r\n+      .then(res => res.json())\r\n+      .then(setEvents)\r\n+      .catch(console.error);\r\n+  }, [token]);\r\n+\r\n+  const handleDateClick = (arg) => {\r\n+    setSelectedDay(arg.dateStr);\r\n+    setCurrentHour(8); // default hour\r\n+    setShowEditForm(true);\r\n+  };\r\n+\r\n+  const findEventAtHour = (hour) => {\r\n+    if (!selectedDay || hour == null) return null;\r\n+    const hourStr = formatHour(hour);\r\n+    const prefix = `${selectedDay}T${hourStr}`;\r\n+    return events.find(e => e.date.startsWith(prefix));\r\n+  };\r\n+\r\n+  const validate = () => {\r\n+    const errs = {};\r\n+    if (!formData.name.trim()) errs.name = 'Name is required';\r\n+    if (!formData.phone.trim()) errs.phone = 'Phone is required';\r\n+    else if (!/^\\d{10}$/.test(formData.phone)) errs.phone = 'Phone must be 10 digits';\r\n+    setErrors(errs);\r\n+    return Object.keys(errs).length === 0;\r\n+  };\r\n+\r\n+  const handleAddOrUpdate = async () => {\r\n+    if (!validate()) return;\r\n+    const dateTime = `${selectedDay}T${formatHour(currentHour)}:00`;\r\n+    const eventPayload = {\r\n+      title: `${formData.type} - ${formData.name}`,\r\n+      date: dateTime,\r\n+      name: formData.name,\r\n+      phone: formData.phone,\r\n+      type: formData.type,\r\n+    };\r\n+    const existingEvent = findEventAtHour(currentHour);\r\n+    try {\r\n+      if (existingEvent) {\r\n+        const res = await fetch(`http://localhost:5000/api/events/${existingEvent._id}`, {\r\n+          method: 'PUT', headers: authHeaders, body: JSON.stringify(eventPayload),\r\n+        });\r\n+        const updated = await res.json();\r\n+        setEvents(events.map(e => (e._id === updated._id ? updated : e)));\r\n+      } else {\r\n+        const res = await fetch('http://localhost:5000/api/events', {\r\n+          method: 'POST', headers: authHeaders, body: JSON.stringify(eventPayload),\r\n+        });\r\n+        const created = await res.json();\r\n+        setEvents([...events, created]);\r\n+      }\r\n+      setShowEditForm(false);\r\n+    } catch (err) {\r\n+      console.error('Error saving event', err);\r\n+    }\r\n+  };\r\n+\r\n+  const handleDelete = async (hour) => {\r\n+    const existingEvent = findEventAtHour(hour);\r\n+    if (!existingEvent) return;\r\n+    try {\r\n+      await fetch(`http://localhost:5000/api/events/${existingEvent._id}`, {\r\n+        method: 'DELETE', headers: authHeaders,\r\n+      });\r\n+      setEvents(events.filter(e => e._id !== existingEvent._id));\r\n+      setShowEditForm(false);\r\n+    } catch (err) {\r\n+      console.error('Delete failed', err);\r\n+    }\r\n+  };\r\n+\r\n+  return (\r\n+    <>\r\n+      <FullCalendar\r\n+        plugins={[dayGridPlugin, interactionPlugin]}\r\n+        initialView=\"dayGridMonth\"\r\n+        selectable={true}\r\n+        events={events}\r\n+        dateClick={handleDateClick}\r\n+      />\r\n+\r\n+      {showEditForm && (\r\n+        <div style={{\r\n+          position: 'fixed', top: 0, left: 0, right: 0, bottom: 0,\r\n+          backgroundColor: 'rgba(0,0,0,0.5)', display: 'flex',\r\n+          alignItems: 'center', justifyContent: 'center'\r\n+        }}>\r\n+          <div style={{ backgroundColor: 'white', padding: 20, borderRadius: 8 }}>\r\n+            <h3>{findEventAtHour(currentHour) ? 'Edit' : 'Add'} Event</h3>\r\n+            <label>\r\n+              Hour:\r\n+              <input\r\n+                type=\"number\"\r\n+                value={currentHour}\r\n+                onChange={(e) => setCurrentHour(parseInt(e.target.value))}\r\n+                min=\"0\" max=\"23\"\r\n+              />\r\n+            </label>\r\n+            <br />\r\n+            <label>\r\n+              Name:\r\n+              <input\r\n+                type=\"text\"\r\n+                value={formData.name}\r\n+                onChange={(e) => setFormData({ ...formData, name: e.target.value })}\r\n+              />\r\n+              {errors.name && <div style={{ color: 'red' }}>{errors.name}</div>}\r\n+            </label>\r\n+            <br />\r\n+            <label>\r\n+              Phone:\r\n+              <input\r\n+                type=\"text\"\r\n+                value={formData.phone}\r\n+                onChange={(e) => setFormData({ ...formData, phone: e.target.value })}\r\n+              />\r\n+              {errors.phone && <div style={{ color: 'red' }}>{errors.phone}</div>}\r\n+            </label>\r\n+            <br />\r\n+            <label>\r\n+              Type:\r\n+              <select\r\n+                value={formData.type}\r\n+                onChange={(e) => setFormData({ ...formData, type: e.target.value })}\r\n+              >\r\n+                <option value=\"Point\">Point</option>\r\n+                <option value=\"Rappel\">Rappel</option>\r\n+              </select>\r\n+            </label>\r\n+            <br />\r\n+            <button onClick={handleAddOrUpdate}>Save</button>\r\n+            <button onClick={() => setShowEditForm(false)}>Cancel</button>\r\n+            {findEventAtHour(currentHour) && (\r\n+              <button onClick={() => handleDelete(currentHour)}>Delete</button>\r\n+            )}\r\n+          </div>\r\n+        </div>\r\n+      )}\r\n+    </>\r\n+  );\r\n+};\r\n+\r\n+export default Dashboard; \r\n"
                },
                {
                    "date": 1751839068362,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,171 @@\n+import React, { useState, useEffect } from 'react';\r\n+import FullCalendar from '@fullcalendar/react';\r\n+import dayGridPlugin from '@fullcalendar/daygrid';\r\n+import interactionPlugin from '@fullcalendar/interaction';\r\n+\r\n+const formatHour = (h) => {\r\n+  if (h === null || h === undefined || isNaN(Number(h))) return '';\r\n+  const hour = Number(h);\r\n+  return hour === 24 ? '00:00' : `${hour.toString().padStart(2, '0')}:00`;\r\n+}\r\n+\r\n+const Dashboard = () => {\r\n+  const [events, setEvents] = useState([]);\r\n+  const [selectedDay, setSelectedDay] = useState(null);\r\n+  const [currentHour, setCurrentHour] = useState(null);\r\n+  const [formData, setFormData] = useState({ name: '', phone: '', type: 'Point' });\r\n+  const [errors, setErrors] = useState({});\r\n+  const [showEditForm, setShowEditForm] = useState(false);\r\n+\r\n+  const token = localStorage.getItem('token');\r\n+  const authHeaders = {\r\n+    Authorization: `Bearer ${token}`,\r\n+    'Content-Type': 'application/json',\r\n+  };\r\n+\r\n+  useEffect(() => {\r\n+    fetch('http://localhost:5000/api/events', { headers: authHeaders })\r\n+      .then(res => res.json())\r\n+      .then(setEvents)\r\n+      .catch(console.error);\r\n+  }, [token]);\r\n+\r\n+  const handleDateClick = (arg) => {\r\n+    setSelectedDay(arg.dateStr);\r\n+    setCurrentHour(8); // default hour\r\n+    setShowEditForm(true);\r\n+  };\r\n+\r\n+  const findEventAtHour = (hour) => {\r\n+    if (!selectedDay || hour == null) return null;\r\n+    const hourStr = formatHour(hour);\r\n+    const prefix = `${selectedDay}T${hourStr}`;\r\n+    return events.find(e => e.date.startsWith(prefix));\r\n+  };\r\n+\r\n+  const validate = () => {\r\n+    const errs = {};\r\n+    if (!formData.name.trim()) errs.name = 'Name is required';\r\n+    if (!formData.phone.trim()) errs.phone = 'Phone is required';\r\n+    else if (!/^\\d{10}$/.test(formData.phone)) errs.phone = 'Phone must be 10 digits';\r\n+    setErrors(errs);\r\n+    return Object.keys(errs).length === 0;\r\n+  };\r\n+\r\n+  const handleAddOrUpdate = async () => {\r\n+    if (!validate()) return;\r\n+    const dateTime = `${selectedDay}T${formatHour(currentHour)}:00`;\r\n+    const eventPayload = {\r\n+      title: `${formData.type} - ${formData.name}`,\r\n+      date: dateTime,\r\n+      name: formData.name,\r\n+      phone: formData.phone,\r\n+      type: formData.type,\r\n+    };\r\n+    const existingEvent = findEventAtHour(currentHour);\r\n+    try {\r\n+      if (existingEvent) {\r\n+        const res = await fetch(`http://localhost:5000/api/events/${existingEvent._id}`, {\r\n+          method: 'PUT', headers: authHeaders, body: JSON.stringify(eventPayload),\r\n+        });\r\n+        const updated = await res.json();\r\n+        setEvents(events.map(e => (e._id === updated._id ? updated : e)));\r\n+      } else {\r\n+        const res = await fetch('http://localhost:5000/api/events', {\r\n+          method: 'POST', headers: authHeaders, body: JSON.stringify(eventPayload),\r\n+        });\r\n+        const created = await res.json();\r\n+        setEvents([...events, created]);\r\n+      }\r\n+      setShowEditForm(false);\r\n+    } catch (err) {\r\n+      console.error('Error saving event', err);\r\n+    }\r\n+  };\r\n+\r\n+  const handleDelete = async (hour) => {\r\n+    const existingEvent = findEventAtHour(hour);\r\n+    if (!existingEvent) return;\r\n+    try {\r\n+      await fetch(`http://localhost:5000/api/events/${existingEvent._id}`, {\r\n+        method: 'DELETE', headers: authHeaders,\r\n+      });\r\n+      setEvents(events.filter(e => e._id !== existingEvent._id));\r\n+      setShowEditForm(false);\r\n+    } catch (err) {\r\n+      console.error('Delete failed', err);\r\n+    }\r\n+  };\r\n+\r\n+  return (\r\n+    <>\r\n+      <FullCalendar\r\n+        plugins={[dayGridPlugin, interactionPlugin]}\r\n+        initialView=\"dayGridMonth\"\r\n+        selectable={true}\r\n+        events={events}\r\n+        dateClick={handleDateClick}\r\n+      />\r\n+\r\n+      {showEditForm && (\r\n+        <div style={{\r\n+          position: 'fixed', top: 0, left: 0, right: 0, bottom: 0,\r\n+          backgroundColor: 'rgba(0,0,0,0.5)', display: 'flex',\r\n+          alignItems: 'center', justifyContent: 'center'\r\n+        }}>\r\n+          <div style={{ backgroundColor: 'white', padding: 20, borderRadius: 8 }}>\r\n+            <h3>{findEventAtHour(currentHour) ? 'Edit' : 'Add'} Event</h3>\r\n+            <label>\r\n+              Hour:\r\n+              <input\r\n+                type=\"number\"\r\n+                value={currentHour}\r\n+                onChange={(e) => setCurrentHour(parseInt(e.target.value))}\r\n+                min=\"0\" max=\"23\"\r\n+              />\r\n+            </label>\r\n+            <br />\r\n+            <label>\r\n+              Name:\r\n+              <input\r\n+                type=\"text\"\r\n+                value={formData.name}\r\n+                onChange={(e) => setFormData({ ...formData, name: e.target.value })}\r\n+              />\r\n+              {errors.name && <div style={{ color: 'red' }}>{errors.name}</div>}\r\n+            </label>\r\n+            <br />\r\n+            <label>\r\n+              Phone:\r\n+              <input\r\n+                type=\"text\"\r\n+                value={formData.phone}\r\n+                onChange={(e) => setFormData({ ...formData, phone: e.target.value })}\r\n+              />\r\n+              {errors.phone && <div style={{ color: 'red' }}>{errors.phone}</div>}\r\n+            </label>\r\n+            <br />\r\n+            <label>\r\n+              Type:\r\n+              <select\r\n+                value={formData.type}\r\n+                onChange={(e) => setFormData({ ...formData, type: e.target.value })}\r\n+              >\r\n+                <option value=\"Point\">Point</option>\r\n+                <option value=\"Rappel\">Rappel</option>\r\n+              </select>\r\n+            </label>\r\n+            <br />\r\n+            <button onClick={handleAddOrUpdate}>Save</button>\r\n+            <button onClick={() => setShowEditForm(false)}>Cancel</button>\r\n+            {findEventAtHour(currentHour) && (\r\n+              <button onClick={() => handleDelete(currentHour)}>Delete</button>\r\n+            )}\r\n+          </div>\r\n+        </div>\r\n+      )}\r\n+    </>\r\n+  );\r\n+};\r\n+\r\n+export default Dashboard; \r\n"
                },
                {
                    "date": 1751839136047,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,45 +1,84 @@\n import React, { useState, useEffect } from 'react';\r\n+import {\r\n+  Container,\r\n+  Box,\r\n+  Dialog,\r\n+  DialogTitle,\r\n+  DialogContent,\r\n+  DialogActions,\r\n+  Button,\r\n+  TextField,\r\n+  MenuItem,\r\n+  Table,\r\n+  TableHead,\r\n+  TableBody,\r\n+  TableRow,\r\n+  TableCell,\r\n+  Typography,\r\n+  IconButton,\r\n+} from '@mui/material';\r\n import FullCalendar from '@fullcalendar/react';\r\n import dayGridPlugin from '@fullcalendar/daygrid';\r\n import interactionPlugin from '@fullcalendar/interaction';\r\n+import NavBar from '../components/NavBar';\r\n \r\n-const formatHour = (h) => {\r\n-  if (h === null || h === undefined || isNaN(Number(h))) return '';\r\n-  const hour = Number(h);\r\n-  return hour === 24 ? '00:00' : `${hour.toString().padStart(2, '0')}:00`;\r\n+// Import MUI icons\r\n+import AddIcon from '@mui/icons-material/Add';\r\n+import EditIcon from '@mui/icons-material/Edit';\r\n+import DeleteIcon from '@mui/icons-material/Delete';\r\n+import CancelIcon from '@mui/icons-material/Cancel';\r\n+import SaveIcon from '@mui/icons-material/Save';\r\n+\r\n+const HOURS = Array.from({ length: 17 }, (_, i) => 8 + i); // 08:00 to 00:00\r\n+\r\n+function formatHour(h) {\r\n+  return h === 24 ? '00:00' : `${h.toString().padStart(2, '0')}:00`;\r\n }\r\n \r\n-const Dashboard = () => {\r\n+export default function Dashboard() {\r\n+  const [profile, setProfile] = useState(null);\r\n   const [events, setEvents] = useState([]);\r\n   const [selectedDay, setSelectedDay] = useState(null);\r\n-  const [currentHour, setCurrentHour] = useState(null);\r\n+  const [openDayModal, setOpenDayModal] = useState(false);\r\n+  const [editingHour, setEditingHour] = useState(null);\r\n   const [formData, setFormData] = useState({ name: '', phone: '', type: 'Point' });\r\n   const [errors, setErrors] = useState({});\r\n-  const [showEditForm, setShowEditForm] = useState(false);\r\n \r\n   const token = localStorage.getItem('token');\r\n   const authHeaders = {\r\n     Authorization: `Bearer ${token}`,\r\n     'Content-Type': 'application/json',\r\n   };\r\n \r\n   useEffect(() => {\r\n+    if (!token) return;\r\n+\r\n+    // Load profile\r\n+    fetch('http://localhost:5000/api/admin/profile', { headers: authHeaders })\r\n+      .then(res => (res.ok ? res.json() : Promise.reject()))\r\n+      .then(setProfile)\r\n+      .catch(() => {\r\n+        localStorage.removeItem('token');\r\n+      });\r\n+\r\n+    // Load events\r\n     fetch('http://localhost:5000/api/events', { headers: authHeaders })\r\n       .then(res => res.json())\r\n       .then(setEvents)\r\n       .catch(console.error);\r\n   }, [token]);\r\n \r\n   const handleDateClick = (arg) => {\r\n     setSelectedDay(arg.dateStr);\r\n-    setCurrentHour(8); // default hour\r\n-    setShowEditForm(true);\r\n+    setOpenDayModal(true);\r\n+    setEditingHour(null);\r\n+    setFormData({ name: '', phone: '', type: 'Point' });\r\n+    setErrors({});\r\n   };\r\n \r\n   const findEventAtHour = (hour) => {\r\n-    if (!selectedDay || hour == null) return null;\r\n-    const hourStr = formatHour(hour);\r\n+    const hourStr = hour === 24 ? '00:00' : formatHour(hour);\r\n     const prefix = `${selectedDay}T${hourStr}`;\r\n     return events.find(e => e.date.startsWith(prefix));\r\n   };\r\n \r\n@@ -47,471 +86,255 @@\n     const errs = {};\r\n     if (!formData.name.trim()) errs.name = 'Name is required';\r\n     if (!formData.phone.trim()) errs.phone = 'Phone is required';\r\n     else if (!/^\\d{10}$/.test(formData.phone)) errs.phone = 'Phone must be 10 digits';\r\n+    if (!['Point', 'Rappel'].includes(formData.type)) errs.type = 'Invalid type';\r\n     setErrors(errs);\r\n     return Object.keys(errs).length === 0;\r\n   };\r\n \r\n   const handleAddOrUpdate = async () => {\r\n     if (!validate()) return;\r\n-    const dateTime = `${selectedDay}T${formatHour(currentHour)}:00`;\r\n+\r\n+    const hourStr = editingHour === 24 ? '00:00' : formatHour(editingHour);\r\n+    const dateTime = `${selectedDay}T${hourStr}:00`;\r\n+\r\n     const eventPayload = {\r\n       title: `${formData.type} - ${formData.name}`,\r\n       date: dateTime,\r\n       name: formData.name,\r\n       phone: formData.phone,\r\n       type: formData.type,\r\n     };\r\n-    const existingEvent = findEventAtHour(currentHour);\r\n+\r\n     try {\r\n+      const existingEvent = findEventAtHour(editingHour);\r\n       if (existingEvent) {\r\n         const res = await fetch(`http://localhost:5000/api/events/${existingEvent._id}`, {\r\n-          method: 'PUT', headers: authHeaders, body: JSON.stringify(eventPayload),\r\n+          method: 'PUT',\r\n+          headers: authHeaders,\r\n+          body: JSON.stringify(eventPayload),\r\n         });\r\n         const updated = await res.json();\r\n         setEvents(events.map(e => (e._id === updated._id ? updated : e)));\r\n       } else {\r\n         const res = await fetch('http://localhost:5000/api/events', {\r\n-          method: 'POST', headers: authHeaders, body: JSON.stringify(eventPayload),\r\n+          method: 'POST',\r\n+          headers: authHeaders,\r\n+          body: JSON.stringify(eventPayload),\r\n         });\r\n         const created = await res.json();\r\n         setEvents([...events, created]);\r\n       }\r\n-      setShowEditForm(false);\r\n+      setEditingHour(null);\r\n+      setFormData({ name: '', phone: '', type: 'Point' });\r\n+      setErrors({});\r\n     } catch (err) {\r\n-      console.error('Error saving event', err);\r\n+      console.error('Save event failed:', err);\r\n     }\r\n   };\r\n \r\n-  const handleDelete = async (hour) => {\r\n-    const existingEvent = findEventAtHour(hour);\r\n+  const handleDelete = async (hourToDelete) => {\r\n+    const existingEvent = findEventAtHour(hourToDelete);\r\n     if (!existingEvent) return;\r\n+\r\n     try {\r\n       await fetch(`http://localhost:5000/api/events/${existingEvent._id}`, {\r\n-        method: 'DELETE', headers: authHeaders,\r\n+        method: 'DELETE',\r\n+        headers: authHeaders,\r\n       });\r\n       setEvents(events.filter(e => e._id !== existingEvent._id));\r\n-      setShowEditForm(false);\r\n-    } catch (err) {\r\n-      console.error('Delete failed', err);\r\n-    }\r\n-  };\r\n-\r\n-  return (\r\n-    <>\r\n-      <FullCalendar\r\n-        plugins={[dayGridPlugin, interactionPlugin]}\r\n-        initialView=\"dayGridMonth\"\r\n-        selectable={true}\r\n-        events={events}\r\n-        dateClick={handleDateClick}\r\n-      />\r\n-\r\n-      {showEditForm && (\r\n-        <div style={{\r\n-          position: 'fixed', top: 0, left: 0, right: 0, bottom: 0,\r\n-          backgroundColor: 'rgba(0,0,0,0.5)', display: 'flex',\r\n-          alignItems: 'center', justifyContent: 'center'\r\n-        }}>\r\n-          <div style={{ backgroundColor: 'white', padding: 20, borderRadius: 8 }}>\r\n-            <h3>{findEventAtHour(currentHour) ? 'Edit' : 'Add'} Event</h3>\r\n-            <label>\r\n-              Hour:\r\n-              <input\r\n-                type=\"number\"\r\n-                value={currentHour}\r\n-                onChange={(e) => setCurrentHour(parseInt(e.target.value))}\r\n-                min=\"0\" max=\"23\"\r\n-              />\r\n-            </label>\r\n-            <br />\r\n-            <label>\r\n-              Name:\r\n-              <input\r\n-                type=\"text\"\r\n-                value={formData.name}\r\n-                onChange={(e) => setFormData({ ...formData, name: e.target.value })}\r\n-              />\r\n-              {errors.name && <div style={{ color: 'red' }}>{errors.name}</div>}\r\n-            </label>\r\n-            <br />\r\n-            <label>\r\n-              Phone:\r\n-              <input\r\n-                type=\"text\"\r\n-                value={formData.phone}\r\n-                onChange={(e) => setFormData({ ...formData, phone: e.target.value })}\r\n-              />\r\n-              {errors.phone && <div style={{ color: 'red' }}>{errors.phone}</div>}\r\n-            </label>\r\n-            <br />\r\n-            <label>\r\n-              Type:\r\n-              <select\r\n-                value={formData.type}\r\n-                onChange={(e) => setFormData({ ...formData, type: e.target.value })}\r\n-              >\r\n-                <option value=\"Point\">Point</option>\r\n-                <option value=\"Rappel\">Rappel</option>\r\n-              </select>\r\n-            </label>\r\n-            <br />\r\n-            <button onClick={handleAddOrUpdate}>Save</button>\r\n-            <button onClick={() => setShowEditForm(false)}>Cancel</button>\r\n-            {findEventAtHour(currentHour) && (\r\n-              <button onClick={() => handleDelete(currentHour)}>Delete</button>\r\n-            )}\r\n-          </div>\r\n-        </div>\r\n-      )}\r\n-    </>\r\n-  );\r\n-};\r\n-\r\n-export default Dashboard; \r\n-import React, { useState, useEffect } from 'react';\r\n-import FullCalendar from '@fullcalendar/react';\r\n-import dayGridPlugin from '@fullcalendar/daygrid';\r\n-import interactionPlugin from '@fullcalendar/interaction';\r\n-\r\n-const formatHour = (h) => {\r\n-  if (h === null || h === undefined || isNaN(Number(h))) return '';\r\n-  const hour = Number(h);\r\n-  return hour === 24 ? '00:00' : `${hour.toString().padStart(2, '0')}:00`;\r\n-};:00`;\r\n-};:00`;\r\n-};\r\n-\r\n-const Dashboard = () => {\r\n-  const [events, setEvents] = useState([]);\r\n-  const [selectedDay, setSelectedDay] = useState(null);\r\n-  const [currentHour, setCurrentHour] = useState(null);\r\n-  const [formData, setFormData] = useState({ name: '', phone: '', type: 'Point' });\r\n-  const [errors, setErrors] = useState({});\r\n-  const [showEditForm, setShowEditForm] = useState(false);\r\n-\r\n-  const token = localStorage.getItem('token');\r\n-  const authHeaders = {\r\n-    Authorization: `Bearer ${token}`,\r\n-    'Content-Type': 'application/json',\r\n-  };\r\n-\r\n-  useEffect(() => {\r\n-    fetch('http://localhost:5000/api/events', { headers: authHeaders })\r\n-      .then(res => res.json())\r\n-      .then(setEvents)\r\n-      .catch(console.error);\r\n-  }, [token]);\r\n-\r\n-  const handleDateClick = (arg) => {\r\n-    setSelectedDay(arg.dateStr);\r\n-    setCurrentHour(8); // default hour\r\n-    setShowEditForm(true);\r\n-  };\r\n-\r\n-  const findEventAtHour = (hour) => {\r\n-    if (!selectedDay || hour == null) return null;\r\n-    const hourStr = formatHour(hour);\r\n-    const prefix = `${selectedDay}T${hourStr}`;\r\n-    return events.find(e => e.date.startsWith(prefix));\r\n-  };\r\n-\r\n-  const validate = () => {\r\n-    const errs = {};\r\n-    if (!formData.name.trim()) errs.name = 'Name is required';\r\n-    if (!formData.phone.trim()) errs.phone = 'Phone is required';\r\n-    else if (!/^\\d{10}$/.test(formData.phone)) errs.phone = 'Phone must be 10 digits';\r\n-    setErrors(errs);\r\n-    return Object.keys(errs).length === 0;\r\n-  };\r\n-\r\n-  const handleAddOrUpdate = async () => {\r\n-    if (!validate()) return;\r\n-    const dateTime = `${selectedDay}T${formatHour(currentHour)}:00`;\r\n-    const eventPayload = {\r\n-      title: `${formData.type} - ${formData.name}`,\r\n-      date: dateTime,\r\n-      name: formData.name,\r\n-      phone: formData.phone,\r\n-      type: formData.type,\r\n-    };\r\n-    const existingEvent = findEventAtHour(currentHour);\r\n-    try {\r\n-      if (existingEvent) {\r\n-        const res = await fetch(`http://localhost:5000/api/events/${existingEvent._id}`, {\r\n-          method: 'PUT', headers: authHeaders, body: JSON.stringify(eventPayload),\r\n-        });\r\n-        const updated = await res.json();\r\n-        setEvents(events.map(e => (e._id === updated._id ? updated : e)));\r\n-      } else {\r\n-        const res = await fetch('http://localhost:5000/api/events', {\r\n-          method: 'POST', headers: authHeaders, body: JSON.stringify(eventPayload),\r\n-        });\r\n-        const created = await res.json();\r\n-        setEvents([...events, created]);\r\n+      if (editingHour === hourToDelete) {\r\n+        setEditingHour(null);\r\n+        setFormData({ name: '', phone: '', type: 'Point' });\r\n+        setErrors({});\r\n       }\r\n-      setShowEditForm(false);\r\n     } catch (err) {\r\n-      console.error('Error saving event', err);\r\n+      console.error('Delete event failed:', err);\r\n     }\r\n   };\r\n \r\n-  const handleDelete = async (hour) => {\r\n-    const existingEvent = findEventAtHour(hour);\r\n-    if (!existingEvent) return;\r\n-    try {\r\n-      await fetch(`http://localhost:5000/api/events/${existingEvent._id}`, {\r\n-        method: 'DELETE', headers: authHeaders,\r\n+  const startEditing = (hour) => {\r\n+    const ev = findEventAtHour(hour);\r\n+    if (ev) {\r\n+      setFormData({\r\n+        name: ev.name,\r\n+        phone: ev.phone,\r\n+        type: ev.type,\r\n       });\r\n-      setEvents(events.filter(e => e._id !== existingEvent._id));\r\n-      setShowEditForm(false);\r\n-    } catch (err) {\r\n-      console.error('Delete failed', err);\r\n+    } else {\r\n+      setFormData({ name: '', phone: '', type: 'Point' });\r\n     }\r\n+    setEditingHour(hour);\r\n+    setErrors({});\r\n   };\r\n \r\n   return (\r\n     <>\r\n-      <FullCalendar\r\n-        plugins={[dayGridPlugin, interactionPlugin]}\r\n-        initialView=\"dayGridMonth\"\r\n-        selectable={true}\r\n-        events={events}\r\n-        dateClick={handleDateClick}\r\n+      <NavBar\r\n+        email={profile?.email}\r\n+        onLogout={() => {\r\n+          localStorage.removeItem('token');\r\n+          // redirect if needed\r\n+        }}\r\n       />\r\n+      <Container maxWidth=\"lg\" sx={{ mt: 4 }}>\r\n+        <Box boxShadow={3} p={2} bgcolor=\"white\" borderRadius={2}>\r\n+          <FullCalendar\r\n+            plugins={[dayGridPlugin, interactionPlugin]}\r\n+            initialView=\"dayGridMonth\"\r\n+            selectable={true}\r\n+            events={events}\r\n+            dateClick={handleDateClick}\r\n+          />\r\n+        </Box>\r\n+      </Container>\r\n \r\n-      {showEditForm && (\r\n-        <div style={{\r\n-          position: 'fixed', top: 0, left: 0, right: 0, bottom: 0,\r\n-          backgroundColor: 'rgba(0,0,0,0.5)', display: 'flex',\r\n-          alignItems: 'center', justifyContent: 'center'\r\n-        }}>\r\n-          <div style={{ backgroundColor: 'white', padding: 20, borderRadius: 8 }}>\r\n-            <h3>{findEventAtHour(currentHour) ? 'Edit' : 'Add'} Event</h3>\r\n-            <label>\r\n-              Hour:\r\n-              <input\r\n-                type=\"number\"\r\n-                value={currentHour}\r\n-                onChange={(e) => setCurrentHour(parseInt(e.target.value))}\r\n-                min=\"0\" max=\"23\"\r\n-              />\r\n-            </label>\r\n-            <br />\r\n-            <label>\r\n-              Name:\r\n-              <input\r\n-                type=\"text\"\r\n-                value={formData.name}\r\n-                onChange={(e) => setFormData({ ...formData, name: e.target.value })}\r\n-              />\r\n-              {errors.name && <div style={{ color: 'red' }}>{errors.name}</div>}\r\n-            </label>\r\n-            <br />\r\n-            <label>\r\n-              Phone:\r\n-              <input\r\n-                type=\"text\"\r\n-                value={formData.phone}\r\n-                onChange={(e) => setFormData({ ...formData, phone: e.target.value })}\r\n-              />\r\n-              {errors.phone && <div style={{ color: 'red' }}>{errors.phone}</div>}\r\n-            </label>\r\n-            <br />\r\n-            <label>\r\n-              Type:\r\n-              <select\r\n-                value={formData.type}\r\n-                onChange={(e) => setFormData({ ...formData, type: e.target.value })}\r\n-              >\r\n-                <option value=\"Point\">Point</option>\r\n-                <option value=\"Rappel\">Rappel</option>\r\n-              </select>\r\n-            </label>\r\n-            <br />\r\n-            <button onClick={handleAddOrUpdate}>Save</button>\r\n-            <button onClick={() => setShowEditForm(false)}>Cancel</button>\r\n-            {findEventAtHour(currentHour) && (\r\n-              <button onClick={() => handleDelete(currentHour)}>Delete</button>\r\n-            )}\r\n-          </div>\r\n-        </div>\r\n-      )}\r\n-    </>\r\n-  );\r\n-};\r\n+      <Dialog\r\n+        open={openDayModal}\r\n+        onClose={() => setOpenDayModal(false)}\r\n+        maxWidth=\"lg\"\r\n+        fullWidth\r\n+      >\r\n+        <DialogTitle>Schedule for {selectedDay}</DialogTitle>\r\n+        <DialogContent>\r\n+          <Table>\r\n+            <TableHead>\r\n+              <TableRow>\r\n+                <TableCell>Hour</TableCell>\r\n+                <TableCell>Event Name</TableCell>\r\n+                <TableCell>Customer Name</TableCell>\r\n+                <TableCell>Customer Phone</TableCell>\r\n+                <TableCell>Action</TableCell>\r\n+              </TableRow>\r\n+            </TableHead>\r\n \r\n-export default Dashboard; \r\n-import React, { useState, useEffect } from 'react';\r\n-import FullCalendar from '@fullcalendar/react';\r\n-import dayGridPlugin from '@fullcalendar/daygrid';\r\n-import interactionPlugin from '@fullcalendar/interaction';\r\n+            <TableBody>\r\n+              {HOURS.map((hour) => {\r\n+                const ev = findEventAtHour(hour);\r\n+                const isEditing = editingHour === hour;\r\n+                return (\r\n+                  <TableRow key={hour}>\r\n+                    <TableCell>{formatHour(hour)}</TableCell>\r\n \r\n-const formatHour = (h) => {\r\n-  if (h === null || h === undefined || isNaN(Number(h))) return '';\r\n-  const hour = Number(h);\r\n-  return hour === 24 ? '00:00' : `${hour.toString().padStart(2, '0')}:00`;\r\n+                    <TableCell>\r\n+                      {isEditing ? (\r\n+                        <TextField\r\n+                          size=\"small\"\r\n+                          value={`${formData.type} - ${formData.name}`}\r\n+                          disabled\r\n+                          fullWidth\r\n+                        />\r\n+                      ) : ev ? (\r\n+                        ev.title\r\n+                      ) : (\r\n+                        ''\r\n+                      )}\r\n+                    </TableCell>\r\n \r\n-};:00`;\r\n-};\r\n+                    <TableCell>\r\n+                      {isEditing ? (\r\n+                        <TextField\r\n+                          size=\"small\"\r\n+                          value={formData.name}\r\n+                          onChange={e =>\r\n+                            setFormData({ ...formData, name: e.target.value })\r\n+                          }\r\n+                          error={!!errors.name}\r\n+                          helperText={errors.name}\r\n+                          fullWidth\r\n+                        />\r\n+                      ) : ev ? (\r\n+                        ev.name\r\n+                      ) : (\r\n+                        ''\r\n+                      )}\r\n+                    </TableCell>\r\n \r\n-const Dashboard = () => {\r\n-  const [events, setEvents] = useState([]);\r\n-  const [selectedDay, setSelectedDay] = useState(null);\r\n-  const [currentHour, setCurrentHour] = useState(null);\r\n-  const [formData, setFormData] = useState({ name: '', phone: '', type: 'Point' });\r\n-  const [errors, setErrors] = useState({});\r\n-  const [showEditForm, setShowEditForm] = useState(false);\r\n+                    <TableCell>\r\n+                      {isEditing ? (\r\n+                        <TextField\r\n+                          size=\"small\"\r\n+                          value={formData.phone}\r\n+                          onChange={e =>\r\n+                            setFormData({ ...formData, phone: e.target.value })\r\n+                          }\r\n+                          error={!!errors.phone}\r\n+                          helperText={errors.phone}\r\n+                          fullWidth\r\n+                        />\r\n+                      ) : ev ? (\r\n+                        ev.phone\r\n+                      ) : (\r\n+                        ''\r\n+                      )}\r\n+                    </TableCell>\r\n \r\n-  const token = localStorage.getItem('token');\r\n-  const authHeaders = {\r\n-    Authorization: `Bearer ${token}`,\r\n-    'Content-Type': 'application/json',\r\n-  };\r\n+                    <TableCell>\r\n+                      {isEditing ? (\r\n+                        <>\r\n+                          <IconButton\r\n+                            color=\"primary\"\r\n+                            size=\"small\"\r\n+                            onClick={handleAddOrUpdate}\r\n+                            title=\"Save\"\r\n+                          >\r\n+                            <SaveIcon />\r\n+                          </IconButton>\r\n \r\n-  useEffect(() => {\r\n-    fetch('http://localhost:5000/api/events', { headers: authHeaders })\r\n-      .then(res => res.json())\r\n-      .then(setEvents)\r\n-      .catch(console.error);\r\n-  }, [token]);\r\n+                          {ev && (\r\n+                            <IconButton\r\n+                              color=\"error\"\r\n+                              size=\"small\"\r\n+                              onClick={() => handleDelete(hour)}\r\n+                              title=\"Delete\"\r\n+                            >\r\n+                              <DeleteIcon />\r\n+                            </IconButton>\r\n+                          )}\r\n \r\n-  const handleDateClick = (arg) => {\r\n-    setSelectedDay(arg.dateStr);\r\n-    setCurrentHour(8); // default hour\r\n-    setShowEditForm(true);\r\n-  };\r\n+                          <IconButton\r\n+                            size=\"small\"\r\n+                            onClick={() => setEditingHour(null)}\r\n+                            title=\"Cancel\"\r\n+                          >\r\n+                            <CancelIcon />\r\n+                          </IconButton>\r\n+                        </>\r\n+                      ) : (\r\n+                        <>\r\n+                          <IconButton\r\n+                            color=\"primary\"\r\n+                            size=\"small\"\r\n+                            onClick={() => startEditing(hour)}\r\n+                            title={ev ? 'Modify' : 'Add'}\r\n+                          >\r\n+                            {ev ? <EditIcon /> : <AddIcon />}\r\n+                          </IconButton>\r\n \r\n-  const findEventAtHour = (hour) => {\r\n-    if (!selectedDay || hour == null) return null;\r\n-    const hourStr = formatHour(hour);\r\n-    const prefix = `${selectedDay}T${hourStr}`;\r\n-    return events.find(e => e.date.startsWith(prefix));\r\n-  };\r\n+                          {ev && (\r\n+                            <IconButton\r\n+                              color=\"error\"\r\n+                              size=\"small\"\r\n+                              onClick={() => handleDelete(hour)}\r\n+                              title=\"Delete\"\r\n+                            >\r\n+                              <DeleteIcon />\r\n+                            </IconButton>\r\n+                          )}\r\n+                        </>\r\n+                      )}\r\n+                    </TableCell>\r\n+                  </TableRow>\r\n+                );\r\n+              })}\r\n+            </TableBody>\r\n+          </Table>\r\n+        </DialogContent>\r\n \r\n-  const validate = () => {\r\n-    const errs = {};\r\n-    if (!formData.name.trim()) errs.name = 'Name is required';\r\n-    if (!formData.phone.trim()) errs.phone = 'Phone is required';\r\n-    else if (!/^\\d{10}$/.test(formData.phone)) errs.phone = 'Phone must be 10 digits';\r\n-    setErrors(errs);\r\n-    return Object.keys(errs).length === 0;\r\n-  };\r\n-\r\n-  const handleAddOrUpdate = async () => {\r\n-    if (!validate()) return;\r\n-    const dateTime = `${selectedDay}T${formatHour(currentHour)}:00`;\r\n-    const eventPayload = {\r\n-      title: `${formData.type} - ${formData.name}`,\r\n-      date: dateTime,\r\n-      name: formData.name,\r\n-      phone: formData.phone,\r\n-      type: formData.type,\r\n-    };\r\n-    const existingEvent = findEventAtHour(currentHour);\r\n-    try {\r\n-      if (existingEvent) {\r\n-        const res = await fetch(`http://localhost:5000/api/events/${existingEvent._id}`, {\r\n-          method: 'PUT', headers: authHeaders, body: JSON.stringify(eventPayload),\r\n-        });\r\n-        const updated = await res.json();\r\n-        setEvents(events.map(e => (e._id === updated._id ? updated : e)));\r\n-      } else {\r\n-        const res = await fetch('http://localhost:5000/api/events', {\r\n-          method: 'POST', headers: authHeaders, body: JSON.stringify(eventPayload),\r\n-        });\r\n-        const created = await res.json();\r\n-        setEvents([...events, created]);\r\n-      }\r\n-      setShowEditForm(false);\r\n-    } catch (err) {\r\n-      console.error('Error saving event', err);\r\n-    }\r\n-  };\r\n-\r\n-  const handleDelete = async (hour) => {\r\n-    const existingEvent = findEventAtHour(hour);\r\n-    if (!existingEvent) return;\r\n-    try {\r\n-      await fetch(`http://localhost:5000/api/events/${existingEvent._id}`, {\r\n-        method: 'DELETE', headers: authHeaders,\r\n-      });\r\n-      setEvents(events.filter(e => e._id !== existingEvent._id));\r\n-      setShowEditForm(false);\r\n-    } catch (err) {\r\n-      console.error('Delete failed', err);\r\n-    }\r\n-  };\r\n-\r\n-  return (\r\n-    <>\r\n-      <FullCalendar\r\n-        plugins={[dayGridPlugin, interactionPlugin]}\r\n-        initialView=\"dayGridMonth\"\r\n-        selectable={true}\r\n-        events={events}\r\n-        dateClick={handleDateClick}\r\n-      />\r\n-\r\n-      {showEditForm && (\r\n-        <div style={{\r\n-          position: 'fixed', top: 0, left: 0, right: 0, bottom: 0,\r\n-          backgroundColor: 'rgba(0,0,0,0.5)', display: 'flex',\r\n-          alignItems: 'center', justifyContent: 'center'\r\n-        }}>\r\n-          <div style={{ backgroundColor: 'white', padding: 20, borderRadius: 8 }}>\r\n-            <h3>{findEventAtHour(currentHour) ? 'Edit' : 'Add'} Event</h3>\r\n-            <label>\r\n-              Hour:\r\n-              <input\r\n-                type=\"number\"\r\n-                value={currentHour}\r\n-                onChange={(e) => setCurrentHour(parseInt(e.target.value))}\r\n-                min=\"0\" max=\"23\"\r\n-              />\r\n-            </label>\r\n-            <br />\r\n-            <label>\r\n-              Name:\r\n-              <input\r\n-                type=\"text\"\r\n-                value={formData.name}\r\n-                onChange={(e) => setFormData({ ...formData, name: e.target.value })}\r\n-              />\r\n-              {errors.name && <div style={{ color: 'red' }}>{errors.name}</div>}\r\n-            </label>\r\n-            <br />\r\n-            <label>\r\n-              Phone:\r\n-              <input\r\n-                type=\"text\"\r\n-                value={formData.phone}\r\n-                onChange={(e) => setFormData({ ...formData, phone: e.target.value })}\r\n-              />\r\n-              {errors.phone && <div style={{ color: 'red' }}>{errors.phone}</div>}\r\n-            </label>\r\n-            <br />\r\n-            <label>\r\n-              Type:\r\n-              <select\r\n-                value={formData.type}\r\n-                onChange={(e) => setFormData({ ...formData, type: e.target.value })}\r\n-              >\r\n-                <option value=\"Point\">Point</option>\r\n-                <option value=\"Rappel\">Rappel</option>\r\n-              </select>\r\n-            </label>\r\n-            <br />\r\n-            <button onClick={handleAddOrUpdate}>Save</button>\r\n-            <button onClick={() => setShowEditForm(false)}>Cancel</button>\r\n-            {findEventAtHour(currentHour) && (\r\n-              <button onClick={() => handleDelete(currentHour)}>Delete</button>\r\n-            )}\r\n-          </div>\r\n-        </div>\r\n-      )}\r\n+        <DialogActions>\r\n+          <Button onClick={() => setOpenDayModal(false)}>Close</Button>\r\n+        </DialogActions>\r\n+      </Dialog>\r\n     </>\r\n   );\r\n-};\r\n-\r\n-export default Dashboard; \r\n+}\r\n"
                },
                {
                    "date": 1751839253028,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,10 +25,8 @@\n // Import MUI icons\r\n import AddIcon from '@mui/icons-material/Add';\r\n import EditIcon from '@mui/icons-material/Edit';\r\n import DeleteIcon from '@mui/icons-material/Delete';\r\n-import CancelIcon from '@mui/icons-material/Cancel';\r\n-import SaveIcon from '@mui/icons-material/Save';\r\n \r\n const HOURS = Array.from({ length: 17 }, (_, i) => 8 + i); // 08:00 to 00:00\r\n \r\n function formatHour(h) {\r\n@@ -39,8 +37,12 @@\n   const [profile, setProfile] = useState(null);\r\n   const [events, setEvents] = useState([]);\r\n   const [selectedDay, setSelectedDay] = useState(null);\r\n   const [openDayModal, setOpenDayModal] = useState(false);\r\n+\r\n+  // New state for the add/edit event popup\r\n+  const [openEventForm, setOpenEventForm] = useState(false);\r\n+\r\n   const [editingHour, setEditingHour] = useState(null);\r\n   const [formData, setFormData] = useState({ name: '', phone: '', type: 'Point' });\r\n   const [errors, setErrors] = useState({});\r\n \r\n@@ -76,8 +78,9 @@\n     setErrors({});\r\n   };\r\n \r\n   const findEventAtHour = (hour) => {\r\n+    if (!selectedDay) return null;\r\n     const hourStr = hour === 24 ? '00:00' : formatHour(hour);\r\n     const prefix = `${selectedDay}T${hourStr}`;\r\n     return events.find(e => e.date.startsWith(prefix));\r\n   };\r\n@@ -124,8 +127,9 @@\n         });\r\n         const created = await res.json();\r\n         setEvents([...events, created]);\r\n       }\r\n+      setOpenEventForm(false);\r\n       setEditingHour(null);\r\n       setFormData({ name: '', phone: '', type: 'Point' });\r\n       setErrors({});\r\n     } catch (err) {\r\n@@ -143,8 +147,9 @@\n         headers: authHeaders,\r\n       });\r\n       setEvents(events.filter(e => e._id !== existingEvent._id));\r\n       if (editingHour === hourToDelete) {\r\n+        setOpenEventForm(false);\r\n         setEditingHour(null);\r\n         setFormData({ name: '', phone: '', type: 'Point' });\r\n         setErrors({});\r\n       }\r\n@@ -152,8 +157,9 @@\n       console.error('Delete event failed:', err);\r\n     }\r\n   };\r\n \r\n+  // Open the add/edit event popup when clicking add/edit icon\r\n   const startEditing = (hour) => {\r\n     const ev = findEventAtHour(hour);\r\n     if (ev) {\r\n       setFormData({\r\n@@ -165,8 +171,9 @@\n       setFormData({ name: '', phone: '', type: 'Point' });\r\n     }\r\n     setEditingHour(hour);\r\n     setErrors({});\r\n+    setOpenEventForm(true);\r\n   };\r\n \r\n   return (\r\n     <>\r\n@@ -210,121 +217,35 @@\n \r\n             <TableBody>\r\n               {HOURS.map((hour) => {\r\n                 const ev = findEventAtHour(hour);\r\n-                const isEditing = editingHour === hour;\r\n                 return (\r\n                   <TableRow key={hour}>\r\n                     <TableCell>{formatHour(hour)}</TableCell>\r\n-\r\n+                    <TableCell>{ev?.title || ''}</TableCell>\r\n+                    <TableCell>{ev?.name || ''}</TableCell>\r\n+                    <TableCell>{ev?.phone || ''}</TableCell>\r\n                     <TableCell>\r\n-                      {isEditing ? (\r\n-                        <TextField\r\n-                          size=\"small\"\r\n-                          value={`${formData.type} - ${formData.name}`}\r\n-                          disabled\r\n-                          fullWidth\r\n-                        />\r\n-                      ) : ev ? (\r\n-                        ev.title\r\n-                      ) : (\r\n-                        ''\r\n-                      )}\r\n-                    </TableCell>\r\n+                      <IconButton\r\n+                        color=\"primary\"\r\n+                        size=\"small\"\r\n+                        onClick={() => startEditing(hour)}\r\n+                        title={ev ? 'Modify' : 'Add'}\r\n+                      >\r\n+                        {ev ? <EditIcon /> : <AddIcon />}\r\n+                      </IconButton>\r\n \r\n-                    <TableCell>\r\n-                      {isEditing ? (\r\n-                        <TextField\r\n+                      {ev && (\r\n+                        <IconButton\r\n+                          color=\"error\"\r\n                           size=\"small\"\r\n-                          value={formData.name}\r\n-                          onChange={e =>\r\n-                            setFormData({ ...formData, name: e.target.value })\r\n-                          }\r\n-                          error={!!errors.name}\r\n-                          helperText={errors.name}\r\n-                          fullWidth\r\n-                        />\r\n-                      ) : ev ? (\r\n-                        ev.name\r\n-                      ) : (\r\n-                        ''\r\n+                          onClick={() => handleDelete(hour)}\r\n+                          title=\"Delete\"\r\n+                        >\r\n+                          <DeleteIcon />\r\n+                        </IconButton>\r\n                       )}\r\n                     </TableCell>\r\n-\r\n-                    <TableCell>\r\n-                      {isEditing ? (\r\n-                        <TextField\r\n-                          size=\"small\"\r\n-                          value={formData.phone}\r\n-                          onChange={e =>\r\n-                            setFormData({ ...formData, phone: e.target.value })\r\n-                          }\r\n-                          error={!!errors.phone}\r\n-                          helperText={errors.phone}\r\n-                          fullWidth\r\n-                        />\r\n-                      ) : ev ? (\r\n-                        ev.phone\r\n-                      ) : (\r\n-                        ''\r\n-                      )}\r\n-                    </TableCell>\r\n-\r\n-                    <TableCell>\r\n-                      {isEditing ? (\r\n-                        <>\r\n-                          <IconButton\r\n-                            color=\"primary\"\r\n-                            size=\"small\"\r\n-                            onClick={handleAddOrUpdate}\r\n-                            title=\"Save\"\r\n-                          >\r\n-                            <SaveIcon />\r\n-                          </IconButton>\r\n-\r\n-                          {ev && (\r\n-                            <IconButton\r\n-                              color=\"error\"\r\n-                              size=\"small\"\r\n-                              onClick={() => handleDelete(hour)}\r\n-                              title=\"Delete\"\r\n-                            >\r\n-                              <DeleteIcon />\r\n-                            </IconButton>\r\n-                          )}\r\n-\r\n-                          <IconButton\r\n-                            size=\"small\"\r\n-                            onClick={() => setEditingHour(null)}\r\n-                            title=\"Cancel\"\r\n-                          >\r\n-                            <CancelIcon />\r\n-                          </IconButton>\r\n-                        </>\r\n-                      ) : (\r\n-                        <>\r\n-                          <IconButton\r\n-                            color=\"primary\"\r\n-                            size=\"small\"\r\n-                            onClick={() => startEditing(hour)}\r\n-                            title={ev ? 'Modify' : 'Add'}\r\n-                          >\r\n-                            {ev ? <EditIcon /> : <AddIcon />}\r\n-                          </IconButton>\r\n-\r\n-                          {ev && (\r\n-                            <IconButton\r\n-                              color=\"error\"\r\n-                              size=\"small\"\r\n-                              onClick={() => handleDelete(hour)}\r\n-                              title=\"Delete\"\r\n-                            >\r\n-                              <DeleteIcon />\r\n-                            </IconButton>\r\n-                          )}\r\n-                        </>\r\n-                      )}\r\n-                    </TableCell>\r\n                   </TableRow>\r\n                 );\r\n               })}\r\n             </TableBody>\r\n@@ -334,7 +255,69 @@\n         <DialogActions>\r\n           <Button onClick={() => setOpenDayModal(false)}>Close</Button>\r\n         </DialogActions>\r\n       </Dialog>\r\n+\r\n+      {/* Separate dialog popup for Add/Edit event */}\r\n+      <Dialog\r\n+        open={openEventForm}\r\n+        onClose={() => setOpenEventForm(false)}\r\n+        maxWidth=\"sm\"\r\n+        fullWidth\r\n+      >\r\n+        <DialogTitle>\r\n+          {editingHour !== null && findEventAtHour(editingHour)\r\n+            ? 'Modify Event'\r\n+            : 'Add Event'}\r\n+        </DialogTitle>\r\n+        <DialogContent>\r\n+          <Typography variant=\"subtitle1\" gutterBottom>\r\n+            For hour: {editingHour !== null ? formatHour(editingHour) : ''}\r\n+          </Typography>\r\n+\r\n+          <TextField\r\n+            margin=\"dense\"\r\n+            label=\"Customer Name\"\r\n+            fullWidth\r\n+            value={formData.name}\r\n+            onChange={(e) => setFormData({ ...formData, name: e.target.value })}\r\n+            error={!!errors.name}\r\n+            helperText={errors.name}\r\n+          />\r\n+          <TextField\r\n+            margin=\"dense\"\r\n+            label=\"Customer Phone\"\r\n+            fullWidth\r\n+            value={formData.phone}\r\n+            onChange={(e) => setFormData({ ...formData, phone: e.target.value })}\r\n+            error={!!errors.phone}\r\n+            helperText={errors.phone}\r\n+          />\r\n+          <TextField\r\n+            margin=\"dense\"\r\n+            select\r\n+            label=\"Type\"\r\n+            fullWidth\r\n+            value={formData.type}\r\n+            onChange={(e) => setFormData({ ...formData, type: e.target.value })}\r\n+          >\r\n+            <MenuItem value=\"Point\">Point</MenuItem>\r\n+            <MenuItem value=\"Rappel\">Rappel</MenuItem>\r\n+          </TextField>\r\n+        </DialogContent>\r\n+\r\n+        <DialogActions>\r\n+          <Button onClick={() => setOpenEventForm(false)}>Cancel</Button>\r\n+          <Button\r\n+            onClick={() => {\r\n+              handleAddOrUpdate();\r\n+            }}\r\n+            variant=\"contained\"\r\n+            color=\"primary\"\r\n+          >\r\n+            Save\r\n+          </Button>\r\n+        </DialogActions>\r\n+      </Dialog>\r\n     </>\r\n   );\r\n }\r\n"
                },
                {
                    "date": 1751839969309,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,9 +69,22 @@\n       .then(setEvents)\r\n       .catch(console.error);\r\n   }, [token]);\r\n \r\n+  // Helper to check if selectedDay is in the future\r\n+  const isDateInFuture = (dateStr) => {\r\n+    if (!dateStr) return false;\r\n+    const selected = new Date(dateStr);\r\n+    const today = new Date();\r\n+    today.setHours(0, 0, 0, 0);\r\n+    return selected > today;\r\n+  };\r\n+\r\n   const handleDateClick = (arg) => {\r\n+    if (isDateInFuture(arg.dateStr)) {\r\n+      alert(\"You can't add or modify events for future dates.\");\r\n+      return;\r\n+    }\r\n     setSelectedDay(arg.dateStr);\r\n     setOpenDayModal(true);\r\n     setEditingHour(null);\r\n     setFormData({ name: '', phone: '', type: 'Point' });\r\n@@ -95,8 +108,12 @@\n     return Object.keys(errs).length === 0;\r\n   };\r\n \r\n   const handleAddOrUpdate = async () => {\r\n+    if (isDateInFuture(selectedDay)) {\r\n+      alert(\"You can't add or modify events for future dates.\");\r\n+      return;\r\n+    }\r\n     if (!validate()) return;\r\n \r\n     const hourStr = editingHour === 24 ? '00:00' : formatHour(editingHour);\r\n     const dateTime = `${selectedDay}T${hourStr}:00`;\r\n@@ -157,9 +174,8 @@\n       console.error('Delete event failed:', err);\r\n     }\r\n   };\r\n \r\n-  // Open the add/edit event popup when clicking add/edit icon\r\n   const startEditing = (hour) => {\r\n     const ev = findEventAtHour(hour);\r\n     if (ev) {\r\n       setFormData({\r\n"
                },
                {
                    "date": 1751840122567,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,337 @@\n+import React, { useState, useEffect } from 'react';\r\n+import {\r\n+  Container,\r\n+  Box,\r\n+  Dialog,\r\n+  DialogTitle,\r\n+  DialogContent,\r\n+  DialogActions,\r\n+  Button,\r\n+  TextField,\r\n+  MenuItem,\r\n+  Table,\r\n+  TableHead,\r\n+  TableBody,\r\n+  TableRow,\r\n+  TableCell,\r\n+  Typography,\r\n+  IconButton,\r\n+} from '@mui/material';\r\n+import FullCalendar from '@fullcalendar/react';\r\n+import dayGridPlugin from '@fullcalendar/daygrid';\r\n+import interactionPlugin from '@fullcalendar/interaction';\r\n+import NavBar from '../components/NavBar';\r\n+\r\n+// Import MUI icons\r\n+import AddIcon from '@mui/icons-material/Add';\r\n+import EditIcon from '@mui/icons-material/Edit';\r\n+import DeleteIcon from '@mui/icons-material/Delete';\r\n+\r\n+const HOURS = Array.from({ length: 17 }, (_, i) => 8 + i); // 08:00 to 00:00\r\n+\r\n+function formatHour(h) {\r\n+  return h === 24 ? '00:00' : `${h.toString().padStart(2, '0')}:00`;\r\n+}\r\n+\r\n+export default function Dashboard() {\r\n+  const [profile, setProfile] = useState(null);\r\n+  const [events, setEvents] = useState([]);\r\n+  const [selectedDay, setSelectedDay] = useState(null);\r\n+  const [openDayModal, setOpenDayModal] = useState(false);\r\n+\r\n+  // New state for the add/edit event popup\r\n+  const [openEventForm, setOpenEventForm] = useState(false);\r\n+\r\n+  const [editingHour, setEditingHour] = useState(null);\r\n+  const [formData, setFormData] = useState({ name: '', phone: '', type: 'Point' });\r\n+  const [errors, setErrors] = useState({});\r\n+\r\n+  const token = localStorage.getItem('token');\r\n+  const authHeaders = {\r\n+    Authorization: `Bearer ${token}`,\r\n+    'Content-Type': 'application/json',\r\n+  };\r\n+\r\n+  useEffect(() => {\r\n+    if (!token) return;\r\n+\r\n+    // Load profile\r\n+    fetch('http://localhost:5000/api/admin/profile', { headers: authHeaders })\r\n+      .then(res => (res.ok ? res.json() : Promise.reject()))\r\n+      .then(setProfile)\r\n+      .catch(() => {\r\n+        localStorage.removeItem('token');\r\n+      });\r\n+\r\n+    // Load events\r\n+    fetch('http://localhost:5000/api/events', { headers: authHeaders })\r\n+      .then(res => res.json())\r\n+      .then(setEvents)\r\n+      .catch(console.error);\r\n+  }, [token]);\r\n+\r\n+  // Helper to check if selectedDay is before today\r\n+  const isDateBeforeToday = (dateStr) => {\r\n+    if (!dateStr) return false;\r\n+    const selected = new Date(dateStr);\r\n+    const today = new Date();\r\n+    today.setHours(0, 0, 0, 0);\r\n+    return selected < today;\r\n+  };\r\n+\r\n+  const handleDateClick = (arg) => {\r\n+    if (isDateBeforeToday(arg.dateStr)) {\r\n+      alert(\"You can't add or modify events for past dates.\");\r\n+      return;\r\n+    }\r\n+    setSelectedDay(arg.dateStr);\r\n+    setOpenDayModal(true);\r\n+    setEditingHour(null);\r\n+    setFormData({ name: '', phone: '', type: 'Point' });\r\n+    setErrors({});\r\n+  };\r\n+\r\n+  const findEventAtHour = (hour) => {\r\n+    if (!selectedDay) return null;\r\n+    const hourStr = hour === 24 ? '00:00' : formatHour(hour);\r\n+    const prefix = `${selectedDay}T${hourStr}`;\r\n+    return events.find(e => e.date.startsWith(prefix));\r\n+  };\r\n+\r\n+  const validate = () => {\r\n+    const errs = {};\r\n+    if (!formData.name.trim()) errs.name = 'Name is required';\r\n+    if (!formData.phone.trim()) errs.phone = 'Phone is required';\r\n+    else if (!/^\\d{10}$/.test(formData.phone)) errs.phone = 'Phone must be 10 digits';\r\n+    if (!['Point', 'Rappel'].includes(formData.type)) errs.type = 'Invalid type';\r\n+    setErrors(errs);\r\n+    return Object.keys(errs).length === 0;\r\n+  };\r\n+\r\n+  const handleAddOrUpdate = async () => {\r\n+    if (isDateBeforeToday(selectedDay)) {\r\n+      alert(\"You can't add or modify events for past dates.\");\r\n+      return;\r\n+    }\r\n+    if (!validate()) return;\r\n+\r\n+    const hourStr = editingHour === 24 ? '00:00' : formatHour(editingHour);\r\n+    const dateTime = `${selectedDay}T${hourStr}:00`;\r\n+\r\n+    const eventPayload = {\r\n+      title: `${formData.type} - ${formData.name}`,\r\n+      date: dateTime,\r\n+      name: formData.name,\r\n+      phone: formData.phone,\r\n+      type: formData.type,\r\n+    };\r\n+\r\n+    try {\r\n+      const existingEvent = findEventAtHour(editingHour);\r\n+      if (existingEvent) {\r\n+        const res = await fetch(`http://localhost:5000/api/events/${existingEvent._id}`, {\r\n+          method: 'PUT',\r\n+          headers: authHeaders,\r\n+          body: JSON.stringify(eventPayload),\r\n+        });\r\n+        const updated = await res.json();\r\n+        setEvents(events.map(e => (e._id === updated._id ? updated : e)));\r\n+      } else {\r\n+        const res = await fetch('http://localhost:5000/api/events', {\r\n+          method: 'POST',\r\n+          headers: authHeaders,\r\n+          body: JSON.stringify(eventPayload),\r\n+        });\r\n+        const created = await res.json();\r\n+        setEvents([...events, created]);\r\n+      }\r\n+      setOpenEventForm(false);\r\n+      setEditingHour(null);\r\n+      setFormData({ name: '', phone: '', type: 'Point' });\r\n+      setErrors({});\r\n+    } catch (err) {\r\n+      console.error('Save event failed:', err);\r\n+    }\r\n+  };\r\n+\r\n+  const handleDelete = async (hourToDelete) => {\r\n+    const existingEvent = findEventAtHour(hourToDelete);\r\n+    if (!existingEvent) return;\r\n+\r\n+    try {\r\n+      await fetch(`http://localhost:5000/api/events/${existingEvent._id}`, {\r\n+        method: 'DELETE',\r\n+        headers: authHeaders,\r\n+      });\r\n+      setEvents(events.filter(e => e._id !== existingEvent._id));\r\n+      if (editingHour === hourToDelete) {\r\n+        setOpenEventForm(false);\r\n+        setEditingHour(null);\r\n+        setFormData({ name: '', phone: '', type: 'Point' });\r\n+        setErrors({});\r\n+      }\r\n+    } catch (err) {\r\n+      console.error('Delete event failed:', err);\r\n+    }\r\n+  };\r\n+\r\n+  const startEditing = (hour) => {\r\n+    const ev = findEventAtHour(hour);\r\n+    if (ev) {\r\n+      setFormData({\r\n+        name: ev.name,\r\n+        phone: ev.phone,\r\n+        type: ev.type,\r\n+      });\r\n+    } else {\r\n+      setFormData({ name: '', phone: '', type: 'Point' });\r\n+    }\r\n+    setEditingHour(hour);\r\n+    setErrors({});\r\n+    setOpenEventForm(true);\r\n+  };\r\n+\r\n+  return (\r\n+    <>\r\n+      <NavBar\r\n+        email={profile?.email}\r\n+        onLogout={() => {\r\n+          localStorage.removeItem('token');\r\n+          // redirect if needed\r\n+        }}\r\n+      />\r\n+      <Container maxWidth=\"lg\" sx={{ mt: 4 }}>\r\n+        <Box boxShadow={3} p={2} bgcolor=\"white\" borderRadius={2}>\r\n+          <FullCalendar\r\n+            plugins={[dayGridPlugin, interactionPlugin]}\r\n+            initialView=\"dayGridMonth\"\r\n+            selectable={true}\r\n+            events={events}\r\n+            dateClick={handleDateClick}\r\n+          />\r\n+        </Box>\r\n+      </Container>\r\n+\r\n+      <Dialog\r\n+        open={openDayModal}\r\n+        onClose={() => setOpenDayModal(false)}\r\n+        maxWidth=\"lg\"\r\n+        fullWidth\r\n+      >\r\n+        <DialogTitle>Schedule for {selectedDay}</DialogTitle>\r\n+        <DialogContent>\r\n+          <Table>\r\n+            <TableHead>\r\n+              <TableRow>\r\n+                <TableCell>Hour</TableCell>\r\n+                <TableCell>Event Name</TableCell>\r\n+                <TableCell>Customer Name</TableCell>\r\n+                <TableCell>Customer Phone</TableCell>\r\n+                <TableCell>Action</TableCell>\r\n+              </TableRow>\r\n+            </TableHead>\r\n+\r\n+            <TableBody>\r\n+              {HOURS.map((hour) => {\r\n+                const ev = findEventAtHour(hour);\r\n+                return (\r\n+                  <TableRow key={hour}>\r\n+                    <TableCell>{formatHour(hour)}</TableCell>\r\n+                    <TableCell>{ev?.title || ''}</TableCell>\r\n+                    <TableCell>{ev?.name || ''}</TableCell>\r\n+                    <TableCell>{ev?.phone || ''}</TableCell>\r\n+                    <TableCell>\r\n+                      <IconButton\r\n+                        color=\"primary\"\r\n+                        size=\"small\"\r\n+                        onClick={() => startEditing(hour)}\r\n+                        title={ev ? 'Modify' : 'Add'}\r\n+                      >\r\n+                        {ev ? <EditIcon /> : <AddIcon />}\r\n+                      </IconButton>\r\n+\r\n+                      {ev && (\r\n+                        <IconButton\r\n+                          color=\"error\"\r\n+                          size=\"small\"\r\n+                          onClick={() => handleDelete(hour)}\r\n+                          title=\"Delete\"\r\n+                        >\r\n+                          <DeleteIcon />\r\n+                        </IconButton>\r\n+                      )}\r\n+                    </TableCell>\r\n+                  </TableRow>\r\n+                );\r\n+              })}\r\n+            </TableBody>\r\n+          </Table>\r\n+        </DialogContent>\r\n+\r\n+        <DialogActions>\r\n+          <Button onClick={() => setOpenDayModal(false)}>Close</Button>\r\n+        </DialogActions>\r\n+      </Dialog>\r\n+\r\n+      {/* Separate dialog popup for Add/Edit event */}\r\n+      <Dialog\r\n+        open={openEventForm}\r\n+        onClose={() => setOpenEventForm(false)}\r\n+        maxWidth=\"sm\"\r\n+        fullWidth\r\n+      >\r\n+        <DialogTitle>\r\n+          {editingHour !== null && findEventAtHour(editingHour)\r\n+            ? 'Modify Event'\r\n+            : 'Add Event'}\r\n+        </DialogTitle>\r\n+        <DialogContent>\r\n+          <Typography variant=\"subtitle1\" gutterBottom>\r\n+            For hour: {editingHour !== null ? formatHour(editingHour) : ''}\r\n+          </Typography>\r\n+\r\n+          <TextField\r\n+            margin=\"dense\"\r\n+            label=\"Customer Name\"\r\n+            fullWidth\r\n+            value={formData.name}\r\n+            onChange={(e) => setFormData({ ...formData, name: e.target.value })}\r\n+            error={!!errors.name}\r\n+            helperText={errors.name}\r\n+          />\r\n+          <TextField\r\n+            margin=\"dense\"\r\n+            label=\"Customer Phone\"\r\n+            fullWidth\r\n+            value={formData.phone}\r\n+            onChange={(e) => setFormData({ ...formData, phone: e.target.value })}\r\n+            error={!!errors.phone}\r\n+            helperText={errors.phone}\r\n+          />\r\n+          <TextField\r\n+            margin=\"dense\"\r\n+            select\r\n+            label=\"Type\"\r\n+            fullWidth\r\n+            value={formData.type}\r\n+            onChange={(e) => setFormData({ ...formData, type: e.target.value })}\r\n+          >\r\n+            <MenuItem value=\"Point\">Point</MenuItem>\r\n+            <MenuItem value=\"Rappel\">Rappel</MenuItem>\r\n+          </TextField>\r\n+        </DialogContent>\r\n+\r\n+        <DialogActions>\r\n+          <Button onClick={() => setOpenEventForm(false)}>Cancel</Button>\r\n+          <Button\r\n+            onClick={handleAddOrUpdate}\r\n+            variant=\"contained\"\r\n+            color=\"primary\"\r\n+          >\r\n+            Save\r\n+          </Button>\r\n+        </DialogActions>\r\n+      </Dialog>\r\n+    </>\r\n+  );\r\n+}\r\n"
                },
                {
                    "date": 1751840277387,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,11 +38,9 @@\n   const [events, setEvents] = useState([]);\r\n   const [selectedDay, setSelectedDay] = useState(null);\r\n   const [openDayModal, setOpenDayModal] = useState(false);\r\n \r\n-  // New state for the add/edit event popup\r\n   const [openEventForm, setOpenEventForm] = useState(false);\r\n-\r\n   const [editingHour, setEditingHour] = useState(null);\r\n   const [formData, setFormData] = useState({ name: '', phone: '', type: 'Point' });\r\n   const [errors, setErrors] = useState({});\r\n \r\n@@ -69,17 +67,26 @@\n       .then(setEvents)\r\n       .catch(console.error);\r\n   }, [token]);\r\n \r\n-  // Helper to check if selectedDay is before today\r\n+  // Check if date is before today\r\n   const isDateBeforeToday = (dateStr) => {\r\n     if (!dateStr) return false;\r\n     const selected = new Date(dateStr);\r\n     const today = new Date();\r\n     today.setHours(0, 0, 0, 0);\r\n     return selected < today;\r\n   };\r\n \r\n+  // Check if hour is in the past for the given date\r\n+  const isHourInPast = (dateStr, hour) => {\r\n+    if (!dateStr) return false;\r\n+    const now = new Date();\r\n+    const selected = new Date(dateStr);\r\n+    selected.setHours(hour, 0, 0, 0);\r\n+    return selected < now;\r\n+  };\r\n+\r\n   const handleDateClick = (arg) => {\r\n     if (isDateBeforeToday(arg.dateStr)) {\r\n       alert(\"You can't add or modify events for past dates.\");\r\n       return;\r\n@@ -108,10 +115,10 @@\n     return Object.keys(errs).length === 0;\r\n   };\r\n \r\n   const handleAddOrUpdate = async () => {\r\n-    if (isDateBeforeToday(selectedDay)) {\r\n-      alert(\"You can't add or modify events for past dates.\");\r\n+    if (isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, editingHour)) {\r\n+      alert(\"You can't add or modify events for past date/time.\");\r\n       return;\r\n     }\r\n     if (!validate()) return;\r\n \r\n@@ -175,8 +182,12 @@\n     }\r\n   };\r\n \r\n   const startEditing = (hour) => {\r\n+    if (isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, hour)) {\r\n+      alert(\"You can't add or modify events for past date/time.\");\r\n+      return;\r\n+    }\r\n     const ev = findEventAtHour(hour);\r\n     if (ev) {\r\n       setFormData({\r\n         name: ev.name,\r\n@@ -272,9 +283,8 @@\n           <Button onClick={() => setOpenDayModal(false)}>Close</Button>\r\n         </DialogActions>\r\n       </Dialog>\r\n \r\n-      {/* Separate dialog popup for Add/Edit event */}\r\n       <Dialog\r\n         open={openEventForm}\r\n         onClose={() => setOpenEventForm(false)}\r\n         maxWidth=\"sm\"\r\n"
                },
                {
                    "date": 1751840488375,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,365 @@\n+import React, { useState, useEffect } from 'react';\r\n+import {\r\n+  Container,\r\n+  Box,\r\n+  Dialog,\r\n+  DialogTitle,\r\n+  DialogContent,\r\n+  DialogActions,\r\n+  Button,\r\n+  TextField,\r\n+  MenuItem,\r\n+  Table,\r\n+  TableHead,\r\n+  TableBody,\r\n+  TableRow,\r\n+  TableCell,\r\n+  Typography,\r\n+  IconButton,\r\n+} from '@mui/material';\r\n+import FullCalendar from '@fullcalendar/react';\r\n+import dayGridPlugin from '@fullcalendar/daygrid';\r\n+import interactionPlugin from '@fullcalendar/interaction';\r\n+import NavBar from '../components/NavBar';\r\n+\r\n+import AddIcon from '@mui/icons-material/Add';\r\n+import EditIcon from '@mui/icons-material/Edit';\r\n+import DeleteIcon from '@mui/icons-material/Delete';\r\n+\r\n+const HOURS = Array.from({ length: 17 }, (_, i) => 8 + i); // 08:00 to 00:00\r\n+\r\n+function formatHour(h) {\r\n+  return h === 24 ? '00:00' : `${h.toString().padStart(2, '0')}:00`;\r\n+}\r\n+\r\n+export default function Dashboard() {\r\n+  const [profile, setProfile] = useState(null);\r\n+  const [events, setEvents] = useState([]);\r\n+  const [selectedDay, setSelectedDay] = useState(null);\r\n+  const [openDayModal, setOpenDayModal] = useState(false);\r\n+\r\n+  const [openEventForm, setOpenEventForm] = useState(false);\r\n+  const [editingHour, setEditingHour] = useState(null);\r\n+  const [formData, setFormData] = useState({ name: '', phone: '', type: 'Point' });\r\n+  const [errors, setErrors] = useState({});\r\n+\r\n+  const token = localStorage.getItem('token');\r\n+  const authHeaders = {\r\n+    Authorization: `Bearer ${token}`,\r\n+    'Content-Type': 'application/json',\r\n+  };\r\n+\r\n+  useEffect(() => {\r\n+    if (!token) return;\r\n+\r\n+    fetch('http://localhost:5000/api/admin/profile', { headers: authHeaders })\r\n+      .then(res => (res.ok ? res.json() : Promise.reject()))\r\n+      .then(setProfile)\r\n+      .catch(() => {\r\n+        localStorage.removeItem('token');\r\n+      });\r\n+\r\n+    fetch('http://localhost:5000/api/events', { headers: authHeaders })\r\n+      .then(res => res.json())\r\n+      .then(setEvents)\r\n+      .catch(console.error);\r\n+  }, [token]);\r\n+\r\n+  const isDateBeforeToday = (dateStr) => {\r\n+    if (!dateStr) return false;\r\n+    const selected = new Date(dateStr);\r\n+    const today = new Date();\r\n+    today.setHours(0, 0, 0, 0);\r\n+    return selected < today;\r\n+  };\r\n+\r\n+  const isHourInPast = (dateStr, hour) => {\r\n+    if (!dateStr) return false;\r\n+    const now = new Date();\r\n+    const selected = new Date(dateStr);\r\n+    selected.setHours(hour, 0, 0, 0);\r\n+    return selected < now;\r\n+  };\r\n+\r\n+  const handleDateClick = (arg) => {\r\n+    setSelectedDay(arg.dateStr);\r\n+    setOpenDayModal(true);\r\n+    setEditingHour(null);\r\n+    setFormData({ name: '', phone: '', type: 'Point' });\r\n+    setErrors({});\r\n+  };\r\n+\r\n+  const findEventAtHour = (hour) => {\r\n+    if (!selectedDay) return null;\r\n+    const hourStr = hour === 24 ? '00:00' : formatHour(hour);\r\n+    const prefix = `${selectedDay}T${hourStr}`;\r\n+    return events.find(e => e.date.startsWith(prefix));\r\n+  };\r\n+\r\n+  const validate = () => {\r\n+    const errs = {};\r\n+    if (!formData.name.trim()) errs.name = 'Name is required';\r\n+    if (!formData.phone.trim()) errs.phone = 'Phone is required';\r\n+    else if (!/^\\d{10}$/.test(formData.phone)) errs.phone = 'Phone must be 10 digits';\r\n+    if (!['Point', 'Rappel'].includes(formData.type)) errs.type = 'Invalid type';\r\n+    setErrors(errs);\r\n+    return Object.keys(errs).length === 0;\r\n+  };\r\n+\r\n+  const handleAddOrUpdate = async () => {\r\n+    if (isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, editingHour)) {\r\n+      alert(\"You can't add or modify events for past date/time.\");\r\n+      return;\r\n+    }\r\n+    if (!validate()) return;\r\n+\r\n+    const hourStr = editingHour === 24 ? '00:00' : formatHour(editingHour);\r\n+    const dateTime = `${selectedDay}T${hourStr}:00`;\r\n+\r\n+    const eventPayload = {\r\n+      title: `${formData.type} - ${formData.name}`,\r\n+      date: dateTime,\r\n+      name: formData.name,\r\n+      phone: formData.phone,\r\n+      type: formData.type,\r\n+    };\r\n+\r\n+    try {\r\n+      const existingEvent = findEventAtHour(editingHour);\r\n+      if (existingEvent) {\r\n+        const res = await fetch(`http://localhost:5000/api/events/${existingEvent._id}`, {\r\n+          method: 'PUT',\r\n+          headers: authHeaders,\r\n+          body: JSON.stringify(eventPayload),\r\n+        });\r\n+        const updated = await res.json();\r\n+        setEvents(events.map(e => (e._id === updated._id ? updated : e)));\r\n+      } else {\r\n+        const res = await fetch('http://localhost:5000/api/events', {\r\n+          method: 'POST',\r\n+          headers: authHeaders,\r\n+          body: JSON.stringify(eventPayload),\r\n+        });\r\n+        const created = await res.json();\r\n+        setEvents([...events, created]);\r\n+      }\r\n+      setOpenEventForm(false);\r\n+      setEditingHour(null);\r\n+      setFormData({ name: '', phone: '', type: 'Point' });\r\n+      setErrors({});\r\n+    } catch (err) {\r\n+      console.error('Save event failed:', err);\r\n+    }\r\n+  };\r\n+\r\n+  const handleDelete = async (hourToDelete) => {\r\n+    if (isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, hourToDelete)) {\r\n+      alert(\"You can't delete events from past date/time.\");\r\n+      return;\r\n+    }\r\n+    const existingEvent = findEventAtHour(hourToDelete);\r\n+    if (!existingEvent) return;\r\n+\r\n+    try {\r\n+      await fetch(`http://localhost:5000/api/events/${existingEvent._id}`, {\r\n+        method: 'DELETE',\r\n+        headers: authHeaders,\r\n+      });\r\n+      setEvents(events.filter(e => e._id !== existingEvent._id));\r\n+      if (editingHour === hourToDelete) {\r\n+        setOpenEventForm(false);\r\n+        setEditingHour(null);\r\n+        setFormData({ name: '', phone: '', type: 'Point' });\r\n+        setErrors({});\r\n+      }\r\n+    } catch (err) {\r\n+      console.error('Delete event failed:', err);\r\n+    }\r\n+  };\r\n+\r\n+  const startEditing = (hour) => {\r\n+    if (isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, hour)) {\r\n+      alert(\"You can't add or modify events for past date/time.\");\r\n+      return;\r\n+    }\r\n+    const ev = findEventAtHour(hour);\r\n+    if (ev) {\r\n+      setFormData({\r\n+        name: ev.name,\r\n+        phone: ev.phone,\r\n+        type: ev.type,\r\n+      });\r\n+    } else {\r\n+      setFormData({ name: '', phone: '', type: 'Point' });\r\n+    }\r\n+    setEditingHour(hour);\r\n+    setErrors({});\r\n+    setOpenEventForm(true);\r\n+  };\r\n+\r\n+  return (\r\n+    <>\r\n+      <NavBar\r\n+        email={profile?.email}\r\n+        onLogout={() => {\r\n+          localStorage.removeItem('token');\r\n+          // redirect if needed\r\n+        }}\r\n+      />\r\n+      <Container maxWidth=\"lg\" sx={{ mt: 4 }}>\r\n+        <Box boxShadow={3} p={2} bgcolor=\"white\" borderRadius={2}>\r\n+          <FullCalendar\r\n+            plugins={[dayGridPlugin, interactionPlugin]}\r\n+            initialView=\"dayGridMonth\"\r\n+            selectable={true}\r\n+            events={events}\r\n+            dateClick={handleDateClick}\r\n+          />\r\n+        </Box>\r\n+      </Container>\r\n+\r\n+      <Dialog\r\n+        open={openDayModal}\r\n+        onClose={() => setOpenDayModal(false)}\r\n+        maxWidth=\"lg\"\r\n+        fullWidth\r\n+      >\r\n+        <DialogTitle>Schedule for {selectedDay}</DialogTitle>\r\n+        <DialogContent>\r\n+          <Table>\r\n+            <TableHead>\r\n+              <TableRow>\r\n+                <TableCell>Hour</TableCell>\r\n+                <TableCell>Event Name</TableCell>\r\n+                <TableCell>Customer Name</TableCell>\r\n+                <TableCell>Customer Phone</TableCell>\r\n+                <TableCell>Action</TableCell>\r\n+              </TableRow>\r\n+            </TableHead>\r\n+\r\n+            <TableBody>\r\n+              {HOURS.map((hour) => {\r\n+                const ev = findEventAtHour(hour);\r\n+                const isPast = isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, hour);\r\n+\r\n+                return (\r\n+                  <TableRow key={hour}>\r\n+                    <TableCell>{formatHour(hour)}</TableCell>\r\n+                    <TableCell>{ev?.title || ''}</TableCell>\r\n+                    <TableCell>{ev?.name || ''}</TableCell>\r\n+                    <TableCell>{ev?.phone || ''}</TableCell>\r\n+                    <TableCell>\r\n+                      {isPast ? (\r\n+                        <>\r\n+                          {ev ? (\r\n+                            <>\r\n+                              <IconButton size=\"small\" disabled title=\"Modify disabled on past date/time\">\r\n+                                <EditIcon />\r\n+                              </IconButton>\r\n+                              <IconButton size=\"small\" disabled title=\"Delete disabled on past date/time\">\r\n+                                <DeleteIcon />\r\n+                              </IconButton>\r\n+                            </>\r\n+                          ) : (\r\n+                            <IconButton size=\"small\" disabled title=\"Add disabled on past date/time\">\r\n+                              <AddIcon />\r\n+                            </IconButton>\r\n+                          )}\r\n+                        </>\r\n+                      ) : (\r\n+                        <>\r\n+                          <IconButton\r\n+                            color=\"primary\"\r\n+                            size=\"small\"\r\n+                            onClick={() => startEditing(hour)}\r\n+                            title={ev ? 'Modify' : 'Add'}\r\n+                          >\r\n+                            {ev ? <EditIcon /> : <AddIcon />}\r\n+                          </IconButton>\r\n+\r\n+                          {ev && (\r\n+                            <IconButton\r\n+                              color=\"error\"\r\n+                              size=\"small\"\r\n+                              onClick={() => handleDelete(hour)}\r\n+                              title=\"Delete\"\r\n+                            >\r\n+                              <DeleteIcon />\r\n+                            </IconButton>\r\n+                          )}\r\n+                        </>\r\n+                      )}\r\n+                    </TableCell>\r\n+                  </TableRow>\r\n+                );\r\n+              })}\r\n+            </TableBody>\r\n+          </Table>\r\n+        </DialogContent>\r\n+\r\n+        <DialogActions>\r\n+          <Button onClick={() => setOpenDayModal(false)}>Close</Button>\r\n+        </DialogActions>\r\n+      </Dialog>\r\n+\r\n+      <Dialog\r\n+        open={openEventForm}\r\n+        onClose={() => setOpenEventForm(false)}\r\n+        maxWidth=\"sm\"\r\n+        fullWidth\r\n+      >\r\n+        <DialogTitle>\r\n+          {editingHour !== null && findEventAtHour(editingHour)\r\n+            ? 'Modify Event'\r\n+            : 'Add Event'}\r\n+        </DialogTitle>\r\n+        <DialogContent>\r\n+          <Typography variant=\"subtitle1\" gutterBottom>\r\n+            For hour: {editingHour !== null ? formatHour(editingHour) : ''}\r\n+          </Typography>\r\n+\r\n+          <TextField\r\n+            margin=\"dense\"\r\n+            label=\"Customer Name\"\r\n+            fullWidth\r\n+            value={formData.name}\r\n+            onChange={(e) => setFormData({ ...formData, name: e.target.value })}\r\n+            error={!!errors.name}\r\n+            helperText={errors.name}\r\n+          />\r\n+          <TextField\r\n+            margin=\"dense\"\r\n+            label=\"Customer Phone\"\r\n+            fullWidth\r\n+            value={formData.phone}\r\n+            onChange={(e) => setFormData({ ...formData, phone: e.target.value })}\r\n+            error={!!errors.phone}\r\n+            helperText={errors.phone}\r\n+          />\r\n+          <TextField\r\n+            margin=\"dense\"\r\n+            select\r\n+            label=\"Type\"\r\n+            fullWidth\r\n+            value={formData.type}\r\n+            onChange={(e) => setFormData({ ...formData, type: e.target.value })}\r\n+          >\r\n+            <MenuItem value=\"Point\">Point</MenuItem>\r\n+            <MenuItem value=\"Rappel\">Rappel</MenuItem>\r\n+          </TextField>\r\n+        </DialogContent>\r\n+\r\n+        <DialogActions>\r\n+          <Button onClick={() => setOpenEventForm(false)}>Cancel</Button>\r\n+          <Button\r\n+            onClick={handleAddOrUpdate}\r\n+            variant=\"contained\"\r\n+            color=\"primary\"\r\n+          >\r\n+            Save\r\n+          </Button>\r\n+        </DialogActions>\r\n+      </Dialog>\r\n+    </>\r\n+  );\r\n+}\r\n"
                },
                {
                    "date": 1751840582910,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,373 @@\n+import React, { useState, useEffect } from 'react';\r\n+import {\r\n+  Container,\r\n+  Box,\r\n+  Dialog,\r\n+  DialogTitle,\r\n+  DialogContent,\r\n+  DialogActions,\r\n+  Button,\r\n+  TextField,\r\n+  MenuItem,\r\n+  Table,\r\n+  TableHead,\r\n+  TableBody,\r\n+  TableRow,\r\n+  TableCell,\r\n+  Typography,\r\n+  IconButton,\r\n+} from '@mui/material';\r\n+import FullCalendar from '@fullcalendar/react';\r\n+import dayGridPlugin from '@fullcalendar/daygrid';\r\n+import interactionPlugin from '@fullcalendar/interaction';\r\n+import NavBar from '../components/NavBar';\r\n+\r\n+import AddIcon from '@mui/icons-material/Add';\r\n+import EditIcon from '@mui/icons-material/Edit';\r\n+import DeleteIcon from '@mui/icons-material/Delete';\r\n+\r\n+const HOURS = Array.from({ length: 17 }, (_, i) => 8 + i); // 08:00 to 00:00\r\n+\r\n+function formatHour(h) {\r\n+  return h === 24 ? '00:00' : `${h.toString().padStart(2, '0')}:00`;\r\n+}\r\n+\r\n+export default function Dashboard() {\r\n+  const [profile, setProfile] = useState(null);\r\n+  const [events, setEvents] = useState([]);\r\n+  const [selectedDay, setSelectedDay] = useState(null);\r\n+  const [openDayModal, setOpenDayModal] = useState(false);\r\n+\r\n+  const [openEventForm, setOpenEventForm] = useState(false);\r\n+  const [editingHour, setEditingHour] = useState(null);\r\n+  const [formData, setFormData] = useState({ name: '', phone: '', type: 'Point' });\r\n+  const [errors, setErrors] = useState({});\r\n+\r\n+  const token = localStorage.getItem('token');\r\n+  const authHeaders = {\r\n+    Authorization: `Bearer ${token}`,\r\n+    'Content-Type': 'application/json',\r\n+  };\r\n+\r\n+  useEffect(() => {\r\n+    if (!token) return;\r\n+\r\n+    fetch('http://localhost:5000/api/admin/profile', { headers: authHeaders })\r\n+      .then(res => (res.ok ? res.json() : Promise.reject()))\r\n+      .then(setProfile)\r\n+      .catch(() => {\r\n+        localStorage.removeItem('token');\r\n+      });\r\n+\r\n+    fetch('http://localhost:5000/api/events', { headers: authHeaders })\r\n+      .then(res => res.json())\r\n+      .then(setEvents)\r\n+      .catch(console.error);\r\n+  }, [token]);\r\n+\r\n+  const isDateBeforeToday = (dateStr) => {\r\n+    if (!dateStr) return false;\r\n+    const selected = new Date(dateStr);\r\n+    const today = new Date();\r\n+    today.setHours(0, 0, 0, 0);\r\n+    return selected < today;\r\n+  };\r\n+\r\n+  const isHourInPast = (dateStr, hour) => {\r\n+    if (!dateStr) return false;\r\n+    const now = new Date();\r\n+    const selected = new Date(dateStr);\r\n+    selected.setHours(hour, 0, 0, 0);\r\n+    return selected < now;\r\n+  };\r\n+\r\n+  const findEventAtHour = (hour) => {\r\n+    if (!selectedDay) return null;\r\n+    const hourStr = hour === 24 ? '00:00' : formatHour(hour);\r\n+    const prefix = `${selectedDay}T${hourStr}`;\r\n+    return events.find(e => e.date.startsWith(prefix));\r\n+  };\r\n+\r\n+  const validate = () => {\r\n+    const errs = {};\r\n+    if (!formData.name.trim()) errs.name = 'Name is required';\r\n+    if (!formData.phone.trim()) errs.phone = 'Phone is required';\r\n+    else if (!/^\\d{10}$/.test(formData.phone)) errs.phone = 'Phone must be 10 digits';\r\n+    if (!['Point', 'Rappel'].includes(formData.type)) errs.type = 'Invalid type';\r\n+    setErrors(errs);\r\n+    return Object.keys(errs).length === 0;\r\n+  };\r\n+\r\n+  const handleAddOrUpdate = async () => {\r\n+    if (isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, editingHour)) {\r\n+      alert(\"You can't add or modify events for past date/time.\");\r\n+      return;\r\n+    }\r\n+    if (!validate()) return;\r\n+\r\n+    const hourStr = editingHour === 24 ? '00:00' : formatHour(editingHour);\r\n+    const dateTime = `${selectedDay}T${hourStr}:00`;\r\n+\r\n+    const eventPayload = {\r\n+      title: `${formData.type} - ${formData.name}`,\r\n+      date: dateTime,\r\n+      name: formData.name,\r\n+      phone: formData.phone,\r\n+      type: formData.type,\r\n+    };\r\n+\r\n+    try {\r\n+      const existingEvent = findEventAtHour(editingHour);\r\n+      if (existingEvent) {\r\n+        const res = await fetch(`http://localhost:5000/api/events/${existingEvent._id}`, {\r\n+          method: 'PUT',\r\n+          headers: authHeaders,\r\n+          body: JSON.stringify(eventPayload),\r\n+        });\r\n+        const updated = await res.json();\r\n+        setEvents(events.map(e => (e._id === updated._id ? updated : e)));\r\n+      } else {\r\n+        const res = await fetch('http://localhost:5000/api/events', {\r\n+          method: 'POST',\r\n+          headers: authHeaders,\r\n+          body: JSON.stringify(eventPayload),\r\n+        });\r\n+        const created = await res.json();\r\n+        setEvents([...events, created]);\r\n+      }\r\n+      setOpenEventForm(false);\r\n+      setEditingHour(null);\r\n+      setFormData({ name: '', phone: '', type: 'Point' });\r\n+      setErrors({});\r\n+    } catch (err) {\r\n+      console.error('Save event failed:', err);\r\n+    }\r\n+  };\r\n+\r\n+  const handleDelete = async (hourToDelete) => {\r\n+    if (isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, hourToDelete)) {\r\n+      alert(\"You can't delete events from past date/time.\");\r\n+      return;\r\n+    }\r\n+    const existingEvent = findEventAtHour(hourToDelete);\r\n+    if (!existingEvent) return;\r\n+\r\n+    try {\r\n+      await fetch(`http://localhost:5000/api/events/${existingEvent._id}`, {\r\n+        method: 'DELETE',\r\n+        headers: authHeaders,\r\n+      });\r\n+      setEvents(events.filter(e => e._id !== existingEvent._id));\r\n+      if (editingHour === hourToDelete) {\r\n+        setOpenEventForm(false);\r\n+        setEditingHour(null);\r\n+        setFormData({ name: '', phone: '', type: 'Point' });\r\n+        setErrors({});\r\n+      }\r\n+    } catch (err) {\r\n+      console.error('Delete event failed:', err);\r\n+    }\r\n+  };\r\n+\r\n+  const startEditing = (hour) => {\r\n+    if (isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, hour)) {\r\n+      alert(\"You can't add or modify events for past date/time.\");\r\n+      return;\r\n+    }\r\n+    const ev = findEventAtHour(hour);\r\n+    if (ev) {\r\n+      setFormData({\r\n+        name: ev.name,\r\n+        phone: ev.phone,\r\n+        type: ev.type,\r\n+      });\r\n+    } else {\r\n+      setFormData({ name: '', phone: '', type: 'Point' });\r\n+    }\r\n+    setEditingHour(hour);\r\n+    setErrors({});\r\n+    setOpenEventForm(true);\r\n+  };\r\n+\r\n+  const handleDateClick = (arg) => {\r\n+    const clickedDate = arg.dateStr;\r\n+    const hasEventOnDate = events.some(ev => ev.date.startsWith(clickedDate));\r\n+\r\n+    if (isDateBeforeToday(clickedDate) && !hasEventOnDate) {\r\n+      alert('No events on this past date.');\r\n+      return;\r\n+    }\r\n+\r\n+    setSelectedDay(clickedDate);\r\n+    setOpenDayModal(true);\r\n+    setEditingHour(null);\r\n+    setFormData({ name: '', phone: '', type: 'Point' });\r\n+    setErrors({});\r\n+  };\r\n+\r\n+  return (\r\n+    <>\r\n+      <NavBar\r\n+        email={profile?.email}\r\n+        onLogout={() => {\r\n+          localStorage.removeItem('token');\r\n+          // redirect if needed\r\n+        }}\r\n+      />\r\n+      <Container maxWidth=\"lg\" sx={{ mt: 4 }}>\r\n+        <Box boxShadow={3} p={2} bgcolor=\"white\" borderRadius={2}>\r\n+          <FullCalendar\r\n+            plugins={[dayGridPlugin, interactionPlugin]}\r\n+            initialView=\"dayGridMonth\"\r\n+            selectable={true}\r\n+            events={events}\r\n+            dateClick={handleDateClick}\r\n+          />\r\n+        </Box>\r\n+      </Container>\r\n+\r\n+      <Dialog\r\n+        open={openDayModal}\r\n+        onClose={() => setOpenDayModal(false)}\r\n+        maxWidth=\"lg\"\r\n+        fullWidth\r\n+      >\r\n+        <DialogTitle>Schedule for {selectedDay}</DialogTitle>\r\n+        <DialogContent>\r\n+          <Table>\r\n+            <TableHead>\r\n+              <TableRow>\r\n+                <TableCell>Hour</TableCell>\r\n+                <TableCell>Event Name</TableCell>\r\n+                <TableCell>Customer Name</TableCell>\r\n+                <TableCell>Customer Phone</TableCell>\r\n+                <TableCell>Action</TableCell>\r\n+              </TableRow>\r\n+            </TableHead>\r\n+\r\n+            <TableBody>\r\n+              {HOURS.map((hour) => {\r\n+                const ev = findEventAtHour(hour);\r\n+                const isPast = isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, hour);\r\n+\r\n+                return (\r\n+                  <TableRow key={hour}>\r\n+                    <TableCell>{formatHour(hour)}</TableCell>\r\n+                    <TableCell>{ev?.title || ''}</TableCell>\r\n+                    <TableCell>{ev?.name || ''}</TableCell>\r\n+                    <TableCell>{ev?.phone || ''}</TableCell>\r\n+                    <TableCell>\r\n+                      {isPast ? (\r\n+                        <>\r\n+                          {ev ? (\r\n+                            <>\r\n+                              <IconButton size=\"small\" disabled title=\"Modify disabled on past date/time\">\r\n+                                <EditIcon />\r\n+                              </IconButton>\r\n+                              <IconButton size=\"small\" disabled title=\"Delete disabled on past date/time\">\r\n+                                <DeleteIcon />\r\n+                              </IconButton>\r\n+                            </>\r\n+                          ) : (\r\n+                            <IconButton size=\"small\" disabled title=\"Add disabled on past date/time\">\r\n+                              <AddIcon />\r\n+                            </IconButton>\r\n+                          )}\r\n+                        </>\r\n+                      ) : (\r\n+                        <>\r\n+                          <IconButton\r\n+                            color=\"primary\"\r\n+                            size=\"small\"\r\n+                            onClick={() => startEditing(hour)}\r\n+                            title={ev ? 'Modify' : 'Add'}\r\n+                          >\r\n+                            {ev ? <EditIcon /> : <AddIcon />}\r\n+                          </IconButton>\r\n+\r\n+                          {ev && (\r\n+                            <IconButton\r\n+                              color=\"error\"\r\n+                              size=\"small\"\r\n+                              onClick={() => handleDelete(hour)}\r\n+                              title=\"Delete\"\r\n+                            >\r\n+                              <DeleteIcon />\r\n+                            </IconButton>\r\n+                          )}\r\n+                        </>\r\n+                      )}\r\n+                    </TableCell>\r\n+                  </TableRow>\r\n+                );\r\n+              })}\r\n+            </TableBody>\r\n+          </Table>\r\n+        </DialogContent>\r\n+\r\n+        <DialogActions>\r\n+          <Button onClick={() => setOpenDayModal(false)}>Close</Button>\r\n+        </DialogActions>\r\n+      </Dialog>\r\n+\r\n+      <Dialog\r\n+        open={openEventForm}\r\n+        onClose={() => setOpenEventForm(false)}\r\n+        maxWidth=\"sm\"\r\n+        fullWidth\r\n+      >\r\n+        <DialogTitle>\r\n+          {editingHour !== null && findEventAtHour(editingHour)\r\n+            ? 'Modify Event'\r\n+            : 'Add Event'}\r\n+        </DialogTitle>\r\n+        <DialogContent>\r\n+          <Typography variant=\"subtitle1\" gutterBottom>\r\n+            For hour: {editingHour !== null ? formatHour(editingHour) : ''}\r\n+          </Typography>\r\n+\r\n+          <TextField\r\n+            margin=\"dense\"\r\n+            label=\"Customer Name\"\r\n+            fullWidth\r\n+            value={formData.name}\r\n+            onChange={(e) => setFormData({ ...formData, name: e.target.value })}\r\n+            error={!!errors.name}\r\n+            helperText={errors.name}\r\n+          />\r\n+          <TextField\r\n+            margin=\"dense\"\r\n+            label=\"Customer Phone\"\r\n+            fullWidth\r\n+            value={formData.phone}\r\n+            onChange={(e) => setFormData({ ...formData, phone: e.target.value })}\r\n+            error={!!errors.phone}\r\n+            helperText={errors.phone}\r\n+          />\r\n+          <TextField\r\n+            margin=\"dense\"\r\n+            select\r\n+            label=\"Type\"\r\n+            fullWidth\r\n+            value={formData.type}\r\n+            onChange={(e) => setFormData({ ...formData, type: e.target.value })}\r\n+          >\r\n+            <MenuItem value=\"Point\">Point</MenuItem>\r\n+            <MenuItem value=\"Rappel\">Rappel</MenuItem>\r\n+          </TextField>\r\n+        </DialogContent>\r\n+\r\n+        <DialogActions>\r\n+          <Button onClick={() => setOpenEventForm(false)}>Cancel</Button>\r\n+          <Button\r\n+            onClick={handleAddOrUpdate}\r\n+            variant=\"contained\"\r\n+            color=\"primary\"\r\n+          >\r\n+            Save\r\n+          </Button>\r\n+        </DialogActions>\r\n+      </Dialog>\r\n+    </>\r\n+  );\r\n+}\r\n"
                },
                {
                    "date": 1751915124022,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,374 @@\n+import React, { useState, useEffect } from 'react';\r\n+import {\r\n+  Container,\r\n+  Box,\r\n+  Dialog,\r\n+  DialogTitle,\r\n+  DialogContent,\r\n+  DialogActions,\r\n+  Button,\r\n+  TextField,\r\n+  MenuItem,\r\n+  Table,\r\n+  TableHead,\r\n+  TableBody,\r\n+  TableRow,\r\n+  TableCell,\r\n+  Typography,\r\n+  IconButton,\r\n+} from '@mui/material';\r\n+import FullCalendar from '@fullcalendar/react';\r\n+import dayGridPlugin from '@fullcalendar/daygrid';\r\n+import interactionPlugin from '@fullcalendar/interaction';\r\n+import NavBar from '../components/NavBar';\r\n+\r\n+import AddIcon from '@mui/icons-material/Add';\r\n+import EditIcon from '@mui/icons-material/Edit';\r\n+import DeleteIcon from '@mui/icons-material/Delete';\r\n+\r\n+const HOURS = Array.from({ length: 17 }, (_, i) => 8 + i); // 08:00 to 00:00\r\n+\r\n+function formatHour(h) {\r\n+  return h === 24 ? '00:00' : `${h.toString().padStart(2, '0')}:00`;\r\n+}\r\n+\r\n+export default function Dashboard() {\r\n+  const [profile, setProfile] = useState(null);\r\n+  const [events, setEvents] = useState([]);\r\n+  const [selectedDay, setSelectedDay] = useState(null);\r\n+  const [openDayModal, setOpenDayModal] = useState(false);\r\n+\r\n+  const [openEventForm, setOpenEventForm] = useState(false);\r\n+  const [editingHour, setEditingHour] = useState(null);\r\n+  const [formData, setFormData] = useState({ name: '', phone: '', type: 'Point' });\r\n+  const [errors, setErrors] = useState({});\r\n+\r\n+  const token = localStorage.getItem('token');\r\n+  const authHeaders = {\r\n+    Authorization: `Bearer ${token}`,\r\n+    'Content-Type': 'application/json',\r\n+  };\r\n+\r\n+  useEffect(() => {\r\n+    if (!token) return;\r\n+\r\n+    fetch('http://localhost:5000/api/admin/profile', { headers: authHeaders })\r\n+      .then(res => (res.ok ? res.json() : Promise.reject()))\r\n+      .then(setProfile)\r\n+      .catch(() => {\r\n+        localStorage.removeItem('token');\r\n+      });\r\n+\r\n+    fetch('http://localhost:5000/api/events', { headers: authHeaders })\r\n+      .then(res => res.json())\r\n+      .then(setEvents)\r\n+      .catch(console.error);\r\n+  }, [token]);\r\n+\r\n+  const isDateBeforeToday = (dateStr) => {\r\n+    if (!dateStr) return false;\r\n+    const selected = new Date(dateStr);\r\n+    const today = new Date();\r\n+    today.setHours(0, 0, 0, 0);\r\n+    return selected < today;\r\n+  };\r\n+\r\n+  const isHourInPast = (dateStr, hour) => {\r\n+    if (!dateStr) return false;\r\n+    const now = new Date();\r\n+    const selected = new Date(dateStr);\r\n+    selected.setHours(hour, 0, 0, 0);\r\n+    return selected < now;\r\n+  };\r\n+\r\n+  const findEventAtHour = (hour) => {\r\n+    if (!selectedDay) return null;\r\n+    const hourStr = hour === 24 ? '00:00' : formatHour(hour);\r\n+    const prefix = `${selectedDay}T${hourStr}`;\r\n+    return events.find(e => e.date.startsWith(prefix));\r\n+  };\r\n+\r\n+  const validate = () => {\r\n+    const errs = {};\r\n+    if (!formData.name.trim()) errs.name = 'Name is required';\r\n+    if (!formData.phone.trim()) errs.phone = 'Phone is required';\r\n+    else if (!/^\\d{10}$/.test(formData.phone)) errs.phone = 'Phone must be 10 digits';\r\n+    if (!['Point', 'Rappel'].includes(formData.type)) errs.type = 'Invalid type';\r\n+    setErrors(errs);\r\n+    return Object.keys(errs).length === 0;\r\n+  };\r\n+\r\n+  const handleAddOrUpdate = async () => {\r\n+    if (isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, editingHour)) {\r\n+      alert(\"You can't add or modify events for past date/time.\");\r\n+      return;\r\n+    }\r\n+    if (!validate()) return;\r\n+\r\n+    const hourStr = editingHour === 24 ? '00:00' : formatHour(editingHour);\r\n+    const dateTime = `${selectedDay}T${hourStr}:00`;\r\n+\r\n+    const eventPayload = {\r\n+      title: `${formData.type} - ${formData.name}`,\r\n+      date: dateTime,\r\n+      name: formData.name,\r\n+      phone: formData.phone,\r\n+      type: formData.type,\r\n+    };\r\n+\r\n+    try {\r\n+      const existingEvent = findEventAtHour(editingHour);\r\n+      if (existingEvent) {\r\n+        const res = await fetch(`http://localhost:5000/api/events/${existingEvent._id}`, {\r\n+          method: 'PUT',\r\n+          headers: authHeaders,\r\n+          body: JSON.stringify(eventPayload),\r\n+        });\r\n+        const updated = await res.json();\r\n+        setEvents(events.map(e => (e._id === updated._id ? updated : e)));\r\n+      } else {\r\n+        const res = await fetch('http://localhost:5000/api/events', {\r\n+          method: 'POST',\r\n+          headers: authHeaders,\r\n+          body: JSON.stringify(eventPayload),\r\n+        });\r\n+        const created = await res.json();\r\n+        setEvents([...events, created]);\r\n+      }\r\n+      setOpenEventForm(false);\r\n+      setEditingHour(null);\r\n+      setFormData({ name: '', phone: '', type: 'Point' });\r\n+      setErrors({});\r\n+    } catch (err) {\r\n+      console.error('Save event failed:', err);\r\n+    }\r\n+  };\r\n+\r\n+  const handleDelete = async (hourToDelete) => {\r\n+    if (isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, hourToDelete)) {\r\n+      alert(\"You can't delete events from past date/time.\");\r\n+      return;\r\n+    }\r\n+    const existingEvent = findEventAtHour(hourToDelete);\r\n+    if (!existingEvent) return;\r\n+\r\n+    try {\r\n+      await fetch(`http://localhost:5000/api/events/${existingEvent._id}`, {\r\n+        method: 'DELETE',\r\n+        headers: authHeaders,\r\n+      });\r\n+      setEvents(events.filter(e => e._id !== existingEvent._id));\r\n+      if (editingHour === hourToDelete) {\r\n+        setOpenEventForm(false);\r\n+        setEditingHour(null);\r\n+        setFormData({ name: '', phone: '', type: 'Point' });\r\n+        setErrors({});\r\n+      }\r\n+    } catch (err) {\r\n+      console.error('Delete event failed:', err);\r\n+    }\r\n+  };\r\n+\r\n+  const startEditing = (hour) => {\r\n+    if (isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, hour)) {\r\n+      alert(\"You can't add or modify events for past date/time.\");\r\n+      return;\r\n+    }\r\n+    const ev = findEventAtHour(hour);\r\n+    if (ev) {\r\n+      setFormData({\r\n+        name: ev.name,\r\n+        phone: ev.phone,\r\n+        type: ev.type,\r\n+      });\r\n+    } else {\r\n+      setFormData({ name: '', phone: '', type: 'Point' });\r\n+    }\r\n+    setEditingHour(hour);\r\n+    setErrors({});\r\n+    setOpenEventForm(true);\r\n+  };\r\n+\r\n+  const handleDateClick = (arg) => {\r\n+    const clickedDate = arg.dateStr;\r\n+    const hasEventOnDate = events.some(ev => ev.date.startsWith(clickedDate));\r\n+\r\n+    if (isDateBeforeToday(clickedDate) && !hasEventOnDate) {\r\n+      alert('No events on this past date.');\r\n+      return;\r\n+    }\r\n+\r\n+    setSelectedDay(clickedDate);\r\n+    setOpenDayModal(true);\r\n+    setEditingHour(null);\r\n+    setFormData({ name: '', phone: '', type: 'Point' });\r\n+    setErrors({});\r\n+  };\r\n+\r\n+  return (\r\n+    <>\r\n+      <NavBar\r\n+        email={profile?.email}\r\n+        onLogout={() => {\r\n+          localStorage.removeItem('token');\r\n+          // redirect if needed\r\n+        }}\r\n+      />\r\n+      <Container maxWidth=\"lg\" sx={{ mt: 4 }}>\r\n+        <Box boxShadow={3} p={2} bgcolor=\"white\" borderRadius={2}>\r\n+          <FullCalendar\r\n+            plugins={[dayGridPlugin, interactionPlugin]}\r\n+            initialView=\"dayGridMonth\"\r\n+            selectable={true}\r\n+            events={events}\r\n+            dateClick={handleDateClick}\r\n+          />\r\n+        </Box>\r\n+      </Container>\r\n+\r\n+      <Dialog\r\n+        open={openDayModal}\r\n+        onClose={() => setOpenDayModal(false)}\r\n+        maxWidth=\"lg\"\r\n+        fullWidth\r\n+      >\r\n+        <DialogTitle>Schedule for {selectedDay}</DialogTitle>\r\n+        <DialogContent>\r\n+          <Table>\r\n+            <TableHead>\r\n+              <TableRow>\r\n+                <TableCell>Hour</TableCell>\r\n+                <TableCell>Event Name</TableCell>\r\n+                <TableCell>Customer Name</TableCell>\r\n+                <TableCell>Customer Phone</TableCell>\r\n+                \r\n+                <TableCell>Action</TableCell>\r\n+              </TableRow>\r\n+            </TableHead>\r\n+\r\n+            <TableBody>\r\n+              {HOURS.map((hour) => {\r\n+                const ev = findEventAtHour(hour);\r\n+                const isPast = isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, hour);\r\n+\r\n+                return (\r\n+                  <TableRow key={hour}>\r\n+                    <TableCell>{formatHour(hour)}</TableCell>\r\n+                    <TableCell>{ev?.title || ''}</TableCell>\r\n+                    <TableCell>{ev?.name || ''}</TableCell>\r\n+                    <TableCell>{ev?.phone || ''}</TableCell>\r\n+                    <TableCell>\r\n+                      {isPast ? (\r\n+                        <>\r\n+                          {ev ? (\r\n+                            <>\r\n+                              <IconButton size=\"small\" disabled title=\"Modify disabled on past date/time\">\r\n+                                <EditIcon />\r\n+                              </IconButton>\r\n+                              <IconButton size=\"small\" disabled title=\"Delete disabled on past date/time\">\r\n+                                <DeleteIcon />\r\n+                              </IconButton>\r\n+                            </>\r\n+                          ) : (\r\n+                            <IconButton size=\"small\" disabled title=\"Add disabled on past date/time\">\r\n+                              <AddIcon />\r\n+                            </IconButton>\r\n+                          )}\r\n+                        </>\r\n+                      ) : (\r\n+                        <>\r\n+                          <IconButton\r\n+                            color=\"primary\"\r\n+                            size=\"small\"\r\n+                            onClick={() => startEditing(hour)}\r\n+                            title={ev ? 'Modify' : 'Add'}\r\n+                          >\r\n+                            {ev ? <EditIcon /> : <AddIcon />}\r\n+                          </IconButton>\r\n+\r\n+                          {ev && (\r\n+                            <IconButton\r\n+                              color=\"error\"\r\n+                              size=\"small\"\r\n+                              onClick={() => handleDelete(hour)}\r\n+                              title=\"Delete\"\r\n+                            >\r\n+                              <DeleteIcon />\r\n+                            </IconButton>\r\n+                          )}\r\n+                        </>\r\n+                      )}\r\n+                    </TableCell>\r\n+                  </TableRow>\r\n+                );\r\n+              })}\r\n+            </TableBody>\r\n+          </Table>\r\n+        </DialogContent>\r\n+\r\n+        <DialogActions>\r\n+          <Button onClick={() => setOpenDayModal(false)}>Close</Button>\r\n+        </DialogActions>\r\n+      </Dialog>\r\n+\r\n+      <Dialog\r\n+        open={openEventForm}\r\n+        onClose={() => setOpenEventForm(false)}\r\n+        maxWidth=\"sm\"\r\n+        fullWidth\r\n+      >\r\n+        <DialogTitle>\r\n+          {editingHour !== null && findEventAtHour(editingHour)\r\n+            ? 'Modify Event'\r\n+            : 'Add Event'}\r\n+        </DialogTitle>\r\n+        <DialogContent>\r\n+          <Typography variant=\"subtitle1\" gutterBottom>\r\n+            For hour: {editingHour !== null ? formatHour(editingHour) : ''}\r\n+          </Typography>\r\n+\r\n+          <TextField\r\n+            margin=\"dense\"\r\n+            label=\"Customer Name\"\r\n+            fullWidth\r\n+            value={formData.name}\r\n+            onChange={(e) => setFormData({ ...formData, name: e.target.value })}\r\n+            error={!!errors.name}\r\n+            helperText={errors.name}\r\n+          />\r\n+          <TextField\r\n+            margin=\"dense\"\r\n+            label=\"Customer Phone\"\r\n+            fullWidth\r\n+            value={formData.phone}\r\n+            onChange={(e) => setFormData({ ...formData, phone: e.target.value })}\r\n+            error={!!errors.phone}\r\n+            helperText={errors.phone}\r\n+          />\r\n+          <TextField\r\n+            margin=\"dense\"\r\n+            select\r\n+            label=\"Type\"\r\n+            fullWidth\r\n+            value={formData.type}\r\n+            onChange={(e) => setFormData({ ...formData, type: e.target.value })}\r\n+          >\r\n+            <MenuItem value=\"Point\">Point</MenuItem>\r\n+            <MenuItem value=\"Rappel\">Rappel</MenuItem>\r\n+          </TextField>\r\n+        </DialogContent>\r\n+\r\n+        <DialogActions>\r\n+          <Button onClick={() => setOpenEventForm(false)}>Cancel</Button>\r\n+          <Button\r\n+            onClick={handleAddOrUpdate}\r\n+            variant=\"contained\"\r\n+            color=\"primary\"\r\n+          >\r\n+            Save\r\n+          </Button>\r\n+        </DialogActions>\r\n+      </Dialog>\r\n+    </>\r\n+  );\r\n+}\r\n"
                },
                {
                    "date": 1751915129235,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -366,5 +366,9 @@\n             color=\"primary\"\r\n           >\r\n             Save\r\n           </Button>\r\n-        </DialogActions>\n\\ No newline at end of file\n+        </DialogActions>\r\n+      </Dialog>\r\n+    </>\r\n+  );\r\n+}\r\n"
                },
                {
                    "date": 1751915135780,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,374 @@\n+import React, { useState, useEffect } from 'react';\r\n+import {\r\n+  Container,\r\n+  Box,\r\n+  Dialog,\r\n+  DialogTitle,\r\n+  DialogContent,\r\n+  DialogActions,\r\n+  Button,\r\n+  TextField,\r\n+  MenuItem,\r\n+  Table,\r\n+  TableHead,\r\n+  TableBody,\r\n+  TableRow,\r\n+  TableCell,\r\n+  Typography,\r\n+  IconButton,\r\n+} from '@mui/material';\r\n+import FullCalendar from '@fullcalendar/react';\r\n+import dayGridPlugin from '@fullcalendar/daygrid';\r\n+import interactionPlugin from '@fullcalendar/interaction';\r\n+import NavBar from '../components/NavBar';\r\n+\r\n+import AddIcon from '@mui/icons-material/Add';\r\n+import EditIcon from '@mui/icons-material/Edit';\r\n+import DeleteIcon from '@mui/icons-material/Delete';\r\n+\r\n+const HOURS = Array.from({ length: 17 }, (_, i) => 8 + i); // 08:00 to 00:00\r\n+\r\n+function formatHour(h) {\r\n+  return h === 24 ? '00:00' : `${h.toString().padStart(2, '0')}:00`;\r\n+}\r\n+\r\n+export default function Dashboard() {\r\n+  const [profile, setProfile] = useState(null);\r\n+  const [events, setEvents] = useState([]);\r\n+  const [selectedDay, setSelectedDay] = useState(null);\r\n+  const [openDayModal, setOpenDayModal] = useState(false);\r\n+\r\n+  const [openEventForm, setOpenEventForm] = useState(false);\r\n+  const [editingHour, setEditingHour] = useState(null);\r\n+  const [formData, setFormData] = useState({ name: '', phone: '', type: 'Point' });\r\n+  const [errors, setErrors] = useState({});\r\n+\r\n+  const token = localStorage.getItem('token');\r\n+  const authHeaders = {\r\n+    Authorization: `Bearer ${token}`,\r\n+    'Content-Type': 'application/json',\r\n+  };\r\n+\r\n+  useEffect(() => {\r\n+    if (!token) return;\r\n+\r\n+    fetch('http://localhost:5000/api/admin/profile', { headers: authHeaders })\r\n+      .then(res => (res.ok ? res.json() : Promise.reject()))\r\n+      .then(setProfile)\r\n+      .catch(() => {\r\n+        localStorage.removeItem('token');\r\n+      });\r\n+\r\n+    fetch('http://localhost:5000/api/events', { headers: authHeaders })\r\n+      .then(res => res.json())\r\n+      .then(setEvents)\r\n+      .catch(console.error);\r\n+  }, [token]);\r\n+\r\n+  const isDateBeforeToday = (dateStr) => {\r\n+    if (!dateStr) return false;\r\n+    const selected = new Date(dateStr);\r\n+    const today = new Date();\r\n+    today.setHours(0, 0, 0, 0);\r\n+    return selected < today;\r\n+  };\r\n+\r\n+  const isHourInPast = (dateStr, hour) => {\r\n+    if (!dateStr) return false;\r\n+    const now = new Date();\r\n+    const selected = new Date(dateStr);\r\n+    selected.setHours(hour, 0, 0, 0);\r\n+    return selected < now;\r\n+  };\r\n+\r\n+  const findEventAtHour = (hour) => {\r\n+    if (!selectedDay) return null;\r\n+    const hourStr = hour === 24 ? '00:00' : formatHour(hour);\r\n+    const prefix = `${selectedDay}T${hourStr}`;\r\n+    return events.find(e => e.date.startsWith(prefix));\r\n+  };\r\n+\r\n+  const validate = () => {\r\n+    const errs = {};\r\n+    if (!formData.name.trim()) errs.name = 'Name is required';\r\n+    if (!formData.phone.trim()) errs.phone = 'Phone is required';\r\n+    else if (!/^\\d{10}$/.test(formData.phone)) errs.phone = 'Phone must be 10 digits';\r\n+    if (!['Point', 'Rappel'].includes(formData.type)) errs.type = 'Invalid type';\r\n+    setErrors(errs);\r\n+    return Object.keys(errs).length === 0;\r\n+  };\r\n+\r\n+  const handleAddOrUpdate = async () => {\r\n+    if (isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, editingHour)) {\r\n+      alert(\"You can't add or modify events for past date/time.\");\r\n+      return;\r\n+    }\r\n+    if (!validate()) return;\r\n+\r\n+    const hourStr = editingHour === 24 ? '00:00' : formatHour(editingHour);\r\n+    const dateTime = `${selectedDay}T${hourStr}:00`;\r\n+\r\n+    const eventPayload = {\r\n+      title: `${formData.type} - ${formData.name}`,\r\n+      date: dateTime,\r\n+      name: formData.name,\r\n+      phone: formData.phone,\r\n+      type: formData.type,\r\n+    };\r\n+\r\n+    try {\r\n+      const existingEvent = findEventAtHour(editingHour);\r\n+      if (existingEvent) {\r\n+        const res = await fetch(`http://localhost:5000/api/events/${existingEvent._id}`, {\r\n+          method: 'PUT',\r\n+          headers: authHeaders,\r\n+          body: JSON.stringify(eventPayload),\r\n+        });\r\n+        const updated = await res.json();\r\n+        setEvents(events.map(e => (e._id === updated._id ? updated : e)));\r\n+      } else {\r\n+        const res = await fetch('http://localhost:5000/api/events', {\r\n+          method: 'POST',\r\n+          headers: authHeaders,\r\n+          body: JSON.stringify(eventPayload),\r\n+        });\r\n+        const created = await res.json();\r\n+        setEvents([...events, created]);\r\n+      }\r\n+      setOpenEventForm(false);\r\n+      setEditingHour(null);\r\n+      setFormData({ name: '', phone: '', type: 'Point' });\r\n+      setErrors({});\r\n+    } catch (err) {\r\n+      console.error('Save event failed:', err);\r\n+    }\r\n+  };\r\n+\r\n+  const handleDelete = async (hourToDelete) => {\r\n+    if (isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, hourToDelete)) {\r\n+      alert(\"You can't delete events from past date/time.\");\r\n+      return;\r\n+    }\r\n+    const existingEvent = findEventAtHour(hourToDelete);\r\n+    if (!existingEvent) return;\r\n+\r\n+    try {\r\n+      await fetch(`http://localhost:5000/api/events/${existingEvent._id}`, {\r\n+        method: 'DELETE',\r\n+        headers: authHeaders,\r\n+      });\r\n+      setEvents(events.filter(e => e._id !== existingEvent._id));\r\n+      if (editingHour === hourToDelete) {\r\n+        setOpenEventForm(false);\r\n+        setEditingHour(null);\r\n+        setFormData({ name: '', phone: '', type: 'Point' });\r\n+        setErrors({});\r\n+      }\r\n+    } catch (err) {\r\n+      console.error('Delete event failed:', err);\r\n+    }\r\n+  };\r\n+\r\n+  const startEditing = (hour) => {\r\n+    if (isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, hour)) {\r\n+      alert(\"You can't add or modify events for past date/time.\");\r\n+      return;\r\n+    }\r\n+    const ev = findEventAtHour(hour);\r\n+    if (ev) {\r\n+      setFormData({\r\n+        name: ev.name,\r\n+        phone: ev.phone,\r\n+        type: ev.type,\r\n+      });\r\n+    } else {\r\n+      setFormData({ name: '', phone: '', type: 'Point' });\r\n+    }\r\n+    setEditingHour(hour);\r\n+    setErrors({});\r\n+    setOpenEventForm(true);\r\n+  };\r\n+\r\n+  const handleDateClick = (arg) => {\r\n+    const clickedDate = arg.dateStr;\r\n+    const hasEventOnDate = events.some(ev => ev.date.startsWith(clickedDate));\r\n+\r\n+    if (isDateBeforeToday(clickedDate) && !hasEventOnDate) {\r\n+      alert('No events on this past date.');\r\n+      return;\r\n+    }\r\n+\r\n+    setSelectedDay(clickedDate);\r\n+    setOpenDayModal(true);\r\n+    setEditingHour(null);\r\n+    setFormData({ name: '', phone: '', type: 'Point' });\r\n+    setErrors({});\r\n+  };\r\n+\r\n+  return (\r\n+    <>\r\n+      <NavBar\r\n+        email={profile?.email}\r\n+        onLogout={() => {\r\n+          localStorage.removeItem('token');\r\n+          // redirect if needed\r\n+        }}\r\n+      />\r\n+      <Container maxWidth=\"lg\" sx={{ mt: 4 }}>\r\n+        <Box boxShadow={3} p={2} bgcolor=\"white\" borderRadius={2}>\r\n+          <FullCalendar\r\n+            plugins={[dayGridPlugin, interactionPlugin]}\r\n+            initialView=\"dayGridMonth\"\r\n+            selectable={true}\r\n+            events={events}\r\n+            dateClick={handleDateClick}\r\n+          />\r\n+        </Box>\r\n+      </Container>\r\n+\r\n+      <Dialog\r\n+        open={openDayModal}\r\n+        onClose={() => setOpenDayModal(false)}\r\n+        maxWidth=\"lg\"\r\n+        fullWidth\r\n+      >\r\n+        <DialogTitle>Schedule for {selectedDay}</DialogTitle>\r\n+        <DialogContent>\r\n+          <Table>\r\n+            <TableHead>\r\n+              <TableRow>\r\n+                <TableCell>Hour</TableCell>\r\n+                <TableCell>Event Name</TableCell>\r\n+                <TableCell>Customer Name</TableCell>\r\n+                <TableCell>Customer Phone</TableCell>\r\n+                <TableCell>Status</TableCell>\r\n+                <TableCell>Action</TableCell>\r\n+              </TableRow>\r\n+            </TableHead>\r\n+\r\n+            <TableBody>\r\n+              {HOURS.map((hour) => {\r\n+                const ev = findEventAtHour(hour);\r\n+                const isPast = isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, hour);\r\n+\r\n+                return (\r\n+                  <TableRow key={hour}>\r\n+                    <TableCell>{formatHour(hour)}</TableCell>\r\n+                    <TableCell>{ev?.title || ''}</TableCell>\r\n+                    <TableCell>{ev?.name || ''}</TableCell>\r\n+                    <TableCell>{ev?.phone || ''}</TableCell>\r\n+                    <TableCell>\r\n+                      {isPast ? (\r\n+                        <>\r\n+                          {ev ? (\r\n+                            <>\r\n+                              <IconButton size=\"small\" disabled title=\"Modify disabled on past date/time\">\r\n+                                <EditIcon />\r\n+                              </IconButton>\r\n+                              <IconButton size=\"small\" disabled title=\"Delete disabled on past date/time\">\r\n+                                <DeleteIcon />\r\n+                              </IconButton>\r\n+                            </>\r\n+                          ) : (\r\n+                            <IconButton size=\"small\" disabled title=\"Add disabled on past date/time\">\r\n+                              <AddIcon />\r\n+                            </IconButton>\r\n+                          )}\r\n+                        </>\r\n+                      ) : (\r\n+                        <>\r\n+                          <IconButton\r\n+                            color=\"primary\"\r\n+                            size=\"small\"\r\n+                            onClick={() => startEditing(hour)}\r\n+                            title={ev ? 'Modify' : 'Add'}\r\n+                          >\r\n+                            {ev ? <EditIcon /> : <AddIcon />}\r\n+                          </IconButton>\r\n+\r\n+                          {ev && (\r\n+                            <IconButton\r\n+                              color=\"error\"\r\n+                              size=\"small\"\r\n+                              onClick={() => handleDelete(hour)}\r\n+                              title=\"Delete\"\r\n+                            >\r\n+                              <DeleteIcon />\r\n+                            </IconButton>\r\n+                          )}\r\n+                        </>\r\n+                      )}\r\n+                    </TableCell>\r\n+                  </TableRow>\r\n+                );\r\n+              })}\r\n+            </TableBody>\r\n+          </Table>\r\n+        </DialogContent>\r\n+\r\n+        <DialogActions>\r\n+          <Button onClick={() => setOpenDayModal(false)}>Close</Button>\r\n+        </DialogActions>\r\n+      </Dialog>\r\n+\r\n+      <Dialog\r\n+        open={openEventForm}\r\n+        onClose={() => setOpenEventForm(false)}\r\n+        maxWidth=\"sm\"\r\n+        fullWidth\r\n+      >\r\n+        <DialogTitle>\r\n+          {editingHour !== null && findEventAtHour(editingHour)\r\n+            ? 'Modify Event'\r\n+            : 'Add Event'}\r\n+        </DialogTitle>\r\n+        <DialogContent>\r\n+          <Typography variant=\"subtitle1\" gutterBottom>\r\n+            For hour: {editingHour !== null ? formatHour(editingHour) : ''}\r\n+          </Typography>\r\n+\r\n+          <TextField\r\n+            margin=\"dense\"\r\n+            label=\"Customer Name\"\r\n+            fullWidth\r\n+            value={formData.name}\r\n+            onChange={(e) => setFormData({ ...formData, name: e.target.value })}\r\n+            error={!!errors.name}\r\n+            helperText={errors.name}\r\n+          />\r\n+          <TextField\r\n+            margin=\"dense\"\r\n+            label=\"Customer Phone\"\r\n+            fullWidth\r\n+            value={formData.phone}\r\n+            onChange={(e) => setFormData({ ...formData, phone: e.target.value })}\r\n+            error={!!errors.phone}\r\n+            helperText={errors.phone}\r\n+          />\r\n+          <TextField\r\n+            margin=\"dense\"\r\n+            select\r\n+            label=\"Type\"\r\n+            fullWidth\r\n+            value={formData.type}\r\n+            onChange={(e) => setFormData({ ...formData, type: e.target.value })}\r\n+          >\r\n+            <MenuItem value=\"Point\">Point</MenuItem>\r\n+            <MenuItem value=\"Rappel\">Rappel</MenuItem>\r\n+          </TextField>\r\n+        </DialogContent>\r\n+\r\n+        <DialogActions>\r\n+          <Button onClick={() => setOpenEventForm(false)}>Cancel</Button>\r\n+          <Button\r\n+            onClick={handleAddOrUpdate}\r\n+            variant=\"contained\"\r\n+            color=\"primary\"\r\n+          >\r\n+            Save\r\n+          </Button>\r\n+        </DialogActions>\r\n+      </Dialog>\r\n+    </>\r\n+  );\r\n+}\r\n"
                },
                {
                    "date": 1751915272294,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,375 @@\n+import React, { useState, useEffect } from 'react';\r\n+import {\r\n+  Container,\r\n+  Box,\r\n+  Dialog,\r\n+  DialogTitle,\r\n+  DialogContent,\r\n+  DialogActions,\r\n+  Button,\r\n+  TextField,\r\n+  MenuItem,\r\n+  Table,\r\n+  TableHead,\r\n+  TableBody,\r\n+  TableRow,\r\n+  TableCell,\r\n+  Typography,\r\n+  IconButton,\r\n+} from '@mui/material';\r\n+import FullCalendar from '@fullcalendar/react';\r\n+import dayGridPlugin from '@fullcalendar/daygrid';\r\n+import interactionPlugin from '@fullcalendar/interaction';\r\n+import NavBar from '../components/NavBar';\r\n+\r\n+import AddIcon from '@mui/icons-material/Add';\r\n+import EditIcon from '@mui/icons-material/Edit';\r\n+import DeleteIcon from '@mui/icons-material/Delete';\r\n+\r\n+const HOURS = Array.from({ length: 17 }, (_, i) => 8 + i); // 08:00 to 00:00\r\n+\r\n+function formatHour(h) {\r\n+  return h === 24 ? '00:00' : `${h.toString().padStart(2, '0')}:00`;\r\n+}\r\n+\r\n+export default function Dashboard() {\r\n+  const [profile, setProfile] = useState(null);\r\n+  const [events, setEvents] = useState([]);\r\n+  const [selectedDay, setSelectedDay] = useState(null);\r\n+  const [openDayModal, setOpenDayModal] = useState(false);\r\n+\r\n+  const [openEventForm, setOpenEventForm] = useState(false);\r\n+  const [editingHour, setEditingHour] = useState(null);\r\n+  const [formData, setFormData] = useState({ name: '', phone: '', type: 'Point' });\r\n+  const [errors, setErrors] = useState({});\r\n+\r\n+  const token = localStorage.getItem('token');\r\n+  const authHeaders = {\r\n+    Authorization: `Bearer ${token}`,\r\n+    'Content-Type': 'application/json',\r\n+  };\r\n+\r\n+  useEffect(() => {\r\n+    if (!token) return;\r\n+\r\n+    fetch('http://localhost:5000/api/admin/profile', { headers: authHeaders })\r\n+      .then(res => (res.ok ? res.json() : Promise.reject()))\r\n+      .then(setProfile)\r\n+      .catch(() => {\r\n+        localStorage.removeItem('token');\r\n+      });\r\n+\r\n+    fetch('http://localhost:5000/api/events', { headers: authHeaders })\r\n+      .then(res => res.json())\r\n+      .then(setEvents)\r\n+      .catch(console.error);\r\n+  }, [token]);\r\n+\r\n+  const isDateBeforeToday = (dateStr) => {\r\n+    if (!dateStr) return false;\r\n+    const selected = new Date(dateStr);\r\n+    const today = new Date();\r\n+    today.setHours(0, 0, 0, 0);\r\n+    return selected < today;\r\n+  };\r\n+\r\n+  const isHourInPast = (dateStr, hour) => {\r\n+    if (!dateStr) return false;\r\n+    const now = new Date();\r\n+    const selected = new Date(dateStr);\r\n+    selected.setHours(hour, 0, 0, 0);\r\n+    return selected < now;\r\n+  };\r\n+\r\n+  const findEventAtHour = (hour) => {\r\n+    if (!selectedDay) return null;\r\n+    const hourStr = hour === 24 ? '00:00' : formatHour(hour);\r\n+    const prefix = `${selectedDay}T${hourStr}`;\r\n+    return events.find(e => e.date.startsWith(prefix));\r\n+  };\r\n+\r\n+  const validate = () => {\r\n+    const errs = {};\r\n+    if (!formData.name.trim()) errs.name = 'Name is required';\r\n+    if (!formData.phone.trim()) errs.phone = 'Phone is required';\r\n+    else if (!/^\\d{10}$/.test(formData.phone)) errs.phone = 'Phone must be 10 digits';\r\n+    if (!['Point', 'Rappel'].includes(formData.type)) errs.type = 'Invalid type';\r\n+    setErrors(errs);\r\n+    return Object.keys(errs).length === 0;\r\n+  };\r\n+\r\n+  const handleAddOrUpdate = async () => {\r\n+    if (isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, editingHour)) {\r\n+      alert(\"You can't add or modify events for past date/time.\");\r\n+      return;\r\n+    }\r\n+    if (!validate()) return;\r\n+\r\n+    const hourStr = editingHour === 24 ? '00:00' : formatHour(editingHour);\r\n+    const dateTime = `${selectedDay}T${hourStr}:00`;\r\n+\r\n+    const eventPayload = {\r\n+      title: `${formData.type} - ${formData.name}`,\r\n+      date: dateTime,\r\n+      name: formData.name,\r\n+      phone: formData.phone,\r\n+      type: formData.type,\r\n+    };\r\n+\r\n+    try {\r\n+      const existingEvent = findEventAtHour(editingHour);\r\n+      if (existingEvent) {\r\n+        const res = await fetch(`http://localhost:5000/api/events/${existingEvent._id}`, {\r\n+          method: 'PUT',\r\n+          headers: authHeaders,\r\n+          body: JSON.stringify(eventPayload),\r\n+        });\r\n+        const updated = await res.json();\r\n+        setEvents(events.map(e => (e._id === updated._id ? updated : e)));\r\n+      } else {\r\n+        const res = await fetch('http://localhost:5000/api/events', {\r\n+          method: 'POST',\r\n+          headers: authHeaders,\r\n+          body: JSON.stringify(eventPayload),\r\n+        });\r\n+        const created = await res.json();\r\n+        setEvents([...events, created]);\r\n+      }\r\n+      setOpenEventForm(false);\r\n+      setEditingHour(null);\r\n+      setFormData({ name: '', phone: '', type: 'Point' });\r\n+      setErrors({});\r\n+    } catch (err) {\r\n+      console.error('Save event failed:', err);\r\n+    }\r\n+  };\r\n+\r\n+  const handleDelete = async (hourToDelete) => {\r\n+    if (isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, hourToDelete)) {\r\n+      alert(\"You can't delete events from past date/time.\");\r\n+      return;\r\n+    }\r\n+    const existingEvent = findEventAtHour(hourToDelete);\r\n+    if (!existingEvent) return;\r\n+\r\n+    try {\r\n+      await fetch(`http://localhost:5000/api/events/${existingEvent._id}`, {\r\n+        method: 'DELETE',\r\n+        headers: authHeaders,\r\n+      });\r\n+      setEvents(events.filter(e => e._id !== existingEvent._id));\r\n+      if (editingHour === hourToDelete) {\r\n+        setOpenEventForm(false);\r\n+        setEditingHour(null);\r\n+        setFormData({ name: '', phone: '', type: 'Point' });\r\n+        setErrors({});\r\n+      }\r\n+    } catch (err) {\r\n+      console.error('Delete event failed:', err);\r\n+    }\r\n+  };\r\n+\r\n+  const startEditing = (hour) => {\r\n+    if (isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, hour)) {\r\n+      alert(\"You can't add or modify events for past date/time.\");\r\n+      return;\r\n+    }\r\n+    const ev = findEventAtHour(hour);\r\n+    if (ev) {\r\n+      setFormData({\r\n+        name: ev.name,\r\n+        phone: ev.phone,\r\n+        type: ev.type,\r\n+      });\r\n+    } else {\r\n+      setFormData({ name: '', phone: '', type: 'Point' });\r\n+    }\r\n+    setEditingHour(hour);\r\n+    setErrors({});\r\n+    setOpenEventForm(true);\r\n+  };\r\n+\r\n+  const handleDateClick = (arg) => {\r\n+    const clickedDate = arg.dateStr;\r\n+    const hasEventOnDate = events.some(ev => ev.date.startsWith(clickedDate));\r\n+\r\n+    if (isDateBeforeToday(clickedDate) && !hasEventOnDate) {\r\n+      alert('No events on this past date.');\r\n+      return;\r\n+    }\r\n+\r\n+    setSelectedDay(clickedDate);\r\n+    setOpenDayModal(true);\r\n+    setEditingHour(null);\r\n+    setFormData({ name: '', phone: '', type: 'Point' });\r\n+    setErrors({});\r\n+  };\r\n+\r\n+  return (\r\n+    <>\r\n+      <NavBar\r\n+        email={profile?.email}\r\n+        onLogout={() => {\r\n+          localStorage.removeItem('token');\r\n+          // redirect if needed\r\n+        }}\r\n+      />\r\n+      <Container maxWidth=\"lg\" sx={{ mt: 4 }}>\r\n+        <Box boxShadow={3} p={2} bgcolor=\"white\" borderRadius={2}>\r\n+          <FullCalendar\r\n+            plugins={[dayGridPlugin, interactionPlugin]}\r\n+            initialView=\"dayGridMonth\"\r\n+            selectable={true}\r\n+            events={events}\r\n+            dateClick={handleDateClick}\r\n+          />\r\n+        </Box>\r\n+      </Container>\r\n+\r\n+      <Dialog\r\n+        open={openDayModal}\r\n+        onClose={() => setOpenDayModal(false)}\r\n+        maxWidth=\"lg\"\r\n+        fullWidth\r\n+      >\r\n+        <DialogTitle>Schedule for {selectedDay}</DialogTitle>\r\n+        <DialogContent>\r\n+          <Table>\r\n+            <TableHead>\r\n+              <TableRow>\r\n+                <TableCell>Hour</TableCell>\r\n+                <TableCell>Event Name</TableCell>\r\n+                <TableCell>Customer Name</TableCell>\r\n+                <TableCell>Customer Phone</TableCell>\r\n+                <TableCell>Status</TableCell>\r\n+                <TableCell>Action</TableCell>\r\n+              </TableRow>\r\n+            </TableHead>\r\n+\r\n+            <TableBody>\r\n+              {HOURS.map((hour) => {\r\n+                const ev = findEventAtHour(hour);\r\n+                const isPast = isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, hour);\r\n+\r\n+                return (\r\n+                  <TableRow key={hour}>\r\n+                    <TableCell>{formatHour(hour)}</TableCell>\r\n+                    <TableCell>{ev?.title || ''}</TableCell>\r\n+                    <TableCell>{ev?.name || ''}</TableCell>\r\n+                    <TableCell>{ev?.phone || ''}</TableCell>\r\n+                    <TableCell>{ev?.phone || ''}</TableCell>\r\n+                    <TableCell>\r\n+                      {isPast ? (\r\n+                        <>\r\n+                          {ev ? (\r\n+                            <>\r\n+                              <IconButton size=\"small\" disabled title=\"Modify disabled on past date/time\">\r\n+                                <EditIcon />\r\n+                              </IconButton>\r\n+                              <IconButton size=\"small\" disabled title=\"Delete disabled on past date/time\">\r\n+                                <DeleteIcon />\r\n+                              </IconButton>\r\n+                            </>\r\n+                          ) : (\r\n+                            <IconButton size=\"small\" disabled title=\"Add disabled on past date/time\">\r\n+                              <AddIcon />\r\n+                            </IconButton>\r\n+                          )}\r\n+                        </>\r\n+                      ) : (\r\n+                        <>\r\n+                          <IconButton\r\n+                            color=\"primary\"\r\n+                            size=\"small\"\r\n+                            onClick={() => startEditing(hour)}\r\n+                            title={ev ? 'Modify' : 'Add'}\r\n+                          >\r\n+                            {ev ? <EditIcon /> : <AddIcon />}\r\n+                          </IconButton>\r\n+\r\n+                          {ev && (\r\n+                            <IconButton\r\n+                              color=\"error\"\r\n+                              size=\"small\"\r\n+                              onClick={() => handleDelete(hour)}\r\n+                              title=\"Delete\"\r\n+                            >\r\n+                              <DeleteIcon />\r\n+                            </IconButton>\r\n+                          )}\r\n+                        </>\r\n+                      )}\r\n+                    </TableCell>\r\n+                  </TableRow>\r\n+                );\r\n+              })}\r\n+            </TableBody>\r\n+          </Table>\r\n+        </DialogContent>\r\n+\r\n+        <DialogActions>\r\n+          <Button onClick={() => setOpenDayModal(false)}>Close</Button>\r\n+        </DialogActions>\r\n+      </Dialog>\r\n+\r\n+      <Dialog\r\n+        open={openEventForm}\r\n+        onClose={() => setOpenEventForm(false)}\r\n+        maxWidth=\"sm\"\r\n+        fullWidth\r\n+      >\r\n+        <DialogTitle>\r\n+          {editingHour !== null && findEventAtHour(editingHour)\r\n+            ? 'Modify Event'\r\n+            : 'Add Event'}\r\n+        </DialogTitle>\r\n+        <DialogContent>\r\n+          <Typography variant=\"subtitle1\" gutterBottom>\r\n+            For hour: {editingHour !== null ? formatHour(editingHour) : ''}\r\n+          </Typography>\r\n+\r\n+          <TextField\r\n+            margin=\"dense\"\r\n+            label=\"Customer Name\"\r\n+            fullWidth\r\n+            value={formData.name}\r\n+            onChange={(e) => setFormData({ ...formData, name: e.target.value })}\r\n+            error={!!errors.name}\r\n+            helperText={errors.name}\r\n+          />\r\n+          <TextField\r\n+            margin=\"dense\"\r\n+            label=\"Customer Phone\"\r\n+            fullWidth\r\n+            value={formData.phone}\r\n+            onChange={(e) => setFormData({ ...formData, phone: e.target.value })}\r\n+            error={!!errors.phone}\r\n+            helperText={errors.phone}\r\n+          />\r\n+          <TextField\r\n+            margin=\"dense\"\r\n+            select\r\n+            label=\"Type\"\r\n+            fullWidth\r\n+            value={formData.type}\r\n+            onChange={(e) => setFormData({ ...formData, type: e.target.value })}\r\n+          >\r\n+            <MenuItem value=\"Point\">Point</MenuItem>\r\n+            <MenuItem value=\"Rappel\">Rappel</MenuItem>\r\n+          </TextField>\r\n+        </DialogContent>\r\n+\r\n+        <DialogActions>\r\n+          <Button onClick={() => setOpenEventForm(false)}>Cancel</Button>\r\n+          <Button\r\n+            onClick={handleAddOrUpdate}\r\n+            variant=\"contained\"\r\n+            color=\"primary\"\r\n+          >\r\n+            Save\r\n+          </Button>\r\n+        </DialogActions>\r\n+      </Dialog>\r\n+    </>\r\n+  );\r\n+}\r\n"
                },
                {
                    "date": 1751915279502,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -256,9 +256,9 @@\n                     <TableCell>{formatHour(hour)}</TableCell>\r\n                     <TableCell>{ev?.title || ''}</TableCell>\r\n                     <TableCell>{ev?.name || ''}</TableCell>\r\n                     <TableCell>{ev?.phone || ''}</TableCell>\r\n-                    <TableCell>{ev?.phone || ''}</TableCell>\r\n+                    <TableCell>{ev?.status || ''}</TableCell>\r\n                     <TableCell>\r\n                       {isPast ? (\r\n                         <>\r\n                           {ev ? (\r\n@@ -372,2181 +372,4 @@\n       </Dialog>\r\n     </>\r\n   );\r\n }\r\n-import React, { useState, useEffect } from 'react';\r\n-import {\r\n-  Container,\r\n-  Box,\r\n-  Dialog,\r\n-  DialogTitle,\r\n-  DialogContent,\r\n-  DialogActions,\r\n-  Button,\r\n-  TextField,\r\n-  MenuItem,\r\n-  Table,\r\n-  TableHead,\r\n-  TableBody,\r\n-  TableRow,\r\n-  TableCell,\r\n-  Typography,\r\n-  IconButton,\r\n-} from '@mui/material';\r\n-import FullCalendar from '@fullcalendar/react';\r\n-import dayGridPlugin from '@fullcalendar/daygrid';\r\n-import interactionPlugin from '@fullcalendar/interaction';\r\n-import NavBar from '../components/NavBar';\r\n-\r\n-import AddIcon from '@mui/icons-material/Add';\r\n-import EditIcon from '@mui/icons-material/Edit';\r\n-import DeleteIcon from '@mui/icons-material/Delete';\r\n-\r\n-const HOURS = Array.from({ length: 17 }, (_, i) => 8 + i); // 08:00 to 00:00\r\n-\r\n-function formatHour(h) {\r\n-  return h === 24 ? '00:00' : `${h.toString().padStart(2, '0')}:00`;\r\n-}\r\n-\r\n-export default function Dashboard() {\r\n-  const [profile, setProfile] = useState(null);\r\n-  const [events, setEvents] = useState([]);\r\n-  const [selectedDay, setSelectedDay] = useState(null);\r\n-  const [openDayModal, setOpenDayModal] = useState(false);\r\n-\r\n-  const [openEventForm, setOpenEventForm] = useState(false);\r\n-  const [editingHour, setEditingHour] = useState(null);\r\n-  const [formData, setFormData] = useState({ name: '', phone: '', type: 'Point' });\r\n-  const [errors, setErrors] = useState({});\r\n-\r\n-  const token = localStorage.getItem('token');\r\n-  const authHeaders = {\r\n-    Authorization: `Bearer ${token}`,\r\n-    'Content-Type': 'application/json',\r\n-  };\r\n-\r\n-  useEffect(() => {\r\n-    if (!token) return;\r\n-\r\n-    fetch('http://localhost:5000/api/admin/profile', { headers: authHeaders })\r\n-      .then(res => (res.ok ? res.json() : Promise.reject()))\r\n-      .then(setProfile)\r\n-      .catch(() => {\r\n-        localStorage.removeItem('token');\r\n-      });\r\n-\r\n-    fetch('http://localhost:5000/api/events', { headers: authHeaders })\r\n-      .then(res => res.json())\r\n-      .then(setEvents)\r\n-      .catch(console.error);\r\n-  }, [token]);\r\n-\r\n-  const isDateBeforeToday = (dateStr) => {\r\n-    if (!dateStr) return false;\r\n-    const selected = new Date(dateStr);\r\n-    const today = new Date();\r\n-    today.setHours(0, 0, 0, 0);\r\n-    return selected < today;\r\n-  };\r\n-\r\n-  const isHourInPast = (dateStr, hour) => {\r\n-    if (!dateStr) return false;\r\n-    const now = new Date();\r\n-    const selected = new Date(dateStr);\r\n-    selected.setHours(hour, 0, 0, 0);\r\n-    return selected < now;\r\n-  };\r\n-\r\n-  const findEventAtHour = (hour) => {\r\n-    if (!selectedDay) return null;\r\n-    const hourStr = hour === 24 ? '00:00' : formatHour(hour);\r\n-    const prefix = `${selectedDay}T${hourStr}`;\r\n-    return events.find(e => e.date.startsWith(prefix));\r\n-  };\r\n-\r\n-  const validate = () => {\r\n-    const errs = {};\r\n-    if (!formData.name.trim()) errs.name = 'Name is required';\r\n-    if (!formData.phone.trim()) errs.phone = 'Phone is required';\r\n-    else if (!/^\\d{10}$/.test(formData.phone)) errs.phone = 'Phone must be 10 digits';\r\n-    if (!['Point', 'Rappel'].includes(formData.type)) errs.type = 'Invalid type';\r\n-    setErrors(errs);\r\n-    return Object.keys(errs).length === 0;\r\n-  };\r\n-\r\n-  const handleAddOrUpdate = async () => {\r\n-    if (isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, editingHour)) {\r\n-      alert(\"You can't add or modify events for past date/time.\");\r\n-      return;\r\n-    }\r\n-    if (!validate()) return;\r\n-\r\n-    const hourStr = editingHour === 24 ? '00:00' : formatHour(editingHour);\r\n-    const dateTime = `${selectedDay}T${hourStr}:00`;\r\n-\r\n-    const eventPayload = {\r\n-      title: `${formData.type} - ${formData.name}`,\r\n-      date: dateTime,\r\n-      name: formData.name,\r\n-      phone: formData.phone,\r\n-      type: formData.type,\r\n-    };\r\n-\r\n-    try {\r\n-      const existingEvent = findEventAtHour(editingHour);\r\n-      if (existingEvent) {\r\n-        const res = await fetch(`http://localhost:5000/api/events/${existingEvent._id}`, {\r\n-          method: 'PUT',\r\n-          headers: authHeaders,\r\n-          body: JSON.stringify(eventPayload),\r\n-        });\r\n-        const updated = await res.json();\r\n-        setEvents(events.map(e => (e._id === updated._id ? updated : e)));\r\n-      } else {\r\n-        const res = await fetch('http://localhost:5000/api/events', {\r\n-          method: 'POST',\r\n-          headers: authHeaders,\r\n-          body: JSON.stringify(eventPayload),\r\n-        });\r\n-        const created = await res.json();\r\n-        setEvents([...events, created]);\r\n-      }\r\n-      setOpenEventForm(false);\r\n-      setEditingHour(null);\r\n-      setFormData({ name: '', phone: '', type: 'Point' });\r\n-      setErrors({});\r\n-    } catch (err) {\r\n-      console.error('Save event failed:', err);\r\n-    }\r\n-  };\r\n-\r\n-  const handleDelete = async (hourToDelete) => {\r\n-    if (isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, hourToDelete)) {\r\n-      alert(\"You can't delete events from past date/time.\");\r\n-      return;\r\n-    }\r\n-    const existingEvent = findEventAtHour(hourToDelete);\r\n-    if (!existingEvent) return;\r\n-\r\n-    try {\r\n-      await fetch(`http://localhost:5000/api/events/${existingEvent._id}`, {\r\n-        method: 'DELETE',\r\n-        headers: authHeaders,\r\n-      });\r\n-      setEvents(events.filter(e => e._id !== existingEvent._id));\r\n-      if (editingHour === hourToDelete) {\r\n-        setOpenEventForm(false);\r\n-        setEditingHour(null);\r\n-        setFormData({ name: '', phone: '', type: 'Point' });\r\n-        setErrors({});\r\n-      }\r\n-    } catch (err) {\r\n-      console.error('Delete event failed:', err);\r\n-    }\r\n-  };\r\n-\r\n-  const startEditing = (hour) => {\r\n-    if (isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, hour)) {\r\n-      alert(\"You can't add or modify events for past date/time.\");\r\n-      return;\r\n-    }\r\n-    const ev = findEventAtHour(hour);\r\n-    if (ev) {\r\n-      setFormData({\r\n-        name: ev.name,\r\n-        phone: ev.phone,\r\n-        type: ev.type,\r\n-      });\r\n-    } else {\r\n-      setFormData({ name: '', phone: '', type: 'Point' });\r\n-    }\r\n-    setEditingHour(hour);\r\n-    setErrors({});\r\n-    setOpenEventForm(true);\r\n-  };\r\n-\r\n-  const handleDateClick = (arg) => {\r\n-    const clickedDate = arg.dateStr;\r\n-    const hasEventOnDate = events.some(ev => ev.date.startsWith(clickedDate));\r\n-\r\n-    if (isDateBeforeToday(clickedDate) && !hasEventOnDate) {\r\n-      alert('No events on this past date.');\r\n-      return;\r\n-    }\r\n-\r\n-    setSelectedDay(clickedDate);\r\n-    setOpenDayModal(true);\r\n-    setEditingHour(null);\r\n-    setFormData({ name: '', phone: '', type: 'Point' });\r\n-    setErrors({});\r\n-  };\r\n-\r\n-  return (\r\n-    <>\r\n-      <NavBar\r\n-        email={profile?.email}\r\n-        onLogout={() => {\r\n-          localStorage.removeItem('token');\r\n-          // redirect if needed\r\n-        }}\r\n-      />\r\n-      <Container maxWidth=\"lg\" sx={{ mt: 4 }}>\r\n-        <Box boxShadow={3} p={2} bgcolor=\"white\" borderRadius={2}>\r\n-          <FullCalendar\r\n-            plugins={[dayGridPlugin, interactionPlugin]}\r\n-            initialView=\"dayGridMonth\"\r\n-            selectable={true}\r\n-            events={events}\r\n-            dateClick={handleDateClick}\r\n-          />\r\n-        </Box>\r\n-      </Container>\r\n-\r\n-      <Dialog\r\n-        open={openDayModal}\r\n-        onClose={() => setOpenDayModal(false)}\r\n-        maxWidth=\"lg\"\r\n-        fullWidth\r\n-      >\r\n-        <DialogTitle>Schedule for {selectedDay}</DialogTitle>\r\n-        <DialogContent>\r\n-          <Table>\r\n-            <TableHead>\r\n-              <TableRow>\r\n-                <TableCell>Hour</TableCell>\r\n-                <TableCell>Event Name</TableCell>\r\n-                <TableCell>Customer Name</TableCell>\r\n-                <TableCell>Customer Phone</TableCell>\r\n-                <TableCell>Status</TableCell>\r\n-                <TableCell>Action</TableCell>\r\n-              </TableRow>\r\n-            </TableHead>\r\n-\r\n-            <TableBody>\r\n-              {HOURS.map((hour) => {\r\n-                const ev = findEventAtHour(hour);\r\n-                const isPast = isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, hour);\r\n-\r\n-                return (\r\n-                  <TableRow key={hour}>\r\n-                    <TableCell>{formatHour(hour)}</TableCell>\r\n-                    <TableCell>{ev?.title || ''}</TableCell>\r\n-                    <TableCell>{ev?.name || ''}</TableCell>\r\n-                    <TableCell>{ev?.phone || ''}</TableCell>\r\n-                    <TableCell>\r\n-                      {isPast ? (\r\n-                        <>\r\n-                          {ev ? (\r\n-                            <>\r\n-                              <IconButton size=\"small\" disabled title=\"Modify disabled on past date/time\">\r\n-                                <EditIcon />\r\n-                              </IconButton>\r\n-                              <IconButton size=\"small\" disabled title=\"Delete disabled on past date/time\">\r\n-                                <DeleteIcon />\r\n-                              </IconButton>\r\n-                            </>\r\n-                          ) : (\r\n-                            <IconButton size=\"small\" disabled title=\"Add disabled on past date/time\">\r\n-                              <AddIcon />\r\n-                            </IconButton>\r\n-                          )}\r\n-                        </>\r\n-                      ) : (\r\n-                        <>\r\n-                          <IconButton\r\n-                            color=\"primary\"\r\n-                            size=\"small\"\r\n-                            onClick={() => startEditing(hour)}\r\n-                            title={ev ? 'Modify' : 'Add'}\r\n-                          >\r\n-                            {ev ? <EditIcon /> : <AddIcon />}\r\n-                          </IconButton>\r\n-\r\n-                          {ev && (\r\n-                            <IconButton\r\n-                              color=\"error\"\r\n-                              size=\"small\"\r\n-                              onClick={() => handleDelete(hour)}\r\n-                              title=\"Delete\"\r\n-                            >\r\n-                              <DeleteIcon />\r\n-                            </IconButton>\r\n-                          )}\r\n-                        </>\r\n-                      )}\r\n-                    </TableCell>\r\n-                  </TableRow>\r\n-                );\r\n-              })}\r\n-            </TableBody>\r\n-          </Table>\r\n-        </DialogContent>\r\n-\r\n-        <DialogActions>\r\n-          <Button onClick={() => setOpenDayModal(false)}>Close</Button>\r\n-        </DialogActions>\r\n-      </Dialog>\r\n-\r\n-      <Dialog\r\n-        open={openEventForm}\r\n-        onClose={() => setOpenEventForm(false)}\r\n-        maxWidth=\"sm\"\r\n-        fullWidth\r\n-      >\r\n-        <DialogTitle>\r\n-          {editingHour !== null && findEventAtHour(editingHour)\r\n-            ? 'Modify Event'\r\n-            : 'Add Event'}\r\n-        </DialogTitle>\r\n-        <DialogContent>\r\n-          <Typography variant=\"subtitle1\" gutterBottom>\r\n-            For hour: {editingHour !== null ? formatHour(editingHour) : ''}\r\n-          </Typography>\r\n-\r\n-          <TextField\r\n-            margin=\"dense\"\r\n-            label=\"Customer Name\"\r\n-            fullWidth\r\n-            value={formData.name}\r\n-            onChange={(e) => setFormData({ ...formData, name: e.target.value })}\r\n-            error={!!errors.name}\r\n-            helperText={errors.name}\r\n-          />\r\n-          <TextField\r\n-            margin=\"dense\"\r\n-            label=\"Customer Phone\"\r\n-            fullWidth\r\n-            value={formData.phone}\r\n-            onChange={(e) => setFormData({ ...formData, phone: e.target.value })}\r\n-            error={!!errors.phone}\r\n-            helperText={errors.phone}\r\n-          />\r\n-          <TextField\r\n-            margin=\"dense\"\r\n-            select\r\n-            label=\"Type\"\r\n-            fullWidth\r\n-            value={formData.type}\r\n-            onChange={(e) => setFormData({ ...formData, type: e.target.value })}\r\n-          >\r\n-            <MenuItem value=\"Point\">Point</MenuItem>\r\n-            <MenuItem value=\"Rappel\">Rappel</MenuItem>\r\n-          </TextField>\r\n-        </DialogContent>\r\n-\r\n-        <DialogActions>\r\n-          <Button onClick={() => setOpenEventForm(false)}>Cancel</Button>\r\n-          <Button\r\n-            onClick={handleAddOrUpdate}\r\n-            variant=\"contained\"\r\n-            color=\"primary\"\r\n-          >\r\n-            Save\r\n-          </Button>\r\n-        </DialogActions>\r\n-      </Dialog>\r\n-    </>\r\n-  );\r\n-}\r\n-import React, { useState, useEffect } from 'react';\r\n-import {\r\n-  Container,\r\n-  Box,\r\n-  Dialog,\r\n-  DialogTitle,\r\n-  DialogContent,\r\n-  DialogActions,\r\n-  Button,\r\n-  TextField,\r\n-  MenuItem,\r\n-  Table,\r\n-  TableHead,\r\n-  TableBody,\r\n-  TableRow,\r\n-  TableCell,\r\n-  Typography,\r\n-  IconButton,\r\n-} from '@mui/material';\r\n-import FullCalendar from '@fullcalendar/react';\r\n-import dayGridPlugin from '@fullcalendar/daygrid';\r\n-import interactionPlugin from '@fullcalendar/interaction';\r\n-import NavBar from '../components/NavBar';\r\n-\r\n-import AddIcon from '@mui/icons-material/Add';\r\n-import EditIcon from '@mui/icons-material/Edit';\r\n-import DeleteIcon from '@mui/icons-material/Delete';\r\n-\r\n-const HOURS = Array.from({ length: 17 }, (_, i) => 8 + i); // 08:00 to 00:00\r\n-\r\n-function formatHour(h) {\r\n-  return h === 24 ? '00:00' : `${h.toString().padStart(2, '0')}:00`;\r\n-}\r\n-\r\n-export default function Dashboard() {\r\n-  const [profile, setProfile] = useState(null);\r\n-  const [events, setEvents] = useState([]);\r\n-  const [selectedDay, setSelectedDay] = useState(null);\r\n-  const [openDayModal, setOpenDayModal] = useState(false);\r\n-\r\n-  const [openEventForm, setOpenEventForm] = useState(false);\r\n-  const [editingHour, setEditingHour] = useState(null);\r\n-  const [formData, setFormData] = useState({ name: '', phone: '', type: 'Point' });\r\n-  const [errors, setErrors] = useState({});\r\n-\r\n-  const token = localStorage.getItem('token');\r\n-  const authHeaders = {\r\n-    Authorization: `Bearer ${token}`,\r\n-    'Content-Type': 'application/json',\r\n-  };\r\n-\r\n-  useEffect(() => {\r\n-    if (!token) return;\r\n-\r\n-    fetch('http://localhost:5000/api/admin/profile', { headers: authHeaders })\r\n-      .then(res => (res.ok ? res.json() : Promise.reject()))\r\n-      .then(setProfile)\r\n-      .catch(() => {\r\n-        localStorage.removeItem('token');\r\n-      });\r\n-\r\n-    fetch('http://localhost:5000/api/events', { headers: authHeaders })\r\n-      .then(res => res.json())\r\n-      .then(setEvents)\r\n-      .catch(console.error);\r\n-  }, [token]);\r\n-\r\n-  const isDateBeforeToday = (dateStr) => {\r\n-    if (!dateStr) return false;\r\n-    const selected = new Date(dateStr);\r\n-    const today = new Date();\r\n-    today.setHours(0, 0, 0, 0);\r\n-    return selected < today;\r\n-  };\r\n-\r\n-  const isHourInPast = (dateStr, hour) => {\r\n-    if (!dateStr) return false;\r\n-    const now = new Date();\r\n-    const selected = new Date(dateStr);\r\n-    selected.setHours(hour, 0, 0, 0);\r\n-    return selected < now;\r\n-  };\r\n-\r\n-  const findEventAtHour = (hour) => {\r\n-    if (!selectedDay) return null;\r\n-    const hourStr = hour === 24 ? '00:00' : formatHour(hour);\r\n-    const prefix = `${selectedDay}T${hourStr}`;\r\n-    return events.find(e => e.date.startsWith(prefix));\r\n-  };\r\n-\r\n-  const validate = () => {\r\n-    const errs = {};\r\n-    if (!formData.name.trim()) errs.name = 'Name is required';\r\n-    if (!formData.phone.trim()) errs.phone = 'Phone is required';\r\n-    else if (!/^\\d{10}$/.test(formData.phone)) errs.phone = 'Phone must be 10 digits';\r\n-    if (!['Point', 'Rappel'].includes(formData.type)) errs.type = 'Invalid type';\r\n-    setErrors(errs);\r\n-    return Object.keys(errs).length === 0;\r\n-  };\r\n-\r\n-  const handleAddOrUpdate = async () => {\r\n-    if (isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, editingHour)) {\r\n-      alert(\"You can't add or modify events for past date/time.\");\r\n-      return;\r\n-    }\r\n-    if (!validate()) return;\r\n-\r\n-    const hourStr = editingHour === 24 ? '00:00' : formatHour(editingHour);\r\n-    const dateTime = `${selectedDay}T${hourStr}:00`;\r\n-\r\n-    const eventPayload = {\r\n-      title: `${formData.type} - ${formData.name}`,\r\n-      date: dateTime,\r\n-      name: formData.name,\r\n-      phone: formData.phone,\r\n-      type: formData.type,\r\n-    };\r\n-\r\n-    try {\r\n-      const existingEvent = findEventAtHour(editingHour);\r\n-      if (existingEvent) {\r\n-        const res = await fetch(`http://localhost:5000/api/events/${existingEvent._id}`, {\r\n-          method: 'PUT',\r\n-          headers: authHeaders,\r\n-          body: JSON.stringify(eventPayload),\r\n-        });\r\n-        const updated = await res.json();\r\n-        setEvents(events.map(e => (e._id === updated._id ? updated : e)));\r\n-      } else {\r\n-        const res = await fetch('http://localhost:5000/api/events', {\r\n-          method: 'POST',\r\n-          headers: authHeaders,\r\n-          body: JSON.stringify(eventPayload),\r\n-        });\r\n-        const created = await res.json();\r\n-        setEvents([...events, created]);\r\n-      }\r\n-      setOpenEventForm(false);\r\n-      setEditingHour(null);\r\n-      setFormData({ name: '', phone: '', type: 'Point' });\r\n-      setErrors({});\r\n-    } catch (err) {\r\n-      console.error('Save event failed:', err);\r\n-    }\r\n-  };\r\n-\r\n-  const handleDelete = async (hourToDelete) => {\r\n-    if (isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, hourToDelete)) {\r\n-      alert(\"You can't delete events from past date/time.\");\r\n-      return;\r\n-    }\r\n-    const existingEvent = findEventAtHour(hourToDelete);\r\n-    if (!existingEvent) return;\r\n-\r\n-    try {\r\n-      await fetch(`http://localhost:5000/api/events/${existingEvent._id}`, {\r\n-        method: 'DELETE',\r\n-        headers: authHeaders,\r\n-      });\r\n-      setEvents(events.filter(e => e._id !== existingEvent._id));\r\n-      if (editingHour === hourToDelete) {\r\n-        setOpenEventForm(false);\r\n-        setEditingHour(null);\r\n-        setFormData({ name: '', phone: '', type: 'Point' });\r\n-        setErrors({});\r\n-      }\r\n-    } catch (err) {\r\n-      console.error('Delete event failed:', err);\r\n-    }\r\n-  };\r\n-\r\n-  const startEditing = (hour) => {\r\n-    if (isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, hour)) {\r\n-      alert(\"You can't add or modify events for past date/time.\");\r\n-      return;\r\n-    }\r\n-    const ev = findEventAtHour(hour);\r\n-    if (ev) {\r\n-      setFormData({\r\n-        name: ev.name,\r\n-        phone: ev.phone,\r\n-        type: ev.type,\r\n-      });\r\n-    } else {\r\n-      setFormData({ name: '', phone: '', type: 'Point' });\r\n-    }\r\n-    setEditingHour(hour);\r\n-    setErrors({});\r\n-    setOpenEventForm(true);\r\n-  };\r\n-\r\n-  const handleDateClick = (arg) => {\r\n-    const clickedDate = arg.dateStr;\r\n-    const hasEventOnDate = events.some(ev => ev.date.startsWith(clickedDate));\r\n-\r\n-    if (isDateBeforeToday(clickedDate) && !hasEventOnDate) {\r\n-      alert('No events on this past date.');\r\n-      return;\r\n-    }\r\n-\r\n-    setSelectedDay(clickedDate);\r\n-    setOpenDayModal(true);\r\n-    setEditingHour(null);\r\n-    setFormData({ name: '', phone: '', type: 'Point' });\r\n-    setErrors({});\r\n-  };\r\n-\r\n-  return (\r\n-    <>\r\n-      <NavBar\r\n-        email={profile?.email}\r\n-        onLogout={() => {\r\n-          localStorage.removeItem('token');\r\n-          // redirect if needed\r\n-        }}\r\n-      />\r\n-      <Container maxWidth=\"lg\" sx={{ mt: 4 }}>\r\n-        <Box boxShadow={3} p={2} bgcolor=\"white\" borderRadius={2}>\r\n-          <FullCalendar\r\n-            plugins={[dayGridPlugin, interactionPlugin]}\r\n-            initialView=\"dayGridMonth\"\r\n-            selectable={true}\r\n-            events={events}\r\n-            dateClick={handleDateClick}\r\n-          />\r\n-        </Box>\r\n-      </Container>\r\n-\r\n-      <Dialog\r\n-        open={openDayModal}\r\n-        onClose={() => setOpenDayModal(false)}\r\n-        maxWidth=\"lg\"\r\n-        fullWidth\r\n-      >\r\n-        <DialogTitle>Schedule for {selectedDay}</DialogTitle>\r\n-        <DialogContent>\r\n-          <Table>\r\n-            <TableHead>\r\n-              <TableRow>\r\n-                <TableCell>Hour</TableCell>\r\n-                <TableCell>Event Name</TableCell>\r\n-                <TableCell>Customer Name</TableCell>\r\n-                <TableCell>Customer Phone</TableCell>\r\n-                \r\n-                <TableCell>Action</TableCell>\r\n-              </TableRow>\r\n-            </TableHead>\r\n-\r\n-            <TableBody>\r\n-              {HOURS.map((hour) => {\r\n-                const ev = findEventAtHour(hour);\r\n-                const isPast = isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, hour);\r\n-\r\n-                return (\r\n-                  <TableRow key={hour}>\r\n-                    <TableCell>{formatHour(hour)}</TableCell>\r\n-                    <TableCell>{ev?.title || ''}</TableCell>\r\n-                    <TableCell>{ev?.name || ''}</TableCell>\r\n-                    <TableCell>{ev?.phone || ''}</TableCell>\r\n-                    <TableCell>\r\n-                      {isPast ? (\r\n-                        <>\r\n-                          {ev ? (\r\n-                            <>\r\n-                              <IconButton size=\"small\" disabled title=\"Modify disabled on past date/time\">\r\n-                                <EditIcon />\r\n-                              </IconButton>\r\n-                              <IconButton size=\"small\" disabled title=\"Delete disabled on past date/time\">\r\n-                                <DeleteIcon />\r\n-                              </IconButton>\r\n-                            </>\r\n-                          ) : (\r\n-                            <IconButton size=\"small\" disabled title=\"Add disabled on past date/time\">\r\n-                              <AddIcon />\r\n-                            </IconButton>\r\n-                          )}\r\n-                        </>\r\n-                      ) : (\r\n-                        <>\r\n-                          <IconButton\r\n-                            color=\"primary\"\r\n-                            size=\"small\"\r\n-                            onClick={() => startEditing(hour)}\r\n-                            title={ev ? 'Modify' : 'Add'}\r\n-                          >\r\n-                            {ev ? <EditIcon /> : <AddIcon />}\r\n-                          </IconButton>\r\n-\r\n-                          {ev && (\r\n-                            <IconButton\r\n-                              color=\"error\"\r\n-                              size=\"small\"\r\n-                              onClick={() => handleDelete(hour)}\r\n-                              title=\"Delete\"\r\n-                            >\r\n-                              <DeleteIcon />\r\n-                            </IconButton>\r\n-                          )}\r\n-                        </>\r\n-                      )}\r\n-                    </TableCell>\r\n-                  </TableRow>\r\n-                );\r\n-              })}\r\n-            </TableBody>\r\n-          </Table>\r\n-        </DialogContent>\r\n-\r\n-        <DialogActions>\r\n-          <Button onClick={() => setOpenDayModal(false)}>Close</Button>\r\n-        </DialogActions>\r\n-      </Dialog>\r\n-\r\n-      <Dialog\r\n-        open={openEventForm}\r\n-        onClose={() => setOpenEventForm(false)}\r\n-        maxWidth=\"sm\"\r\n-        fullWidth\r\n-      >\r\n-        <DialogTitle>\r\n-          {editingHour !== null && findEventAtHour(editingHour)\r\n-            ? 'Modify Event'\r\n-            : 'Add Event'}\r\n-        </DialogTitle>\r\n-        <DialogContent>\r\n-          <Typography variant=\"subtitle1\" gutterBottom>\r\n-            For hour: {editingHour !== null ? formatHour(editingHour) : ''}\r\n-          </Typography>\r\n-\r\n-          <TextField\r\n-            margin=\"dense\"\r\n-            label=\"Customer Name\"\r\n-            fullWidth\r\n-            value={formData.name}\r\n-            onChange={(e) => setFormData({ ...formData, name: e.target.value })}\r\n-            error={!!errors.name}\r\n-            helperText={errors.name}\r\n-          />\r\n-          <TextField\r\n-            margin=\"dense\"\r\n-            label=\"Customer Phone\"\r\n-            fullWidth\r\n-            value={formData.phone}\r\n-            onChange={(e) => setFormData({ ...formData, phone: e.target.value })}\r\n-            error={!!errors.phone}\r\n-            helperText={errors.phone}\r\n-          />\r\n-          <TextField\r\n-            margin=\"dense\"\r\n-            select\r\n-            label=\"Type\"\r\n-            fullWidth\r\n-            value={formData.type}\r\n-            onChange={(e) => setFormData({ ...formData, type: e.target.value })}\r\n-          >\r\n-            <MenuItem value=\"Point\">Point</MenuItem>\r\n-            <MenuItem value=\"Rappel\">Rappel</MenuItem>\r\n-          </TextField>\r\n-        </DialogContent>\r\n-\r\n-        <DialogActions>\r\n-          <Button onClick={() => setOpenEventForm(false)}>Cancel</Button>\r\n-          <Button\r\n-            onClick={handleAddOrUpdate}\r\n-            variant=\"contained\"\r\n-            color=\"primary\"\r\n-          >\r\n-            Save\r\n-          </Button>\r\n-        </DialogActions>\r\n-      </Dialog>\r\n-    </>\r\n-  );\r\n-}\r\n-      </Dialog>\r\n-    </>\r\n-  );\r\n-}\r\n-import React, { useState, useEffect } from 'react';\r\n-import {\r\n-  Container,\r\n-  Box,\r\n-  Dialog,\r\n-  DialogTitle,\r\n-  DialogContent,\r\n-  DialogActions,\r\n-  Button,\r\n-  TextField,\r\n-  MenuItem,\r\n-  Table,\r\n-  TableHead,\r\n-  TableBody,\r\n-  TableRow,\r\n-  TableCell,\r\n-  Typography,\r\n-  IconButton,\r\n-} from '@mui/material';\r\n-import FullCalendar from '@fullcalendar/react';\r\n-import dayGridPlugin from '@fullcalendar/daygrid';\r\n-import interactionPlugin from '@fullcalendar/interaction';\r\n-import NavBar from '../components/NavBar';\r\n-\r\n-import AddIcon from '@mui/icons-material/Add';\r\n-import EditIcon from '@mui/icons-material/Edit';\r\n-import DeleteIcon from '@mui/icons-material/Delete';\r\n-\r\n-const HOURS = Array.from({ length: 17 }, (_, i) => 8 + i); // 08:00 to 00:00\r\n-\r\n-function formatHour(h) {\r\n-  return h === 24 ? '00:00' : `${h.toString().padStart(2, '0')}:00`;\r\n-}\r\n-\r\n-export default function Dashboard() {\r\n-  const [profile, setProfile] = useState(null);\r\n-  const [events, setEvents] = useState([]);\r\n-  const [selectedDay, setSelectedDay] = useState(null);\r\n-  const [openDayModal, setOpenDayModal] = useState(false);\r\n-\r\n-  const [openEventForm, setOpenEventForm] = useState(false);\r\n-  const [editingHour, setEditingHour] = useState(null);\r\n-  const [formData, setFormData] = useState({ name: '', phone: '', type: 'Point' });\r\n-  const [errors, setErrors] = useState({});\r\n-\r\n-  const token = localStorage.getItem('token');\r\n-  const authHeaders = {\r\n-    Authorization: `Bearer ${token}`,\r\n-    'Content-Type': 'application/json',\r\n-  };\r\n-\r\n-  useEffect(() => {\r\n-    if (!token) return;\r\n-\r\n-    fetch('http://localhost:5000/api/admin/profile', { headers: authHeaders })\r\n-      .then(res => (res.ok ? res.json() : Promise.reject()))\r\n-      .then(setProfile)\r\n-      .catch(() => {\r\n-        localStorage.removeItem('token');\r\n-      });\r\n-\r\n-    fetch('http://localhost:5000/api/events', { headers: authHeaders })\r\n-      .then(res => res.json())\r\n-      .then(setEvents)\r\n-      .catch(console.error);\r\n-  }, [token]);\r\n-\r\n-  const isDateBeforeToday = (dateStr) => {\r\n-    if (!dateStr) return false;\r\n-    const selected = new Date(dateStr);\r\n-    const today = new Date();\r\n-    today.setHours(0, 0, 0, 0);\r\n-    return selected < today;\r\n-  };\r\n-\r\n-  const isHourInPast = (dateStr, hour) => {\r\n-    if (!dateStr) return false;\r\n-    const now = new Date();\r\n-    const selected = new Date(dateStr);\r\n-    selected.setHours(hour, 0, 0, 0);\r\n-    return selected < now;\r\n-  };\r\n-\r\n-  const findEventAtHour = (hour) => {\r\n-    if (!selectedDay) return null;\r\n-    const hourStr = hour === 24 ? '00:00' : formatHour(hour);\r\n-    const prefix = `${selectedDay}T${hourStr}`;\r\n-    return events.find(e => e.date.startsWith(prefix));\r\n-  };\r\n-\r\n-  const validate = () => {\r\n-    const errs = {};\r\n-    if (!formData.name.trim()) errs.name = 'Name is required';\r\n-    if (!formData.phone.trim()) errs.phone = 'Phone is required';\r\n-    else if (!/^\\d{10}$/.test(formData.phone)) errs.phone = 'Phone must be 10 digits';\r\n-    if (!['Point', 'Rappel'].includes(formData.type)) errs.type = 'Invalid type';\r\n-    setErrors(errs);\r\n-    return Object.keys(errs).length === 0;\r\n-  };\r\n-\r\n-  const handleAddOrUpdate = async () => {\r\n-    if (isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, editingHour)) {\r\n-      alert(\"You can't add or modify events for past date/time.\");\r\n-      return;\r\n-    }\r\n-    if (!validate()) return;\r\n-\r\n-    const hourStr = editingHour === 24 ? '00:00' : formatHour(editingHour);\r\n-    const dateTime = `${selectedDay}T${hourStr}:00`;\r\n-\r\n-    const eventPayload = {\r\n-      title: `${formData.type} - ${formData.name}`,\r\n-      date: dateTime,\r\n-      name: formData.name,\r\n-      phone: formData.phone,\r\n-      type: formData.type,\r\n-    };\r\n-\r\n-    try {\r\n-      const existingEvent = findEventAtHour(editingHour);\r\n-      if (existingEvent) {\r\n-        const res = await fetch(`http://localhost:5000/api/events/${existingEvent._id}`, {\r\n-          method: 'PUT',\r\n-          headers: authHeaders,\r\n-          body: JSON.stringify(eventPayload),\r\n-        });\r\n-        const updated = await res.json();\r\n-        setEvents(events.map(e => (e._id === updated._id ? updated : e)));\r\n-      } else {\r\n-        const res = await fetch('http://localhost:5000/api/events', {\r\n-          method: 'POST',\r\n-          headers: authHeaders,\r\n-          body: JSON.stringify(eventPayload),\r\n-        });\r\n-        const created = await res.json();\r\n-        setEvents([...events, created]);\r\n-      }\r\n-      setOpenEventForm(false);\r\n-      setEditingHour(null);\r\n-      setFormData({ name: '', phone: '', type: 'Point' });\r\n-      setErrors({});\r\n-    } catch (err) {\r\n-      console.error('Save event failed:', err);\r\n-    }\r\n-  };\r\n-\r\n-  const handleDelete = async (hourToDelete) => {\r\n-    if (isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, hourToDelete)) {\r\n-      alert(\"You can't delete events from past date/time.\");\r\n-      return;\r\n-    }\r\n-    const existingEvent = findEventAtHour(hourToDelete);\r\n-    if (!existingEvent) return;\r\n-\r\n-    try {\r\n-      await fetch(`http://localhost:5000/api/events/${existingEvent._id}`, {\r\n-        method: 'DELETE',\r\n-        headers: authHeaders,\r\n-      });\r\n-      setEvents(events.filter(e => e._id !== existingEvent._id));\r\n-      if (editingHour === hourToDelete) {\r\n-        setOpenEventForm(false);\r\n-        setEditingHour(null);\r\n-        setFormData({ name: '', phone: '', type: 'Point' });\r\n-        setErrors({});\r\n-      }\r\n-    } catch (err) {\r\n-      console.error('Delete event failed:', err);\r\n-    }\r\n-  };\r\n-\r\n-  const startEditing = (hour) => {\r\n-    if (isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, hour)) {\r\n-      alert(\"You can't add or modify events for past date/time.\");\r\n-      return;\r\n-    }\r\n-    const ev = findEventAtHour(hour);\r\n-    if (ev) {\r\n-      setFormData({\r\n-        name: ev.name,\r\n-        phone: ev.phone,\r\n-        type: ev.type,\r\n-      });\r\n-    } else {\r\n-      setFormData({ name: '', phone: '', type: 'Point' });\r\n-    }\r\n-    setEditingHour(hour);\r\n-    setErrors({});\r\n-    setOpenEventForm(true);\r\n-  };\r\n-\r\n-  const handleDateClick = (arg) => {\r\n-    const clickedDate = arg.dateStr;\r\n-    const hasEventOnDate = events.some(ev => ev.date.startsWith(clickedDate));\r\n-\r\n-    if (isDateBeforeToday(clickedDate) && !hasEventOnDate) {\r\n-      alert('No events on this past date.');\r\n-      return;\r\n-    }\r\n-\r\n-    setSelectedDay(clickedDate);\r\n-    setOpenDayModal(true);\r\n-    setEditingHour(null);\r\n-    setFormData({ name: '', phone: '', type: 'Point' });\r\n-    setErrors({});\r\n-  };\r\n-\r\n-  return (\r\n-    <>\r\n-      <NavBar\r\n-        email={profile?.email}\r\n-        onLogout={() => {\r\n-          localStorage.removeItem('token');\r\n-          // redirect if needed\r\n-        }}\r\n-      />\r\n-      <Container maxWidth=\"lg\" sx={{ mt: 4 }}>\r\n-        <Box boxShadow={3} p={2} bgcolor=\"white\" borderRadius={2}>\r\n-          <FullCalendar\r\n-            plugins={[dayGridPlugin, interactionPlugin]}\r\n-            initialView=\"dayGridMonth\"\r\n-            selectable={true}\r\n-            events={events}\r\n-            dateClick={handleDateClick}\r\n-          />\r\n-        </Box>\r\n-      </Container>\r\n-\r\n-      <Dialog\r\n-        open={openDayModal}\r\n-        onClose={() => setOpenDayModal(false)}\r\n-        maxWidth=\"lg\"\r\n-        fullWidth\r\n-      >\r\n-        <DialogTitle>Schedule for {selectedDay}</DialogTitle>\r\n-        <DialogContent>\r\n-          <Table>\r\n-            <TableHead>\r\n-              <TableRow>\r\n-                <TableCell>Hour</TableCell>\r\n-                <TableCell>Event Name</TableCell>\r\n-                <TableCell>Customer Name</TableCell>\r\n-                <TableCell>Customer Phone</TableCell>\r\n-                <TableCell>Action</TableCell>\r\n-              </TableRow>\r\n-            </TableHead>\r\n-\r\n-            <TableBody>\r\n-              {HOURS.map((hour) => {\r\n-                const ev = findEventAtHour(hour);\r\n-                const isPast = isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, hour);\r\n-\r\n-                return (\r\n-                  <TableRow key={hour}>\r\n-                    <TableCell>{formatHour(hour)}</TableCell>\r\n-                    <TableCell>{ev?.title || ''}</TableCell>\r\n-                    <TableCell>{ev?.name || ''}</TableCell>\r\n-                    <TableCell>{ev?.phone || ''}</TableCell>\r\n-                    <TableCell>\r\n-                      {isPast ? (\r\n-                        <>\r\n-                          {ev ? (\r\n-                            <>\r\n-                              <IconButton size=\"small\" disabled title=\"Modify disabled on past date/time\">\r\n-                                <EditIcon />\r\n-                              </IconButton>\r\n-                              <IconButton size=\"small\" disabled title=\"Delete disabled on past date/time\">\r\n-                                <DeleteIcon />\r\n-                              </IconButton>\r\n-                            </>\r\n-                          ) : (\r\n-                            <IconButton size=\"small\" disabled title=\"Add disabled on past date/time\">\r\n-                              <AddIcon />\r\n-                            </IconButton>\r\n-                          )}\r\n-                        </>\r\n-                      ) : (\r\n-                        <>\r\n-                          <IconButton\r\n-                            color=\"primary\"\r\n-                            size=\"small\"\r\n-                            onClick={() => startEditing(hour)}\r\n-                            title={ev ? 'Modify' : 'Add'}\r\n-                          >\r\n-                            {ev ? <EditIcon /> : <AddIcon />}\r\n-                          </IconButton>\r\n-\r\n-                          {ev && (\r\n-                            <IconButton\r\n-                              color=\"error\"\r\n-                              size=\"small\"\r\n-                              onClick={() => handleDelete(hour)}\r\n-                              title=\"Delete\"\r\n-                            >\r\n-                              <DeleteIcon />\r\n-                            </IconButton>\r\n-                          )}\r\n-                        </>\r\n-                      )}\r\n-                    </TableCell>\r\n-                  </TableRow>\r\n-                );\r\n-              })}\r\n-            </TableBody>\r\n-          </Table>\r\n-        </DialogContent>\r\n-\r\n-        <DialogActions>\r\n-          <Button onClick={() => setOpenDayModal(false)}>Close</Button>\r\n-        </DialogActions>\r\n-      </Dialog>\r\n-\r\n-      <Dialog\r\n-        open={openEventForm}\r\n-        onClose={() => setOpenEventForm(false)}\r\n-        maxWidth=\"sm\"\r\n-        fullWidth\r\n-      >\r\n-        <DialogTitle>\r\n-          {editingHour !== null && findEventAtHour(editingHour)\r\n-            ? 'Modify Event'\r\n-            : 'Add Event'}\r\n-        </DialogTitle>\r\n-        <DialogContent>\r\n-          <Typography variant=\"subtitle1\" gutterBottom>\r\n-            For hour: {editingHour !== null ? formatHour(editingHour) : ''}\r\n-          </Typography>\r\n-\r\n-          <TextField\r\n-            margin=\"dense\"\r\n-            label=\"Customer Name\"\r\n-            fullWidth\r\n-            value={formData.name}\r\n-            onChange={(e) => setFormData({ ...formData, name: e.target.value })}\r\n-            error={!!errors.name}\r\n-            helperText={errors.name}\r\n-          />\r\n-          <TextField\r\n-            margin=\"dense\"\r\n-            label=\"Customer Phone\"\r\n-            fullWidth\r\n-            value={formData.phone}\r\n-            onChange={(e) => setFormData({ ...formData, phone: e.target.value })}\r\n-            error={!!errors.phone}\r\n-            helperText={errors.phone}\r\n-          />\r\n-          <TextField\r\n-            margin=\"dense\"\r\n-            select\r\n-            label=\"Type\"\r\n-            fullWidth\r\n-            value={formData.type}\r\n-            onChange={(e) => setFormData({ ...formData, type: e.target.value })}\r\n-          >\r\n-            <MenuItem value=\"Point\">Point</MenuItem>\r\n-            <MenuItem value=\"Rappel\">Rappel</MenuItem>\r\n-          </TextField>\r\n-        </DialogContent>\r\n-\r\n-        <DialogActions>\r\n-          <Button onClick={() => setOpenEventForm(false)}>Cancel</Button>\r\n-          <Button\r\n-            onClick={handleAddOrUpdate}\r\n-            variant=\"contained\"\r\n-            color=\"primary\"\r\n-          >\r\n-            Save\r\n-          </Button>\r\n-        </DialogActions>\r\n-      </Dialog>\r\n-    </>\r\n-  );\r\n-}\r\n-import React, { useState, useEffect } from 'react';\r\n-import {\r\n-  Container,\r\n-  Box,\r\n-  Dialog,\r\n-  DialogTitle,\r\n-  DialogContent,\r\n-  DialogActions,\r\n-  Button,\r\n-  TextField,\r\n-  MenuItem,\r\n-  Table,\r\n-  TableHead,\r\n-  TableBody,\r\n-  TableRow,\r\n-  TableCell,\r\n-  Typography,\r\n-  IconButton,\r\n-} from '@mui/material';\r\n-import FullCalendar from '@fullcalendar/react';\r\n-import dayGridPlugin from '@fullcalendar/daygrid';\r\n-import interactionPlugin from '@fullcalendar/interaction';\r\n-import NavBar from '../components/NavBar';\r\n-\r\n-import AddIcon from '@mui/icons-material/Add';\r\n-import EditIcon from '@mui/icons-material/Edit';\r\n-import DeleteIcon from '@mui/icons-material/Delete';\r\n-\r\n-const HOURS = Array.from({ length: 17 }, (_, i) => 8 + i); // 08:00 to 00:00\r\n-\r\n-function formatHour(h) {\r\n-  return h === 24 ? '00:00' : `${h.toString().padStart(2, '0')}:00`;\r\n-}\r\n-\r\n-export default function Dashboard() {\r\n-  const [profile, setProfile] = useState(null);\r\n-  const [events, setEvents] = useState([]);\r\n-  const [selectedDay, setSelectedDay] = useState(null);\r\n-  const [openDayModal, setOpenDayModal] = useState(false);\r\n-\r\n-  const [openEventForm, setOpenEventForm] = useState(false);\r\n-  const [editingHour, setEditingHour] = useState(null);\r\n-  const [formData, setFormData] = useState({ name: '', phone: '', type: 'Point' });\r\n-  const [errors, setErrors] = useState({});\r\n-\r\n-  const token = localStorage.getItem('token');\r\n-  const authHeaders = {\r\n-    Authorization: `Bearer ${token}`,\r\n-    'Content-Type': 'application/json',\r\n-  };\r\n-\r\n-  useEffect(() => {\r\n-    if (!token) return;\r\n-\r\n-    fetch('http://localhost:5000/api/admin/profile', { headers: authHeaders })\r\n-      .then(res => (res.ok ? res.json() : Promise.reject()))\r\n-      .then(setProfile)\r\n-      .catch(() => {\r\n-        localStorage.removeItem('token');\r\n-      });\r\n-\r\n-    fetch('http://localhost:5000/api/events', { headers: authHeaders })\r\n-      .then(res => res.json())\r\n-      .then(setEvents)\r\n-      .catch(console.error);\r\n-  }, [token]);\r\n-\r\n-  const isDateBeforeToday = (dateStr) => {\r\n-    if (!dateStr) return false;\r\n-    const selected = new Date(dateStr);\r\n-    const today = new Date();\r\n-    today.setHours(0, 0, 0, 0);\r\n-    return selected < today;\r\n-  };\r\n-\r\n-  const isHourInPast = (dateStr, hour) => {\r\n-    if (!dateStr) return false;\r\n-    const now = new Date();\r\n-    const selected = new Date(dateStr);\r\n-    selected.setHours(hour, 0, 0, 0);\r\n-    return selected < now;\r\n-  };\r\n-\r\n-  const handleDateClick = (arg) => {\r\n-    setSelectedDay(arg.dateStr);\r\n-    setOpenDayModal(true);\r\n-    setEditingHour(null);\r\n-    setFormData({ name: '', phone: '', type: 'Point' });\r\n-    setErrors({});\r\n-  };\r\n-\r\n-  const findEventAtHour = (hour) => {\r\n-    if (!selectedDay) return null;\r\n-    const hourStr = hour === 24 ? '00:00' : formatHour(hour);\r\n-    const prefix = `${selectedDay}T${hourStr}`;\r\n-    return events.find(e => e.date.startsWith(prefix));\r\n-  };\r\n-\r\n-  const validate = () => {\r\n-    const errs = {};\r\n-    if (!formData.name.trim()) errs.name = 'Name is required';\r\n-    if (!formData.phone.trim()) errs.phone = 'Phone is required';\r\n-    else if (!/^\\d{10}$/.test(formData.phone)) errs.phone = 'Phone must be 10 digits';\r\n-    if (!['Point', 'Rappel'].includes(formData.type)) errs.type = 'Invalid type';\r\n-    setErrors(errs);\r\n-    return Object.keys(errs).length === 0;\r\n-  };\r\n-\r\n-  const handleAddOrUpdate = async () => {\r\n-    if (isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, editingHour)) {\r\n-      alert(\"You can't add or modify events for past date/time.\");\r\n-      return;\r\n-    }\r\n-    if (!validate()) return;\r\n-\r\n-    const hourStr = editingHour === 24 ? '00:00' : formatHour(editingHour);\r\n-    const dateTime = `${selectedDay}T${hourStr}:00`;\r\n-\r\n-    const eventPayload = {\r\n-      title: `${formData.type} - ${formData.name}`,\r\n-      date: dateTime,\r\n-      name: formData.name,\r\n-      phone: formData.phone,\r\n-      type: formData.type,\r\n-    };\r\n-\r\n-    try {\r\n-      const existingEvent = findEventAtHour(editingHour);\r\n-      if (existingEvent) {\r\n-        const res = await fetch(`http://localhost:5000/api/events/${existingEvent._id}`, {\r\n-          method: 'PUT',\r\n-          headers: authHeaders,\r\n-          body: JSON.stringify(eventPayload),\r\n-        });\r\n-        const updated = await res.json();\r\n-        setEvents(events.map(e => (e._id === updated._id ? updated : e)));\r\n-      } else {\r\n-        const res = await fetch('http://localhost:5000/api/events', {\r\n-          method: 'POST',\r\n-          headers: authHeaders,\r\n-          body: JSON.stringify(eventPayload),\r\n-        });\r\n-        const created = await res.json();\r\n-        setEvents([...events, created]);\r\n-      }\r\n-      setOpenEventForm(false);\r\n-      setEditingHour(null);\r\n-      setFormData({ name: '', phone: '', type: 'Point' });\r\n-      setErrors({});\r\n-    } catch (err) {\r\n-      console.error('Save event failed:', err);\r\n-    }\r\n-  };\r\n-\r\n-  const handleDelete = async (hourToDelete) => {\r\n-    if (isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, hourToDelete)) {\r\n-      alert(\"You can't delete events from past date/time.\");\r\n-      return;\r\n-    }\r\n-    const existingEvent = findEventAtHour(hourToDelete);\r\n-    if (!existingEvent) return;\r\n-\r\n-    try {\r\n-      await fetch(`http://localhost:5000/api/events/${existingEvent._id}`, {\r\n-        method: 'DELETE',\r\n-        headers: authHeaders,\r\n-      });\r\n-      setEvents(events.filter(e => e._id !== existingEvent._id));\r\n-      if (editingHour === hourToDelete) {\r\n-        setOpenEventForm(false);\r\n-        setEditingHour(null);\r\n-        setFormData({ name: '', phone: '', type: 'Point' });\r\n-        setErrors({});\r\n-      }\r\n-    } catch (err) {\r\n-      console.error('Delete event failed:', err);\r\n-    }\r\n-  };\r\n-\r\n-  const startEditing = (hour) => {\r\n-    if (isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, hour)) {\r\n-      alert(\"You can't add or modify events for past date/time.\");\r\n-      return;\r\n-    }\r\n-    const ev = findEventAtHour(hour);\r\n-    if (ev) {\r\n-      setFormData({\r\n-        name: ev.name,\r\n-        phone: ev.phone,\r\n-        type: ev.type,\r\n-      });\r\n-    } else {\r\n-      setFormData({ name: '', phone: '', type: 'Point' });\r\n-    }\r\n-    setEditingHour(hour);\r\n-    setErrors({});\r\n-    setOpenEventForm(true);\r\n-  };\r\n-\r\n-  return (\r\n-    <>\r\n-      <NavBar\r\n-        email={profile?.email}\r\n-        onLogout={() => {\r\n-          localStorage.removeItem('token');\r\n-          // redirect if needed\r\n-        }}\r\n-      />\r\n-      <Container maxWidth=\"lg\" sx={{ mt: 4 }}>\r\n-        <Box boxShadow={3} p={2} bgcolor=\"white\" borderRadius={2}>\r\n-          <FullCalendar\r\n-            plugins={[dayGridPlugin, interactionPlugin]}\r\n-            initialView=\"dayGridMonth\"\r\n-            selectable={true}\r\n-            events={events}\r\n-            dateClick={handleDateClick}\r\n-          />\r\n-        </Box>\r\n-      </Container>\r\n-\r\n-      <Dialog\r\n-        open={openDayModal}\r\n-        onClose={() => setOpenDayModal(false)}\r\n-        maxWidth=\"lg\"\r\n-        fullWidth\r\n-      >\r\n-        <DialogTitle>Schedule for {selectedDay}</DialogTitle>\r\n-        <DialogContent>\r\n-          <Table>\r\n-            <TableHead>\r\n-              <TableRow>\r\n-                <TableCell>Hour</TableCell>\r\n-                <TableCell>Event Name</TableCell>\r\n-                <TableCell>Customer Name</TableCell>\r\n-                <TableCell>Customer Phone</TableCell>\r\n-                <TableCell>Action</TableCell>\r\n-              </TableRow>\r\n-            </TableHead>\r\n-\r\n-            <TableBody>\r\n-              {HOURS.map((hour) => {\r\n-                const ev = findEventAtHour(hour);\r\n-                const isPast = isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, hour);\r\n-\r\n-                return (\r\n-                  <TableRow key={hour}>\r\n-                    <TableCell>{formatHour(hour)}</TableCell>\r\n-                    <TableCell>{ev?.title || ''}</TableCell>\r\n-                    <TableCell>{ev?.name || ''}</TableCell>\r\n-                    <TableCell>{ev?.phone || ''}</TableCell>\r\n-                    <TableCell>\r\n-                      {isPast ? (\r\n-                        <>\r\n-                          {ev ? (\r\n-                            <>\r\n-                              <IconButton size=\"small\" disabled title=\"Modify disabled on past date/time\">\r\n-                                <EditIcon />\r\n-                              </IconButton>\r\n-                              <IconButton size=\"small\" disabled title=\"Delete disabled on past date/time\">\r\n-                                <DeleteIcon />\r\n-                              </IconButton>\r\n-                            </>\r\n-                          ) : (\r\n-                            <IconButton size=\"small\" disabled title=\"Add disabled on past date/time\">\r\n-                              <AddIcon />\r\n-                            </IconButton>\r\n-                          )}\r\n-                        </>\r\n-                      ) : (\r\n-                        <>\r\n-                          <IconButton\r\n-                            color=\"primary\"\r\n-                            size=\"small\"\r\n-                            onClick={() => startEditing(hour)}\r\n-                            title={ev ? 'Modify' : 'Add'}\r\n-                          >\r\n-                            {ev ? <EditIcon /> : <AddIcon />}\r\n-                          </IconButton>\r\n-\r\n-                          {ev && (\r\n-                            <IconButton\r\n-                              color=\"error\"\r\n-                              size=\"small\"\r\n-                              onClick={() => handleDelete(hour)}\r\n-                              title=\"Delete\"\r\n-                            >\r\n-                              <DeleteIcon />\r\n-                            </IconButton>\r\n-                          )}\r\n-                        </>\r\n-                      )}\r\n-                    </TableCell>\r\n-                  </TableRow>\r\n-                );\r\n-              })}\r\n-            </TableBody>\r\n-          </Table>\r\n-        </DialogContent>\r\n-\r\n-        <DialogActions>\r\n-          <Button onClick={() => setOpenDayModal(false)}>Close</Button>\r\n-        </DialogActions>\r\n-      </Dialog>\r\n-\r\n-      <Dialog\r\n-        open={openEventForm}\r\n-        onClose={() => setOpenEventForm(false)}\r\n-        maxWidth=\"sm\"\r\n-        fullWidth\r\n-      >\r\n-        <DialogTitle>\r\n-          {editingHour !== null && findEventAtHour(editingHour)\r\n-            ? 'Modify Event'\r\n-            : 'Add Event'}\r\n-        </DialogTitle>\r\n-        <DialogContent>\r\n-          <Typography variant=\"subtitle1\" gutterBottom>\r\n-            For hour: {editingHour !== null ? formatHour(editingHour) : ''}\r\n-          </Typography>\r\n-\r\n-          <TextField\r\n-            margin=\"dense\"\r\n-            label=\"Customer Name\"\r\n-            fullWidth\r\n-            value={formData.name}\r\n-            onChange={(e) => setFormData({ ...formData, name: e.target.value })}\r\n-            error={!!errors.name}\r\n-            helperText={errors.name}\r\n-          />\r\n-          <TextField\r\n-            margin=\"dense\"\r\n-            label=\"Customer Phone\"\r\n-            fullWidth\r\n-            value={formData.phone}\r\n-            onChange={(e) => setFormData({ ...formData, phone: e.target.value })}\r\n-            error={!!errors.phone}\r\n-            helperText={errors.phone}\r\n-          />\r\n-          <TextField\r\n-            margin=\"dense\"\r\n-            select\r\n-            label=\"Type\"\r\n-            fullWidth\r\n-            value={formData.type}\r\n-            onChange={(e) => setFormData({ ...formData, type: e.target.value })}\r\n-          >\r\n-            <MenuItem value=\"Point\">Point</MenuItem>\r\n-            <MenuItem value=\"Rappel\">Rappel</MenuItem>\r\n-          </TextField>\r\n-        </DialogContent>\r\n-\r\n-        <DialogActions>\r\n-          <Button onClick={() => setOpenEventForm(false)}>Cancel</Button>\r\n-          <Button\r\n-            onClick={handleAddOrUpdate}\r\n-            variant=\"contained\"\r\n-            color=\"primary\"\r\n-          >\r\n-            Save\r\n-          </Button>\r\n-        </DialogActions>\r\n-      </Dialog>\r\n-    </>\r\n-  );\r\n-}\r\n-import React, { useState, useEffect } from 'react';\r\n-import {\r\n-  Container,\r\n-  Box,\r\n-  Dialog,\r\n-  DialogTitle,\r\n-  DialogContent,\r\n-  DialogActions,\r\n-  Button,\r\n-  TextField,\r\n-  MenuItem,\r\n-  Table,\r\n-  TableHead,\r\n-  TableBody,\r\n-  TableRow,\r\n-  TableCell,\r\n-  Typography,\r\n-  IconButton,\r\n-} from '@mui/material';\r\n-import FullCalendar from '@fullcalendar/react';\r\n-import dayGridPlugin from '@fullcalendar/daygrid';\r\n-import interactionPlugin from '@fullcalendar/interaction';\r\n-import NavBar from '../components/NavBar';\r\n-\r\n-// Import MUI icons\r\n-import AddIcon from '@mui/icons-material/Add';\r\n-import EditIcon from '@mui/icons-material/Edit';\r\n-import DeleteIcon from '@mui/icons-material/Delete';\r\n-\r\n-const HOURS = Array.from({ length: 17 }, (_, i) => 8 + i); // 08:00 to 00:00\r\n-\r\n-function formatHour(h) {\r\n-  return h === 24 ? '00:00' : `${h.toString().padStart(2, '0')}:00`;\r\n-}\r\n-\r\n-export default function Dashboard() {\r\n-  const [profile, setProfile] = useState(null);\r\n-  const [events, setEvents] = useState([]);\r\n-  const [selectedDay, setSelectedDay] = useState(null);\r\n-  const [openDayModal, setOpenDayModal] = useState(false);\r\n-\r\n-  const [openEventForm, setOpenEventForm] = useState(false);\r\n-  const [editingHour, setEditingHour] = useState(null);\r\n-  const [formData, setFormData] = useState({ name: '', phone: '', type: 'Point' });\r\n-  const [errors, setErrors] = useState({});\r\n-\r\n-  const token = localStorage.getItem('token');\r\n-  const authHeaders = {\r\n-    Authorization: `Bearer ${token}`,\r\n-    'Content-Type': 'application/json',\r\n-  };\r\n-\r\n-  useEffect(() => {\r\n-    if (!token) return;\r\n-\r\n-    // Load profile\r\n-    fetch('http://localhost:5000/api/admin/profile', { headers: authHeaders })\r\n-      .then(res => (res.ok ? res.json() : Promise.reject()))\r\n-      .then(setProfile)\r\n-      .catch(() => {\r\n-        localStorage.removeItem('token');\r\n-      });\r\n-\r\n-    // Load events\r\n-    fetch('http://localhost:5000/api/events', { headers: authHeaders })\r\n-      .then(res => res.json())\r\n-      .then(setEvents)\r\n-      .catch(console.error);\r\n-  }, [token]);\r\n-\r\n-  // Check if date is before today\r\n-  const isDateBeforeToday = (dateStr) => {\r\n-    if (!dateStr) return false;\r\n-    const selected = new Date(dateStr);\r\n-    const today = new Date();\r\n-    today.setHours(0, 0, 0, 0);\r\n-    return selected < today;\r\n-  };\r\n-\r\n-  // Check if hour is in the past for the given date\r\n-  const isHourInPast = (dateStr, hour) => {\r\n-    if (!dateStr) return false;\r\n-    const now = new Date();\r\n-    const selected = new Date(dateStr);\r\n-    selected.setHours(hour, 0, 0, 0);\r\n-    return selected < now;\r\n-  };\r\n-\r\n-  const handleDateClick = (arg) => {\r\n-    if (isDateBeforeToday(arg.dateStr)) {\r\n-      alert(\"You can't add or modify events for past dates.\");\r\n-      return;\r\n-    }\r\n-    setSelectedDay(arg.dateStr);\r\n-    setOpenDayModal(true);\r\n-    setEditingHour(null);\r\n-    setFormData({ name: '', phone: '', type: 'Point' });\r\n-    setErrors({});\r\n-  };\r\n-\r\n-  const findEventAtHour = (hour) => {\r\n-    if (!selectedDay) return null;\r\n-    const hourStr = hour === 24 ? '00:00' : formatHour(hour);\r\n-    const prefix = `${selectedDay}T${hourStr}`;\r\n-    return events.find(e => e.date.startsWith(prefix));\r\n-  };\r\n-\r\n-  const validate = () => {\r\n-    const errs = {};\r\n-    if (!formData.name.trim()) errs.name = 'Name is required';\r\n-    if (!formData.phone.trim()) errs.phone = 'Phone is required';\r\n-    else if (!/^\\d{10}$/.test(formData.phone)) errs.phone = 'Phone must be 10 digits';\r\n-    if (!['Point', 'Rappel'].includes(formData.type)) errs.type = 'Invalid type';\r\n-    setErrors(errs);\r\n-    return Object.keys(errs).length === 0;\r\n-  };\r\n-\r\n-  const handleAddOrUpdate = async () => {\r\n-    if (isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, editingHour)) {\r\n-      alert(\"You can't add or modify events for past date/time.\");\r\n-      return;\r\n-    }\r\n-    if (!validate()) return;\r\n-\r\n-    const hourStr = editingHour === 24 ? '00:00' : formatHour(editingHour);\r\n-    const dateTime = `${selectedDay}T${hourStr}:00`;\r\n-\r\n-    const eventPayload = {\r\n-      title: `${formData.type} - ${formData.name}`,\r\n-      date: dateTime,\r\n-      name: formData.name,\r\n-      phone: formData.phone,\r\n-      type: formData.type,\r\n-    };\r\n-\r\n-    try {\r\n-      const existingEvent = findEventAtHour(editingHour);\r\n-      if (existingEvent) {\r\n-        const res = await fetch(`http://localhost:5000/api/events/${existingEvent._id}`, {\r\n-          method: 'PUT',\r\n-          headers: authHeaders,\r\n-          body: JSON.stringify(eventPayload),\r\n-        });\r\n-        const updated = await res.json();\r\n-        setEvents(events.map(e => (e._id === updated._id ? updated : e)));\r\n-      } else {\r\n-        const res = await fetch('http://localhost:5000/api/events', {\r\n-          method: 'POST',\r\n-          headers: authHeaders,\r\n-          body: JSON.stringify(eventPayload),\r\n-        });\r\n-        const created = await res.json();\r\n-        setEvents([...events, created]);\r\n-      }\r\n-      setOpenEventForm(false);\r\n-      setEditingHour(null);\r\n-      setFormData({ name: '', phone: '', type: 'Point' });\r\n-      setErrors({});\r\n-    } catch (err) {\r\n-      console.error('Save event failed:', err);\r\n-    }\r\n-  };\r\n-\r\n-  const handleDelete = async (hourToDelete) => {\r\n-    const existingEvent = findEventAtHour(hourToDelete);\r\n-    if (!existingEvent) return;\r\n-\r\n-    try {\r\n-      await fetch(`http://localhost:5000/api/events/${existingEvent._id}`, {\r\n-        method: 'DELETE',\r\n-        headers: authHeaders,\r\n-      });\r\n-      setEvents(events.filter(e => e._id !== existingEvent._id));\r\n-      if (editingHour === hourToDelete) {\r\n-        setOpenEventForm(false);\r\n-        setEditingHour(null);\r\n-        setFormData({ name: '', phone: '', type: 'Point' });\r\n-        setErrors({});\r\n-      }\r\n-    } catch (err) {\r\n-      console.error('Delete event failed:', err);\r\n-    }\r\n-  };\r\n-\r\n-  const startEditing = (hour) => {\r\n-    if (isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, hour)) {\r\n-      alert(\"You can't add or modify events for past date/time.\");\r\n-      return;\r\n-    }\r\n-    const ev = findEventAtHour(hour);\r\n-    if (ev) {\r\n-      setFormData({\r\n-        name: ev.name,\r\n-        phone: ev.phone,\r\n-        type: ev.type,\r\n-      });\r\n-    } else {\r\n-      setFormData({ name: '', phone: '', type: 'Point' });\r\n-    }\r\n-    setEditingHour(hour);\r\n-    setErrors({});\r\n-    setOpenEventForm(true);\r\n-  };\r\n-\r\n-  return (\r\n-    <>\r\n-      <NavBar\r\n-        email={profile?.email}\r\n-        onLogout={() => {\r\n-          localStorage.removeItem('token');\r\n-          // redirect if needed\r\n-        }}\r\n-      />\r\n-      <Container maxWidth=\"lg\" sx={{ mt: 4 }}>\r\n-        <Box boxShadow={3} p={2} bgcolor=\"white\" borderRadius={2}>\r\n-          <FullCalendar\r\n-            plugins={[dayGridPlugin, interactionPlugin]}\r\n-            initialView=\"dayGridMonth\"\r\n-            selectable={true}\r\n-            events={events}\r\n-            dateClick={handleDateClick}\r\n-          />\r\n-        </Box>\r\n-      </Container>\r\n-\r\n-      <Dialog\r\n-        open={openDayModal}\r\n-        onClose={() => setOpenDayModal(false)}\r\n-        maxWidth=\"lg\"\r\n-        fullWidth\r\n-      >\r\n-        <DialogTitle>Schedule for {selectedDay}</DialogTitle>\r\n-        <DialogContent>\r\n-          <Table>\r\n-            <TableHead>\r\n-              <TableRow>\r\n-                <TableCell>Hour</TableCell>\r\n-                <TableCell>Event Name</TableCell>\r\n-                <TableCell>Customer Name</TableCell>\r\n-                <TableCell>Customer Phone</TableCell>\r\n-                <TableCell>Action</TableCell>\r\n-              </TableRow>\r\n-            </TableHead>\r\n-\r\n-            <TableBody>\r\n-              {HOURS.map((hour) => {\r\n-                const ev = findEventAtHour(hour);\r\n-                return (\r\n-                  <TableRow key={hour}>\r\n-                    <TableCell>{formatHour(hour)}</TableCell>\r\n-                    <TableCell>{ev?.title || ''}</TableCell>\r\n-                    <TableCell>{ev?.name || ''}</TableCell>\r\n-                    <TableCell>{ev?.phone || ''}</TableCell>\r\n-                    <TableCell>\r\n-                      <IconButton\r\n-                        color=\"primary\"\r\n-                        size=\"small\"\r\n-                        onClick={() => startEditing(hour)}\r\n-                        title={ev ? 'Modify' : 'Add'}\r\n-                      >\r\n-                        {ev ? <EditIcon /> : <AddIcon />}\r\n-                      </IconButton>\r\n-\r\n-                      {ev && (\r\n-                        <IconButton\r\n-                          color=\"error\"\r\n-                          size=\"small\"\r\n-                          onClick={() => handleDelete(hour)}\r\n-                          title=\"Delete\"\r\n-                        >\r\n-                          <DeleteIcon />\r\n-                        </IconButton>\r\n-                      )}\r\n-                    </TableCell>\r\n-                  </TableRow>\r\n-                );\r\n-              })}\r\n-            </TableBody>\r\n-          </Table>\r\n-        </DialogContent>\r\n-\r\n-        <DialogActions>\r\n-          <Button onClick={() => setOpenDayModal(false)}>Close</Button>\r\n-        </DialogActions>\r\n-      </Dialog>\r\n-\r\n-      <Dialog\r\n-        open={openEventForm}\r\n-        onClose={() => setOpenEventForm(false)}\r\n-        maxWidth=\"sm\"\r\n-        fullWidth\r\n-      >\r\n-        <DialogTitle>\r\n-          {editingHour !== null && findEventAtHour(editingHour)\r\n-            ? 'Modify Event'\r\n-            : 'Add Event'}\r\n-        </DialogTitle>\r\n-        <DialogContent>\r\n-          <Typography variant=\"subtitle1\" gutterBottom>\r\n-            For hour: {editingHour !== null ? formatHour(editingHour) : ''}\r\n-          </Typography>\r\n-\r\n-          <TextField\r\n-            margin=\"dense\"\r\n-            label=\"Customer Name\"\r\n-            fullWidth\r\n-            value={formData.name}\r\n-            onChange={(e) => setFormData({ ...formData, name: e.target.value })}\r\n-            error={!!errors.name}\r\n-            helperText={errors.name}\r\n-          />\r\n-          <TextField\r\n-            margin=\"dense\"\r\n-            label=\"Customer Phone\"\r\n-            fullWidth\r\n-            value={formData.phone}\r\n-            onChange={(e) => setFormData({ ...formData, phone: e.target.value })}\r\n-            error={!!errors.phone}\r\n-            helperText={errors.phone}\r\n-          />\r\n-          <TextField\r\n-            margin=\"dense\"\r\n-            select\r\n-            label=\"Type\"\r\n-            fullWidth\r\n-            value={formData.type}\r\n-            onChange={(e) => setFormData({ ...formData, type: e.target.value })}\r\n-          >\r\n-            <MenuItem value=\"Point\">Point</MenuItem>\r\n-            <MenuItem value=\"Rappel\">Rappel</MenuItem>\r\n-          </TextField>\r\n-        </DialogContent>\r\n-\r\n-        <DialogActions>\r\n-          <Button onClick={() => setOpenEventForm(false)}>Cancel</Button>\r\n-          <Button\r\n-            onClick={handleAddOrUpdate}\r\n-            variant=\"contained\"\r\n-            color=\"primary\"\r\n-          >\r\n-            Save\r\n-          </Button>\r\n-        </DialogActions>\r\n-      </Dialog>\r\n-    </>\r\n-  );\r\n-}\r\n-import React, { useState, useEffect } from 'react';\r\n-import {\r\n-  Container,\r\n-  Box,\r\n-  Dialog,\r\n-  DialogTitle,\r\n-  DialogContent,\r\n-  DialogActions,\r\n-  Button,\r\n-  TextField,\r\n-  MenuItem,\r\n-  Table,\r\n-  TableHead,\r\n-  TableBody,\r\n-  TableRow,\r\n-  TableCell,\r\n-  Typography,\r\n-  IconButton,\r\n-} from '@mui/material';\r\n-import FullCalendar from '@fullcalendar/react';\r\n-import dayGridPlugin from '@fullcalendar/daygrid';\r\n-import interactionPlugin from '@fullcalendar/interaction';\r\n-import NavBar from '../components/NavBar';\r\n-\r\n-// Import MUI icons\r\n-import AddIcon from '@mui/icons-material/Add';\r\n-import EditIcon from '@mui/icons-material/Edit';\r\n-import DeleteIcon from '@mui/icons-material/Delete';\r\n-\r\n-const HOURS = Array.from({ length: 17 }, (_, i) => 8 + i); // 08:00 to 00:00\r\n-\r\n-function formatHour(h) {\r\n-  return h === 24 ? '00:00' : `${h.toString().padStart(2, '0')}:00`;\r\n-}\r\n-\r\n-export default function Dashboard() {\r\n-  const [profile, setProfile] = useState(null);\r\n-  const [events, setEvents] = useState([]);\r\n-  const [selectedDay, setSelectedDay] = useState(null);\r\n-  const [openDayModal, setOpenDayModal] = useState(false);\r\n-\r\n-  // New state for the add/edit event popup\r\n-  const [openEventForm, setOpenEventForm] = useState(false);\r\n-\r\n-  const [editingHour, setEditingHour] = useState(null);\r\n-  const [formData, setFormData] = useState({ name: '', phone: '', type: 'Point' });\r\n-  const [errors, setErrors] = useState({});\r\n-\r\n-  const token = localStorage.getItem('token');\r\n-  const authHeaders = {\r\n-    Authorization: `Bearer ${token}`,\r\n-    'Content-Type': 'application/json',\r\n-  };\r\n-\r\n-  useEffect(() => {\r\n-    if (!token) return;\r\n-\r\n-    // Load profile\r\n-    fetch('http://localhost:5000/api/admin/profile', { headers: authHeaders })\r\n-      .then(res => (res.ok ? res.json() : Promise.reject()))\r\n-      .then(setProfile)\r\n-      .catch(() => {\r\n-        localStorage.removeItem('token');\r\n-      });\r\n-\r\n-    // Load events\r\n-    fetch('http://localhost:5000/api/events', { headers: authHeaders })\r\n-      .then(res => res.json())\r\n-      .then(setEvents)\r\n-      .catch(console.error);\r\n-  }, [token]);\r\n-\r\n-  // Helper to check if selectedDay is in the future\r\n-  const isDateInFuture = (dateStr) => {\r\n-    if (!dateStr) return false;\r\n-    const selected = new Date(dateStr);\r\n-    const today = new Date();\r\n-    today.setHours(0, 0, 0, 0);\r\n-    return selected > today;\r\n-  };\r\n-\r\n-  const handleDateClick = (arg) => {\r\n-    if (isDateInFuture(arg.dateStr)) {\r\n-      alert(\"You can't add or modify events for future dates.\");\r\n-      return;\r\n-    }\r\n-    setSelectedDay(arg.dateStr);\r\n-    setOpenDayModal(true);\r\n-    setEditingHour(null);\r\n-    setFormData({ name: '', phone: '', type: 'Point' });\r\n-    setErrors({});\r\n-  };\r\n-\r\n-  const findEventAtHour = (hour) => {\r\n-    if (!selectedDay) return null;\r\n-    const hourStr = hour === 24 ? '00:00' : formatHour(hour);\r\n-    const prefix = `${selectedDay}T${hourStr}`;\r\n-    return events.find(e => e.date.startsWith(prefix));\r\n-  };\r\n-\r\n-  const validate = () => {\r\n-    const errs = {};\r\n-    if (!formData.name.trim()) errs.name = 'Name is required';\r\n-    if (!formData.phone.trim()) errs.phone = 'Phone is required';\r\n-    else if (!/^\\d{10}$/.test(formData.phone)) errs.phone = 'Phone must be 10 digits';\r\n-    if (!['Point', 'Rappel'].includes(formData.type)) errs.type = 'Invalid type';\r\n-    setErrors(errs);\r\n-    return Object.keys(errs).length === 0;\r\n-  };\r\n-\r\n-  const handleAddOrUpdate = async () => {\r\n-    if (isDateInFuture(selectedDay)) {\r\n-      alert(\"You can't add or modify events for future dates.\");\r\n-      return;\r\n-    }\r\n-    if (!validate()) return;\r\n-\r\n-    const hourStr = editingHour === 24 ? '00:00' : formatHour(editingHour);\r\n-    const dateTime = `${selectedDay}T${hourStr}:00`;\r\n-\r\n-    const eventPayload = {\r\n-      title: `${formData.type} - ${formData.name}`,\r\n-      date: dateTime,\r\n-      name: formData.name,\r\n-      phone: formData.phone,\r\n-      type: formData.type,\r\n-    };\r\n-\r\n-    try {\r\n-      const existingEvent = findEventAtHour(editingHour);\r\n-      if (existingEvent) {\r\n-        const res = await fetch(`http://localhost:5000/api/events/${existingEvent._id}`, {\r\n-          method: 'PUT',\r\n-          headers: authHeaders,\r\n-          body: JSON.stringify(eventPayload),\r\n-        });\r\n-        const updated = await res.json();\r\n-        setEvents(events.map(e => (e._id === updated._id ? updated : e)));\r\n-      } else {\r\n-        const res = await fetch('http://localhost:5000/api/events', {\r\n-          method: 'POST',\r\n-          headers: authHeaders,\r\n-          body: JSON.stringify(eventPayload),\r\n-        });\r\n-        const created = await res.json();\r\n-        setEvents([...events, created]);\r\n-      }\r\n-      setOpenEventForm(false);\r\n-      setEditingHour(null);\r\n-      setFormData({ name: '', phone: '', type: 'Point' });\r\n-      setErrors({});\r\n-    } catch (err) {\r\n-      console.error('Save event failed:', err);\r\n-    }\r\n-  };\r\n-\r\n-  const handleDelete = async (hourToDelete) => {\r\n-    const existingEvent = findEventAtHour(hourToDelete);\r\n-    if (!existingEvent) return;\r\n-\r\n-    try {\r\n-      await fetch(`http://localhost:5000/api/events/${existingEvent._id}`, {\r\n-        method: 'DELETE',\r\n-        headers: authHeaders,\r\n-      });\r\n-      setEvents(events.filter(e => e._id !== existingEvent._id));\r\n-      if (editingHour === hourToDelete) {\r\n-        setOpenEventForm(false);\r\n-        setEditingHour(null);\r\n-        setFormData({ name: '', phone: '', type: 'Point' });\r\n-        setErrors({});\r\n-      }\r\n-    } catch (err) {\r\n-      console.error('Delete event failed:', err);\r\n-    }\r\n-  };\r\n-\r\n-  const startEditing = (hour) => {\r\n-    const ev = findEventAtHour(hour);\r\n-    if (ev) {\r\n-      setFormData({\r\n-        name: ev.name,\r\n-        phone: ev.phone,\r\n-        type: ev.type,\r\n-      });\r\n-    } else {\r\n-      setFormData({ name: '', phone: '', type: 'Point' });\r\n-    }\r\n-    setEditingHour(hour);\r\n-    setErrors({});\r\n-    setOpenEventForm(true);\r\n-  };\r\n-\r\n-  return (\r\n-    <>\r\n-      <NavBar\r\n-        email={profile?.email}\r\n-        onLogout={() => {\r\n-          localStorage.removeItem('token');\r\n-          // redirect if needed\r\n-        }}\r\n-      />\r\n-      <Container maxWidth=\"lg\" sx={{ mt: 4 }}>\r\n-        <Box boxShadow={3} p={2} bgcolor=\"white\" borderRadius={2}>\r\n-          <FullCalendar\r\n-            plugins={[dayGridPlugin, interactionPlugin]}\r\n-            initialView=\"dayGridMonth\"\r\n-            selectable={true}\r\n-            events={events}\r\n-            dateClick={handleDateClick}\r\n-          />\r\n-        </Box>\r\n-      </Container>\r\n-\r\n-      <Dialog\r\n-        open={openDayModal}\r\n-        onClose={() => setOpenDayModal(false)}\r\n-        maxWidth=\"lg\"\r\n-        fullWidth\r\n-      >\r\n-        <DialogTitle>Schedule for {selectedDay}</DialogTitle>\r\n-        <DialogContent>\r\n-          <Table>\r\n-            <TableHead>\r\n-              <TableRow>\r\n-                <TableCell>Hour</TableCell>\r\n-                <TableCell>Event Name</TableCell>\r\n-                <TableCell>Customer Name</TableCell>\r\n-                <TableCell>Customer Phone</TableCell>\r\n-                <TableCell>Action</TableCell>\r\n-              </TableRow>\r\n-            </TableHead>\r\n-\r\n-            <TableBody>\r\n-              {HOURS.map((hour) => {\r\n-                const ev = findEventAtHour(hour);\r\n-                return (\r\n-                  <TableRow key={hour}>\r\n-                    <TableCell>{formatHour(hour)}</TableCell>\r\n-                    <TableCell>{ev?.title || ''}</TableCell>\r\n-                    <TableCell>{ev?.name || ''}</TableCell>\r\n-                    <TableCell>{ev?.phone || ''}</TableCell>\r\n-                    <TableCell>\r\n-                      <IconButton\r\n-                        color=\"primary\"\r\n-                        size=\"small\"\r\n-                        onClick={() => startEditing(hour)}\r\n-                        title={ev ? 'Modify' : 'Add'}\r\n-                      >\r\n-                        {ev ? <EditIcon /> : <AddIcon />}\r\n-                      </IconButton>\r\n-\r\n-                      {ev && (\r\n-                        <IconButton\r\n-                          color=\"error\"\r\n-                          size=\"small\"\r\n-                          onClick={() => handleDelete(hour)}\r\n-                          title=\"Delete\"\r\n-                        >\r\n-                          <DeleteIcon />\r\n-                        </IconButton>\r\n-                      )}\r\n-                    </TableCell>\r\n-                  </TableRow>\r\n-                );\r\n-              })}\r\n-            </TableBody>\r\n-          </Table>\r\n-        </DialogContent>\r\n-\r\n-        <DialogActions>\r\n-          <Button onClick={() => setOpenDayModal(false)}>Close</Button>\r\n-        </DialogActions>\r\n-      </Dialog>\r\n-\r\n-      {/* Separate dialog popup for Add/Edit event */}\r\n-      <Dialog\r\n-        open={openEventForm}\r\n-        onClose={() => setOpenEventForm(false)}\r\n-        maxWidth=\"sm\"\r\n-        fullWidth\r\n-      >\r\n-        <DialogTitle>\r\n-          {editingHour !== null && findEventAtHour(editingHour)\r\n-            ? 'Modify Event'\r\n-            : 'Add Event'}\r\n-        </DialogTitle>\r\n-        <DialogContent>\r\n-          <Typography variant=\"subtitle1\" gutterBottom>\r\n-            For hour: {editingHour !== null ? formatHour(editingHour) : ''}\r\n-          </Typography>\r\n-\r\n-          <TextField\r\n-            margin=\"dense\"\r\n-            label=\"Customer Name\"\r\n-            fullWidth\r\n-            value={formData.name}\r\n-            onChange={(e) => setFormData({ ...formData, name: e.target.value })}\r\n-            error={!!errors.name}\r\n-            helperText={errors.name}\r\n-          />\r\n-          <TextField\r\n-            margin=\"dense\"\r\n-            label=\"Customer Phone\"\r\n-            fullWidth\r\n-            value={formData.phone}\r\n-            onChange={(e) => setFormData({ ...formData, phone: e.target.value })}\r\n-            error={!!errors.phone}\r\n-            helperText={errors.phone}\r\n-          />\r\n-          <TextField\r\n-            margin=\"dense\"\r\n-            select\r\n-            label=\"Type\"\r\n-            fullWidth\r\n-            value={formData.type}\r\n-            onChange={(e) => setFormData({ ...formData, type: e.target.value })}\r\n-          >\r\n-            <MenuItem value=\"Point\">Point</MenuItem>\r\n-            <MenuItem value=\"Rappel\">Rappel</MenuItem>\r\n-          </TextField>\r\n-        </DialogContent>\r\n-\r\n-        <DialogActions>\r\n-          <Button onClick={() => setOpenEventForm(false)}>Cancel</Button>\r\n-          <Button\r\n-            onClick={() => {\r\n-              handleAddOrUpdate();\r\n-            }}\r\n-            variant=\"contained\"\r\n-            color=\"primary\"\r\n-          >\r\n-            Save\r\n-          </Button>\r\n-        </DialogActions>\r\n-      </Dialog>\r\n-    </>\r\n-  );\r\n-}\r\n-\n"
                },
                {
                    "date": 1751917142533,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,375 +0,0 @@\n-import React, { useState, useEffect } from 'react';\r\n-import {\r\n-  Container,\r\n-  Box,\r\n-  Dialog,\r\n-  DialogTitle,\r\n-  DialogContent,\r\n-  DialogActions,\r\n-  Button,\r\n-  TextField,\r\n-  MenuItem,\r\n-  Table,\r\n-  TableHead,\r\n-  TableBody,\r\n-  TableRow,\r\n-  TableCell,\r\n-  Typography,\r\n-  IconButton,\r\n-} from '@mui/material';\r\n-import FullCalendar from '@fullcalendar/react';\r\n-import dayGridPlugin from '@fullcalendar/daygrid';\r\n-import interactionPlugin from '@fullcalendar/interaction';\r\n-import NavBar from '../components/NavBar';\r\n-\r\n-import AddIcon from '@mui/icons-material/Add';\r\n-import EditIcon from '@mui/icons-material/Edit';\r\n-import DeleteIcon from '@mui/icons-material/Delete';\r\n-\r\n-const HOURS = Array.from({ length: 17 }, (_, i) => 8 + i); // 08:00 to 00:00\r\n-\r\n-function formatHour(h) {\r\n-  return h === 24 ? '00:00' : `${h.toString().padStart(2, '0')}:00`;\r\n-}\r\n-\r\n-export default function Dashboard() {\r\n-  const [profile, setProfile] = useState(null);\r\n-  const [events, setEvents] = useState([]);\r\n-  const [selectedDay, setSelectedDay] = useState(null);\r\n-  const [openDayModal, setOpenDayModal] = useState(false);\r\n-\r\n-  const [openEventForm, setOpenEventForm] = useState(false);\r\n-  const [editingHour, setEditingHour] = useState(null);\r\n-  const [formData, setFormData] = useState({ name: '', phone: '', type: 'Point' });\r\n-  const [errors, setErrors] = useState({});\r\n-\r\n-  const token = localStorage.getItem('token');\r\n-  const authHeaders = {\r\n-    Authorization: `Bearer ${token}`,\r\n-    'Content-Type': 'application/json',\r\n-  };\r\n-\r\n-  useEffect(() => {\r\n-    if (!token) return;\r\n-\r\n-    fetch('http://localhost:5000/api/admin/profile', { headers: authHeaders })\r\n-      .then(res => (res.ok ? res.json() : Promise.reject()))\r\n-      .then(setProfile)\r\n-      .catch(() => {\r\n-        localStorage.removeItem('token');\r\n-      });\r\n-\r\n-    fetch('http://localhost:5000/api/events', { headers: authHeaders })\r\n-      .then(res => res.json())\r\n-      .then(setEvents)\r\n-      .catch(console.error);\r\n-  }, [token]);\r\n-\r\n-  const isDateBeforeToday = (dateStr) => {\r\n-    if (!dateStr) return false;\r\n-    const selected = new Date(dateStr);\r\n-    const today = new Date();\r\n-    today.setHours(0, 0, 0, 0);\r\n-    return selected < today;\r\n-  };\r\n-\r\n-  const isHourInPast = (dateStr, hour) => {\r\n-    if (!dateStr) return false;\r\n-    const now = new Date();\r\n-    const selected = new Date(dateStr);\r\n-    selected.setHours(hour, 0, 0, 0);\r\n-    return selected < now;\r\n-  };\r\n-\r\n-  const findEventAtHour = (hour) => {\r\n-    if (!selectedDay) return null;\r\n-    const hourStr = hour === 24 ? '00:00' : formatHour(hour);\r\n-    const prefix = `${selectedDay}T${hourStr}`;\r\n-    return events.find(e => e.date.startsWith(prefix));\r\n-  };\r\n-\r\n-  const validate = () => {\r\n-    const errs = {};\r\n-    if (!formData.name.trim()) errs.name = 'Name is required';\r\n-    if (!formData.phone.trim()) errs.phone = 'Phone is required';\r\n-    else if (!/^\\d{10}$/.test(formData.phone)) errs.phone = 'Phone must be 10 digits';\r\n-    if (!['Point', 'Rappel'].includes(formData.type)) errs.type = 'Invalid type';\r\n-    setErrors(errs);\r\n-    return Object.keys(errs).length === 0;\r\n-  };\r\n-\r\n-  const handleAddOrUpdate = async () => {\r\n-    if (isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, editingHour)) {\r\n-      alert(\"You can't add or modify events for past date/time.\");\r\n-      return;\r\n-    }\r\n-    if (!validate()) return;\r\n-\r\n-    const hourStr = editingHour === 24 ? '00:00' : formatHour(editingHour);\r\n-    const dateTime = `${selectedDay}T${hourStr}:00`;\r\n-\r\n-    const eventPayload = {\r\n-      title: `${formData.type} - ${formData.name}`,\r\n-      date: dateTime,\r\n-      name: formData.name,\r\n-      phone: formData.phone,\r\n-      type: formData.type,\r\n-    };\r\n-\r\n-    try {\r\n-      const existingEvent = findEventAtHour(editingHour);\r\n-      if (existingEvent) {\r\n-        const res = await fetch(`http://localhost:5000/api/events/${existingEvent._id}`, {\r\n-          method: 'PUT',\r\n-          headers: authHeaders,\r\n-          body: JSON.stringify(eventPayload),\r\n-        });\r\n-        const updated = await res.json();\r\n-        setEvents(events.map(e => (e._id === updated._id ? updated : e)));\r\n-      } else {\r\n-        const res = await fetch('http://localhost:5000/api/events', {\r\n-          method: 'POST',\r\n-          headers: authHeaders,\r\n-          body: JSON.stringify(eventPayload),\r\n-        });\r\n-        const created = await res.json();\r\n-        setEvents([...events, created]);\r\n-      }\r\n-      setOpenEventForm(false);\r\n-      setEditingHour(null);\r\n-      setFormData({ name: '', phone: '', type: 'Point' });\r\n-      setErrors({});\r\n-    } catch (err) {\r\n-      console.error('Save event failed:', err);\r\n-    }\r\n-  };\r\n-\r\n-  const handleDelete = async (hourToDelete) => {\r\n-    if (isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, hourToDelete)) {\r\n-      alert(\"You can't delete events from past date/time.\");\r\n-      return;\r\n-    }\r\n-    const existingEvent = findEventAtHour(hourToDelete);\r\n-    if (!existingEvent) return;\r\n-\r\n-    try {\r\n-      await fetch(`http://localhost:5000/api/events/${existingEvent._id}`, {\r\n-        method: 'DELETE',\r\n-        headers: authHeaders,\r\n-      });\r\n-      setEvents(events.filter(e => e._id !== existingEvent._id));\r\n-      if (editingHour === hourToDelete) {\r\n-        setOpenEventForm(false);\r\n-        setEditingHour(null);\r\n-        setFormData({ name: '', phone: '', type: 'Point' });\r\n-        setErrors({});\r\n-      }\r\n-    } catch (err) {\r\n-      console.error('Delete event failed:', err);\r\n-    }\r\n-  };\r\n-\r\n-  const startEditing = (hour) => {\r\n-    if (isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, hour)) {\r\n-      alert(\"You can't add or modify events for past date/time.\");\r\n-      return;\r\n-    }\r\n-    const ev = findEventAtHour(hour);\r\n-    if (ev) {\r\n-      setFormData({\r\n-        name: ev.name,\r\n-        phone: ev.phone,\r\n-        type: ev.type,\r\n-      });\r\n-    } else {\r\n-      setFormData({ name: '', phone: '', type: 'Point' });\r\n-    }\r\n-    setEditingHour(hour);\r\n-    setErrors({});\r\n-    setOpenEventForm(true);\r\n-  };\r\n-\r\n-  const handleDateClick = (arg) => {\r\n-    const clickedDate = arg.dateStr;\r\n-    const hasEventOnDate = events.some(ev => ev.date.startsWith(clickedDate));\r\n-\r\n-    if (isDateBeforeToday(clickedDate) && !hasEventOnDate) {\r\n-      alert('No events on this past date.');\r\n-      return;\r\n-    }\r\n-\r\n-    setSelectedDay(clickedDate);\r\n-    setOpenDayModal(true);\r\n-    setEditingHour(null);\r\n-    setFormData({ name: '', phone: '', type: 'Point' });\r\n-    setErrors({});\r\n-  };\r\n-\r\n-  return (\r\n-    <>\r\n-      <NavBar\r\n-        email={profile?.email}\r\n-        onLogout={() => {\r\n-          localStorage.removeItem('token');\r\n-          // redirect if needed\r\n-        }}\r\n-      />\r\n-      <Container maxWidth=\"lg\" sx={{ mt: 4 }}>\r\n-        <Box boxShadow={3} p={2} bgcolor=\"white\" borderRadius={2}>\r\n-          <FullCalendar\r\n-            plugins={[dayGridPlugin, interactionPlugin]}\r\n-            initialView=\"dayGridMonth\"\r\n-            selectable={true}\r\n-            events={events}\r\n-            dateClick={handleDateClick}\r\n-          />\r\n-        </Box>\r\n-      </Container>\r\n-\r\n-      <Dialog\r\n-        open={openDayModal}\r\n-        onClose={() => setOpenDayModal(false)}\r\n-        maxWidth=\"lg\"\r\n-        fullWidth\r\n-      >\r\n-        <DialogTitle>Schedule for {selectedDay}</DialogTitle>\r\n-        <DialogContent>\r\n-          <Table>\r\n-            <TableHead>\r\n-              <TableRow>\r\n-                <TableCell>Hour</TableCell>\r\n-                <TableCell>Event Name</TableCell>\r\n-                <TableCell>Customer Name</TableCell>\r\n-                <TableCell>Customer Phone</TableCell>\r\n-                <TableCell>Status</TableCell>\r\n-                <TableCell>Action</TableCell>\r\n-              </TableRow>\r\n-            </TableHead>\r\n-\r\n-            <TableBody>\r\n-              {HOURS.map((hour) => {\r\n-                const ev = findEventAtHour(hour);\r\n-                const isPast = isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, hour);\r\n-\r\n-                return (\r\n-                  <TableRow key={hour}>\r\n-                    <TableCell>{formatHour(hour)}</TableCell>\r\n-                    <TableCell>{ev?.title || ''}</TableCell>\r\n-                    <TableCell>{ev?.name || ''}</TableCell>\r\n-                    <TableCell>{ev?.phone || ''}</TableCell>\r\n-                    <TableCell>{ev?.status || ''}</TableCell>\r\n-                    <TableCell>\r\n-                      {isPast ? (\r\n-                        <>\r\n-                          {ev ? (\r\n-                            <>\r\n-                              <IconButton size=\"small\" disabled title=\"Modify disabled on past date/time\">\r\n-                                <EditIcon />\r\n-                              </IconButton>\r\n-                              <IconButton size=\"small\" disabled title=\"Delete disabled on past date/time\">\r\n-                                <DeleteIcon />\r\n-                              </IconButton>\r\n-                            </>\r\n-                          ) : (\r\n-                            <IconButton size=\"small\" disabled title=\"Add disabled on past date/time\">\r\n-                              <AddIcon />\r\n-                            </IconButton>\r\n-                          )}\r\n-                        </>\r\n-                      ) : (\r\n-                        <>\r\n-                          <IconButton\r\n-                            color=\"primary\"\r\n-                            size=\"small\"\r\n-                            onClick={() => startEditing(hour)}\r\n-                            title={ev ? 'Modify' : 'Add'}\r\n-                          >\r\n-                            {ev ? <EditIcon /> : <AddIcon />}\r\n-                          </IconButton>\r\n-\r\n-                          {ev && (\r\n-                            <IconButton\r\n-                              color=\"error\"\r\n-                              size=\"small\"\r\n-                              onClick={() => handleDelete(hour)}\r\n-                              title=\"Delete\"\r\n-                            >\r\n-                              <DeleteIcon />\r\n-                            </IconButton>\r\n-                          )}\r\n-                        </>\r\n-                      )}\r\n-                    </TableCell>\r\n-                  </TableRow>\r\n-                );\r\n-              })}\r\n-            </TableBody>\r\n-          </Table>\r\n-        </DialogContent>\r\n-\r\n-        <DialogActions>\r\n-          <Button onClick={() => setOpenDayModal(false)}>Close</Button>\r\n-        </DialogActions>\r\n-      </Dialog>\r\n-\r\n-      <Dialog\r\n-        open={openEventForm}\r\n-        onClose={() => setOpenEventForm(false)}\r\n-        maxWidth=\"sm\"\r\n-        fullWidth\r\n-      >\r\n-        <DialogTitle>\r\n-          {editingHour !== null && findEventAtHour(editingHour)\r\n-            ? 'Modify Event'\r\n-            : 'Add Event'}\r\n-        </DialogTitle>\r\n-        <DialogContent>\r\n-          <Typography variant=\"subtitle1\" gutterBottom>\r\n-            For hour: {editingHour !== null ? formatHour(editingHour) : ''}\r\n-          </Typography>\r\n-\r\n-          <TextField\r\n-            margin=\"dense\"\r\n-            label=\"Customer Name\"\r\n-            fullWidth\r\n-            value={formData.name}\r\n-            onChange={(e) => setFormData({ ...formData, name: e.target.value })}\r\n-            error={!!errors.name}\r\n-            helperText={errors.name}\r\n-          />\r\n-          <TextField\r\n-            margin=\"dense\"\r\n-            label=\"Customer Phone\"\r\n-            fullWidth\r\n-            value={formData.phone}\r\n-            onChange={(e) => setFormData({ ...formData, phone: e.target.value })}\r\n-            error={!!errors.phone}\r\n-            helperText={errors.phone}\r\n-          />\r\n-          <TextField\r\n-            margin=\"dense\"\r\n-            select\r\n-            label=\"Type\"\r\n-            fullWidth\r\n-            value={formData.type}\r\n-            onChange={(e) => setFormData({ ...formData, type: e.target.value })}\r\n-          >\r\n-            <MenuItem value=\"Point\">Point</MenuItem>\r\n-            <MenuItem value=\"Rappel\">Rappel</MenuItem>\r\n-          </TextField>\r\n-        </DialogContent>\r\n-\r\n-        <DialogActions>\r\n-          <Button onClick={() => setOpenEventForm(false)}>Cancel</Button>\r\n-          <Button\r\n-            onClick={handleAddOrUpdate}\r\n-            variant=\"contained\"\r\n-            color=\"primary\"\r\n-          >\r\n-            Save\r\n-          </Button>\r\n-        </DialogActions>\r\n-      </Dialog>\r\n-    </>\r\n-  );\r\n-}\r\n\\ No newline at end of file\n"
                },
                {
                    "date": 1751917152224,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1 +1,415 @@\n-\n+import React, { useState, useEffect } from 'react';\r\n+import {\r\n+  Container,\r\n+  Box,\r\n+  Dialog,\r\n+  DialogTitle,\r\n+  DialogContent,\r\n+  DialogActions,\r\n+  Button,\r\n+  TextField,\r\n+  MenuItem,\r\n+  Table,\r\n+  TableHead,\r\n+  TableBody,\r\n+  TableRow,\r\n+  TableCell,\r\n+  Typography,\r\n+  IconButton,\r\n+} from '@mui/material';\r\n+import FullCalendar from '@fullcalendar/react';\r\n+import dayGridPlugin from '@fullcalendar/daygrid';\r\n+import interactionPlugin from '@fullcalendar/interaction';\r\n+import NavBar from '../components/NavBar';\r\n+\r\n+import AddIcon from '@mui/icons-material/Add';\r\n+import EditIcon from '@mui/icons-material/Edit';\r\n+import DeleteIcon from '@mui/icons-material/Delete';\r\n+\r\n+const HOURS = Array.from({ length: 17 }, (_, i) => 8 + i); // 08:00 to 00:00\r\n+\r\n+function formatHour(h) {\r\n+  return h === 24 ? '00:00' : `${h.toString().padStart(2, '0')}:00`;\r\n+}\r\n+\r\n+export default function Dashboard() {\r\n+  const [profile, setProfile] = useState(null);\r\n+  const [events, setEvents] = useState([]);\r\n+  const [selectedDay, setSelectedDay] = useState(null);\r\n+  const [openDayModal, setOpenDayModal] = useState(false);\r\n+\r\n+  const [openEventForm, setOpenEventForm] = useState(false);\r\n+  const [editingHour, setEditingHour] = useState(null);\r\n+  // Added status field with default 'confirmed'\r\n+  const [formData, setFormData] = useState({ name: '', phone: '', type: 'Point', status: 'confirmed' });\r\n+  const [errors, setErrors] = useState({});\r\n+\r\n+  const token = localStorage.getItem('token');\r\n+  const authHeaders = {\r\n+    Authorization: `Bearer ${token}`,\r\n+    'Content-Type': 'application/json',\r\n+  };\r\n+\r\n+  useEffect(() => {\r\n+    if (!token) return;\r\n+\r\n+    fetch('http://localhost:5000/api/admin/profile', { headers: authHeaders })\r\n+      .then(res => (res.ok ? res.json() : Promise.reject()))\r\n+      .then(setProfile)\r\n+      .catch(() => {\r\n+        localStorage.removeItem('token');\r\n+      });\r\n+\r\n+    fetch('http://localhost:5000/api/events', { headers: authHeaders })\r\n+      .then(res => res.json())\r\n+      .then(setEvents)\r\n+      .catch(console.error);\r\n+  }, [token]);\r\n+\r\n+  const isDateBeforeToday = (dateStr) => {\r\n+    if (!dateStr) return false;\r\n+    const selected = new Date(dateStr);\r\n+    const today = new Date();\r\n+    today.setHours(0, 0, 0, 0);\r\n+    return selected < today;\r\n+  };\r\n+\r\n+  const isHourInPast = (dateStr, hour) => {\r\n+    if (!dateStr) return false;\r\n+    const now = new Date();\r\n+    const selected = new Date(dateStr);\r\n+    selected.setHours(hour, 0, 0, 0);\r\n+    return selected < now;\r\n+  };\r\n+\r\n+  const findEventAtHour = (hour) => {\r\n+    if (!selectedDay) return null;\r\n+    const hourStr = hour === 24 ? '00:00' : formatHour(hour);\r\n+    const prefix = `${selectedDay}T${hourStr}`;\r\n+    return events.find(e => e.date.startsWith(prefix));\r\n+  };\r\n+\r\n+  const validate = () => {\r\n+    const errs = {};\r\n+    if (!formData.name.trim()) errs.name = 'Name is required';\r\n+    if (!formData.phone.trim()) errs.phone = 'Phone is required';\r\n+    else if (!/^\\d{10}$/.test(formData.phone)) errs.phone = 'Phone must be 10 digits';\r\n+    if (!['Point', 'Rappel'].includes(formData.type)) errs.type = 'Invalid type';\r\n+    // Add validation for status (must be confirmed or completed)\r\n+    if (!['confirmed', 'completed'].includes(formData.status)) errs.status = 'Invalid status';\r\n+    setErrors(errs);\r\n+    return Object.keys(errs).length === 0;\r\n+  };\r\n+\r\n+  // Helper: Can status be modified? Event date/time passed by at least 1 hour?\r\n+  const canModifyStatus = () => {\r\n+    if (!selectedDay || editingHour === null) return false;\r\n+    const eventDate = new Date(selectedDay);\r\n+    eventDate.setHours(editingHour, 0, 0, 0);\r\n+    const now = new Date();\r\n+    return now - eventDate >= 60 * 60 * 1000; // 1 hour in ms\r\n+  };\r\n+\r\n+  const handleAddOrUpdate = async () => {\r\n+    if (isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, editingHour)) {\r\n+      alert(\"You can't add or modify events for past date/time.\");\r\n+      return;\r\n+    }\r\n+    if (!validate()) return;\r\n+\r\n+    const hourStr = editingHour === 24 ? '00:00' : formatHour(editingHour);\r\n+    const dateTime = `${selectedDay}T${hourStr}:00`;\r\n+\r\n+    const eventPayload = {\r\n+      title: `${formData.type} - ${formData.name}`,\r\n+      date: dateTime,\r\n+      name: formData.name,\r\n+      phone: formData.phone,\r\n+      type: formData.type,\r\n+      status: formData.status,\r\n+    };\r\n+\r\n+    try {\r\n+      const existingEvent = findEventAtHour(editingHour);\r\n+      if (existingEvent) {\r\n+        const res = await fetch(`http://localhost:5000/api/events/${existingEvent._id}`, {\r\n+          method: 'PUT',\r\n+          headers: authHeaders,\r\n+          body: JSON.stringify(eventPayload),\r\n+        });\r\n+        const updated = await res.json();\r\n+        setEvents(events.map(e => (e._id === updated._id ? updated : e)));\r\n+      } else {\r\n+        const res = await fetch('http://localhost:5000/api/events', {\r\n+          method: 'POST',\r\n+          headers: authHeaders,\r\n+          body: JSON.stringify(eventPayload),\r\n+        });\r\n+        const created = await res.json();\r\n+        setEvents([...events, created]);\r\n+      }\r\n+      setOpenEventForm(false);\r\n+      setEditingHour(null);\r\n+      setFormData({ name: '', phone: '', type: 'Point', status: 'confirmed' });\r\n+      setErrors({});\r\n+    } catch (err) {\r\n+      console.error('Save event failed:', err);\r\n+    }\r\n+  };\r\n+\r\n+  const handleDelete = async (hourToDelete) => {\r\n+    if (isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, hourToDelete)) {\r\n+      alert(\"You can't delete events from past date/time.\");\r\n+      return;\r\n+    }\r\n+    const existingEvent = findEventAtHour(hourToDelete);\r\n+    if (!existingEvent) return;\r\n+\r\n+    try {\r\n+      await fetch(`http://localhost:5000/api/events/${existingEvent._id}`, {\r\n+        method: 'DELETE',\r\n+        headers: authHeaders,\r\n+      });\r\n+      setEvents(events.filter(e => e._id !== existingEvent._id));\r\n+      if (editingHour === hourToDelete) {\r\n+        setOpenEventForm(false);\r\n+        setEditingHour(null);\r\n+        setFormData({ name: '', phone: '', type: 'Point', status: 'confirmed' });\r\n+        setErrors({});\r\n+      }\r\n+    } catch (err) {\r\n+      console.error('Delete event failed:', err);\r\n+    }\r\n+  };\r\n+\r\n+  const startEditing = (hour) => {\r\n+    if (isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, hour)) {\r\n+      alert(\"You can't add or modify events for past date/time.\");\r\n+      return;\r\n+    }\r\n+    const ev = findEventAtHour(hour);\r\n+    if (ev) {\r\n+      setFormData({\r\n+        name: ev.name,\r\n+        phone: ev.phone,\r\n+        type: ev.type,\r\n+        status: ev.status || 'confirmed',\r\n+      });\r\n+    } else {\r\n+      setFormData({ name: '', phone: '', type: 'Point', status: 'confirmed' });\r\n+    }\r\n+    setEditingHour(hour);\r\n+    setErrors({});\r\n+    setOpenEventForm(true);\r\n+  };\r\n+\r\n+  const handleDateClick = (arg) => {\r\n+    const clickedDate = arg.dateStr;\r\n+    const hasEventOnDate = events.some(ev => ev.date.startsWith(clickedDate));\r\n+\r\n+    if (isDateBeforeToday(clickedDate) && !hasEventOnDate) {\r\n+      alert('No events on this past date.');\r\n+      return;\r\n+    }\r\n+\r\n+    setSelectedDay(clickedDate);\r\n+    setOpenDayModal(true);\r\n+    setEditingHour(null);\r\n+    setFormData({ name: '', phone: '', type: 'Point', status: 'confirmed' });\r\n+    setErrors({});\r\n+  };\r\n+\r\n+  return (\r\n+    <>\r\n+      <NavBar\r\n+        email={profile?.email}\r\n+        onLogout={() => {\r\n+          localStorage.removeItem('token');\r\n+          // redirect if needed\r\n+        }}\r\n+      />\r\n+      <Container maxWidth=\"lg\" sx={{ mt: 4 }}>\r\n+        <Box boxShadow={3} p={2} bgcolor=\"white\" borderRadius={2}>\r\n+          <FullCalendar\r\n+            plugins={[dayGridPlugin, interactionPlugin]}\r\n+            initialView=\"dayGridMonth\"\r\n+            selectable={true}\r\n+            events={events}\r\n+            dateClick={handleDateClick}\r\n+          />\r\n+        </Box>\r\n+      </Container>\r\n+\r\n+      <Dialog\r\n+        open={openDayModal}\r\n+        onClose={() => setOpenDayModal(false)}\r\n+        maxWidth=\"lg\"\r\n+        fullWidth\r\n+      >\r\n+        <DialogTitle>Schedule for {selectedDay}</DialogTitle>\r\n+        <DialogContent>\r\n+          <Table>\r\n+            <TableHead>\r\n+              <TableRow>\r\n+                <TableCell>Hour</TableCell>\r\n+                <TableCell>Event Name</TableCell>\r\n+                <TableCell>Customer Name</TableCell>\r\n+                <TableCell>Customer Phone</TableCell>\r\n+                <TableCell>Status</TableCell>\r\n+                <TableCell>Action</TableCell>\r\n+              </TableRow>\r\n+            </TableHead>\r\n+\r\n+            <TableBody>\r\n+              {HOURS.map((hour) => {\r\n+                const ev = findEventAtHour(hour);\r\n+                const isPast = isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, hour);\r\n+\r\n+                return (\r\n+                  <TableRow key={hour}>\r\n+                    <TableCell>{formatHour(hour)}</TableCell>\r\n+                    <TableCell>{ev?.title || ''}</TableCell>\r\n+                    <TableCell>{ev?.name || ''}</TableCell>\r\n+                    <TableCell>{ev?.phone || ''}</TableCell>\r\n+                    <TableCell>{ev?.status || ''}</TableCell>\r\n+                    <TableCell>\r\n+                      {isPast ? (\r\n+                        <>\r\n+                          {ev ? (\r\n+                            <>\r\n+                              <IconButton size=\"small\" disabled title=\"Modify disabled on past date/time\">\r\n+                                <EditIcon />\r\n+                              </IconButton>\r\n+                              <IconButton size=\"small\" disabled title=\"Delete disabled on past date/time\">\r\n+                                <DeleteIcon />\r\n+                              </IconButton>\r\n+                            </>\r\n+                          ) : (\r\n+                            <IconButton size=\"small\" disabled title=\"Add disabled on past date/time\">\r\n+                              <AddIcon />\r\n+                            </IconButton>\r\n+                          )}\r\n+                        </>\r\n+                      ) : (\r\n+                        <>\r\n+                          <IconButton\r\n+                            color=\"primary\"\r\n+                            size=\"small\"\r\n+                            onClick={() => startEditing(hour)}\r\n+                            title={ev ? 'Modify' : 'Add'}\r\n+                          >\r\n+                            {ev ? <EditIcon /> : <AddIcon />}\r\n+                          </IconButton>\r\n+\r\n+                          {ev && (\r\n+                            <IconButton\r\n+                              color=\"error\"\r\n+                              size=\"small\"\r\n+                              onClick={() => handleDelete(hour)}\r\n+                              title=\"Delete\"\r\n+                            >\r\n+                              <DeleteIcon />\r\n+                            </IconButton>\r\n+                          )}\r\n+                        </>\r\n+                      )}\r\n+                    </TableCell>\r\n+                  </TableRow>\r\n+                );\r\n+              })}\r\n+            </TableBody>\r\n+          </Table>\r\n+        </DialogContent>\r\n+\r\n+        <DialogActions>\r\n+          <Button onClick={() => setOpenDayModal(false)}>Close</Button>\r\n+        </DialogActions>\r\n+      </Dialog>\r\n+\r\n+      <Dialog\r\n+        open={openEventForm}\r\n+        onClose={() => setOpenEventForm(false)}\r\n+        maxWidth=\"sm\"\r\n+        fullWidth\r\n+      >\r\n+        <DialogTitle>\r\n+          {editingHour !== null && findEventAtHour(editingHour)\r\n+            ? 'Modify Event'\r\n+            : 'Add Event'}\r\n+        </DialogTitle>\r\n+        <DialogContent>\r\n+          <Typography variant=\"subtitle1\" gutterBottom>\r\n+            For hour: {editingHour !== null ? formatHour(editingHour) : ''}\r\n+          </Typography>\r\n+\r\n+          <TextField\r\n+            margin=\"dense\"\r\n+            label=\"Customer Name\"\r\n+            fullWidth\r\n+            value={formData.name}\r\n+            onChange={(e) => setFormData({ ...formData, name: e.target.value })}\r\n+            error={!!errors.name}\r\n+            helperText={errors.name}\r\n+          />\r\n+          <TextField\r\n+            margin=\"dense\"\r\n+            label=\"Customer Phone\"\r\n+            fullWidth\r\n+            value={formData.phone}\r\n+            onChange={(e) => setFormData({ ...formData, phone: e.target.value })}\r\n+            error={!!errors.phone}\r\n+            helperText={errors.phone}\r\n+          />\r\n+          <TextField\r\n+            margin=\"dense\"\r\n+            select\r\n+            label=\"Type\"\r\n+            fullWidth\r\n+            value={formData.type}\r\n+            onChange={(e) => setFormData({ ...formData, type: e.target.value })}\r\n+          >\r\n+            <MenuItem value=\"Point\">Point</MenuItem>\r\n+            <MenuItem value=\"Rappel\">Rappel</MenuItem>\r\n+          </TextField>\r\n+\r\n+          {/* Status field only editable if 1 hour passed */}\r\n+          {canModifyStatus() ? (\r\n+            <TextField\r\n+              margin=\"dense\"\r\n+              select\r\n+              label=\"Status\"\r\n+              fullWidth\r\n+              value={formData.status}\r\n+              onChange={(e) => setFormData({ ...formData, status: e.target.value })}\r\n+              error={!!errors.status}\r\n+              helperText={errors.status}\r\n+            >\r\n+              <MenuItem value=\"confirmed\">CONFIRMED</MenuItem>\r\n+              <MenuItem value=\"completed\">COMPLETED</MenuItem>\r\n+            </TextField>\r\n+          ) : (\r\n+            <Typography\r\n+              variant=\"body2\"\r\n+              color=\"textSecondary\"\r\n+              sx={{ mt: 2, mb: 1 }}\r\n+            >\r\n+              Status can only be modified starting 1 hour after the event time.\r\n+            </Typography>\r\n+          )}\r\n+        </DialogContent>\r\n+\r\n+        <DialogActions>\r\n+          <Button onClick={() => setOpenEventForm(false)}>Cancel</Button>\r\n+          <Button\r\n+            onClick={handleAddOrUpdate}\r\n+            variant=\"contained\"\r\n+            color=\"primary\"\r\n+            disabled={isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, editingHour)}\r\n+          >\r\n+            Save\r\n+          </Button>\r\n+        </DialogActions>\r\n+      </Dialog>\r\n+    </>\r\n+  );\r\n+}\r\n"
                },
                {
                    "date": 1751917201448,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -392,9 +392,9 @@\n               variant=\"body2\"\r\n               color=\"textSecondary\"\r\n               sx={{ mt: 2, mb: 1 }}\r\n             >\r\n-              Status can only be modified starting 1 hour after the event time.\r\n+              Status can only be modified  1 hour after the event time.\r\n             </Typography>\r\n           )}\r\n         </DialogContent>\r\n \r\n"
                },
                {
                    "date": 1751917366628,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,415 @@\n+import React, { useState, useEffect } from 'react';\r\n+import {\r\n+  Container,\r\n+  Box,\r\n+  Dialog,\r\n+  DialogTitle,\r\n+  DialogContent,\r\n+  DialogActions,\r\n+  Button,\r\n+  TextField,\r\n+  MenuItem,\r\n+  Table,\r\n+  TableHead,\r\n+  TableBody,\r\n+  TableRow,\r\n+  TableCell,\r\n+  Typography,\r\n+  IconButton,\r\n+} from '@mui/material';\r\n+import FullCalendar from '@fullcalendar/react';\r\n+import dayGridPlugin from '@fullcalendar/daygrid';\r\n+import interactionPlugin from '@fullcalendar/interaction';\r\n+import NavBar from '../components/NavBar';\r\n+\r\n+import AddIcon from '@mui/icons-material/Add';\r\n+import EditIcon from '@mui/icons-material/Edit';\r\n+import DeleteIcon from '@mui/icons-material/Delete';\r\n+\r\n+const HOURS = Array.from({ length: 17 }, (_, i) => 8 + i); // 08:00 to 00:00\r\n+\r\n+function formatHour(h) {\r\n+  return h === 24 ? '00:00' : `${h.toString().padStart(2, '0')}:00`;\r\n+}\r\n+\r\n+export default function Dashboard() {\r\n+  const [profile, setProfile] = useState(null);\r\n+  const [events, setEvents] = useState([]);\r\n+  const [selectedDay, setSelectedDay] = useState(null);\r\n+  const [openDayModal, setOpenDayModal] = useState(false);\r\n+\r\n+  const [openEventForm, setOpenEventForm] = useState(false);\r\n+  const [editingHour, setEditingHour] = useState(null);\r\n+  // Added status field with default 'confirmed'\r\n+  const [formData, setFormData] = useState({ name: '', phone: '', type: 'Point', status: 'CONFIRMED' });\r\n+  const [errors, setErrors] = useState({});\r\n+\r\n+  const token = localStorage.getItem('token');\r\n+  const authHeaders = {\r\n+    Authorization: `Bearer ${token}`,\r\n+    'Content-Type': 'application/json',\r\n+  };\r\n+\r\n+  useEffect(() => {\r\n+    if (!token) return;\r\n+\r\n+    fetch('http://localhost:5000/api/admin/profile', { headers: authHeaders })\r\n+      .then(res => (res.ok ? res.json() : Promise.reject()))\r\n+      .then(setProfile)\r\n+      .catch(() => {\r\n+        localStorage.removeItem('token');\r\n+      });\r\n+\r\n+    fetch('http://localhost:5000/api/events', { headers: authHeaders })\r\n+      .then(res => res.json())\r\n+      .then(setEvents)\r\n+      .catch(console.error);\r\n+  }, [token]);\r\n+\r\n+  const isDateBeforeToday = (dateStr) => {\r\n+    if (!dateStr) return false;\r\n+    const selected = new Date(dateStr);\r\n+    const today = new Date();\r\n+    today.setHours(0, 0, 0, 0);\r\n+    return selected < today;\r\n+  };\r\n+\r\n+  const isHourInPast = (dateStr, hour) => {\r\n+    if (!dateStr) return false;\r\n+    const now = new Date();\r\n+    const selected = new Date(dateStr);\r\n+    selected.setHours(hour, 0, 0, 0);\r\n+    return selected < now;\r\n+  };\r\n+\r\n+  const findEventAtHour = (hour) => {\r\n+    if (!selectedDay) return null;\r\n+    const hourStr = hour === 24 ? '00:00' : formatHour(hour);\r\n+    const prefix = `${selectedDay}T${hourStr}`;\r\n+    return events.find(e => e.date.startsWith(prefix));\r\n+  };\r\n+\r\n+  const validate = () => {\r\n+    const errs = {};\r\n+    if (!formData.name.trim()) errs.name = 'Name is required';\r\n+    if (!formData.phone.trim()) errs.phone = 'Phone is required';\r\n+    else if (!/^\\d{10}$/.test(formData.phone)) errs.phone = 'Phone must be 10 digits';\r\n+    if (!['Point', 'Rappel'].includes(formData.type)) errs.type = 'Invalid type';\r\n+    // Add validation for status (must be confirmed or completed)\r\n+    if (!['confirmed', 'completed'].includes(formData.status)) errs.status = 'Invalid status';\r\n+    setErrors(errs);\r\n+    return Object.keys(errs).length === 0;\r\n+  };\r\n+\r\n+  // Helper: Can status be modified? Event date/time passed by at least 1 hour?\r\n+  const canModifyStatus = () => {\r\n+    if (!selectedDay || editingHour === null) return false;\r\n+    const eventDate = new Date(selectedDay);\r\n+    eventDate.setHours(editingHour, 0, 0, 0);\r\n+    const now = new Date();\r\n+    return now - eventDate >= 60 * 60 * 1000; // 1 hour in ms\r\n+  };\r\n+\r\n+  const handleAddOrUpdate = async () => {\r\n+    if (isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, editingHour)) {\r\n+      alert(\"You can't add or modify events for past date/time.\");\r\n+      return;\r\n+    }\r\n+    if (!validate()) return;\r\n+\r\n+    const hourStr = editingHour === 24 ? '00:00' : formatHour(editingHour);\r\n+    const dateTime = `${selectedDay}T${hourStr}:00`;\r\n+\r\n+    const eventPayload = {\r\n+      title: `${formData.type} - ${formData.name}`,\r\n+      date: dateTime,\r\n+      name: formData.name,\r\n+      phone: formData.phone,\r\n+      type: formData.type,\r\n+      status: formData.status,\r\n+    };\r\n+\r\n+    try {\r\n+      const existingEvent = findEventAtHour(editingHour);\r\n+      if (existingEvent) {\r\n+        const res = await fetch(`http://localhost:5000/api/events/${existingEvent._id}`, {\r\n+          method: 'PUT',\r\n+          headers: authHeaders,\r\n+          body: JSON.stringify(eventPayload),\r\n+        });\r\n+        const updated = await res.json();\r\n+        setEvents(events.map(e => (e._id === updated._id ? updated : e)));\r\n+      } else {\r\n+        const res = await fetch('http://localhost:5000/api/events', {\r\n+          method: 'POST',\r\n+          headers: authHeaders,\r\n+          body: JSON.stringify(eventPayload),\r\n+        });\r\n+        const created = await res.json();\r\n+        setEvents([...events, created]);\r\n+      }\r\n+      setOpenEventForm(false);\r\n+      setEditingHour(null);\r\n+      setFormData({ name: '', phone: '', type: 'Point', status: 'confirmed' });\r\n+      setErrors({});\r\n+    } catch (err) {\r\n+      console.error('Save event failed:', err);\r\n+    }\r\n+  };\r\n+\r\n+  const handleDelete = async (hourToDelete) => {\r\n+    if (isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, hourToDelete)) {\r\n+      alert(\"You can't delete events from past date/time.\");\r\n+      return;\r\n+    }\r\n+    const existingEvent = findEventAtHour(hourToDelete);\r\n+    if (!existingEvent) return;\r\n+\r\n+    try {\r\n+      await fetch(`http://localhost:5000/api/events/${existingEvent._id}`, {\r\n+        method: 'DELETE',\r\n+        headers: authHeaders,\r\n+      });\r\n+      setEvents(events.filter(e => e._id !== existingEvent._id));\r\n+      if (editingHour === hourToDelete) {\r\n+        setOpenEventForm(false);\r\n+        setEditingHour(null);\r\n+        setFormData({ name: '', phone: '', type: 'Point', status: 'confirmed' });\r\n+        setErrors({});\r\n+      }\r\n+    } catch (err) {\r\n+      console.error('Delete event failed:', err);\r\n+    }\r\n+  };\r\n+\r\n+  const startEditing = (hour) => {\r\n+    if (isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, hour)) {\r\n+      alert(\"You can't add or modify events for past date/time.\");\r\n+      return;\r\n+    }\r\n+    const ev = findEventAtHour(hour);\r\n+    if (ev) {\r\n+      setFormData({\r\n+        name: ev.name,\r\n+        phone: ev.phone,\r\n+        type: ev.type,\r\n+        status: ev.status || 'confirmed',\r\n+      });\r\n+    } else {\r\n+      setFormData({ name: '', phone: '', type: 'Point', status: 'confirmed' });\r\n+    }\r\n+    setEditingHour(hour);\r\n+    setErrors({});\r\n+    setOpenEventForm(true);\r\n+  };\r\n+\r\n+  const handleDateClick = (arg) => {\r\n+    const clickedDate = arg.dateStr;\r\n+    const hasEventOnDate = events.some(ev => ev.date.startsWith(clickedDate));\r\n+\r\n+    if (isDateBeforeToday(clickedDate) && !hasEventOnDate) {\r\n+      alert('No events on this past date.');\r\n+      return;\r\n+    }\r\n+\r\n+    setSelectedDay(clickedDate);\r\n+    setOpenDayModal(true);\r\n+    setEditingHour(null);\r\n+    setFormData({ name: '', phone: '', type: 'Point', status: 'confirmed' });\r\n+    setErrors({});\r\n+  };\r\n+\r\n+  return (\r\n+    <>\r\n+      <NavBar\r\n+        email={profile?.email}\r\n+        onLogout={() => {\r\n+          localStorage.removeItem('token');\r\n+          // redirect if needed\r\n+        }}\r\n+      />\r\n+      <Container maxWidth=\"lg\" sx={{ mt: 4 }}>\r\n+        <Box boxShadow={3} p={2} bgcolor=\"white\" borderRadius={2}>\r\n+          <FullCalendar\r\n+            plugins={[dayGridPlugin, interactionPlugin]}\r\n+            initialView=\"dayGridMonth\"\r\n+            selectable={true}\r\n+            events={events}\r\n+            dateClick={handleDateClick}\r\n+          />\r\n+        </Box>\r\n+      </Container>\r\n+\r\n+      <Dialog\r\n+        open={openDayModal}\r\n+        onClose={() => setOpenDayModal(false)}\r\n+        maxWidth=\"lg\"\r\n+        fullWidth\r\n+      >\r\n+        <DialogTitle>Schedule for {selectedDay}</DialogTitle>\r\n+        <DialogContent>\r\n+          <Table>\r\n+            <TableHead>\r\n+              <TableRow>\r\n+                <TableCell>Hour</TableCell>\r\n+                <TableCell>Event Name</TableCell>\r\n+                <TableCell>Customer Name</TableCell>\r\n+                <TableCell>Customer Phone</TableCell>\r\n+                <TableCell>Status</TableCell>\r\n+                <TableCell>Action</TableCell>\r\n+              </TableRow>\r\n+            </TableHead>\r\n+\r\n+            <TableBody>\r\n+              {HOURS.map((hour) => {\r\n+                const ev = findEventAtHour(hour);\r\n+                const isPast = isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, hour);\r\n+\r\n+                return (\r\n+                  <TableRow key={hour}>\r\n+                    <TableCell>{formatHour(hour)}</TableCell>\r\n+                    <TableCell>{ev?.title || ''}</TableCell>\r\n+                    <TableCell>{ev?.name || ''}</TableCell>\r\n+                    <TableCell>{ev?.phone || ''}</TableCell>\r\n+                    <TableCell>{ev?.status || ''}</TableCell>\r\n+                    <TableCell>\r\n+                      {isPast ? (\r\n+                        <>\r\n+                          {ev ? (\r\n+                            <>\r\n+                              <IconButton size=\"small\" disabled title=\"Modify disabled on past date/time\">\r\n+                                <EditIcon />\r\n+                              </IconButton>\r\n+                              <IconButton size=\"small\" disabled title=\"Delete disabled on past date/time\">\r\n+                                <DeleteIcon />\r\n+                              </IconButton>\r\n+                            </>\r\n+                          ) : (\r\n+                            <IconButton size=\"small\" disabled title=\"Add disabled on past date/time\">\r\n+                              <AddIcon />\r\n+                            </IconButton>\r\n+                          )}\r\n+                        </>\r\n+                      ) : (\r\n+                        <>\r\n+                          <IconButton\r\n+                            color=\"primary\"\r\n+                            size=\"small\"\r\n+                            onClick={() => startEditing(hour)}\r\n+                            title={ev ? 'Modify' : 'Add'}\r\n+                          >\r\n+                            {ev ? <EditIcon /> : <AddIcon />}\r\n+                          </IconButton>\r\n+\r\n+                          {ev && (\r\n+                            <IconButton\r\n+                              color=\"error\"\r\n+                              size=\"small\"\r\n+                              onClick={() => handleDelete(hour)}\r\n+                              title=\"Delete\"\r\n+                            >\r\n+                              <DeleteIcon />\r\n+                            </IconButton>\r\n+                          )}\r\n+                        </>\r\n+                      )}\r\n+                    </TableCell>\r\n+                  </TableRow>\r\n+                );\r\n+              })}\r\n+            </TableBody>\r\n+          </Table>\r\n+        </DialogContent>\r\n+\r\n+        <DialogActions>\r\n+          <Button onClick={() => setOpenDayModal(false)}>Close</Button>\r\n+        </DialogActions>\r\n+      </Dialog>\r\n+\r\n+      <Dialog\r\n+        open={openEventForm}\r\n+        onClose={() => setOpenEventForm(false)}\r\n+        maxWidth=\"sm\"\r\n+        fullWidth\r\n+      >\r\n+        <DialogTitle>\r\n+          {editingHour !== null && findEventAtHour(editingHour)\r\n+            ? 'Modify Event'\r\n+            : 'Add Event'}\r\n+        </DialogTitle>\r\n+        <DialogContent>\r\n+          <Typography variant=\"subtitle1\" gutterBottom>\r\n+            For hour: {editingHour !== null ? formatHour(editingHour) : ''}\r\n+          </Typography>\r\n+\r\n+          <TextField\r\n+            margin=\"dense\"\r\n+            label=\"Customer Name\"\r\n+            fullWidth\r\n+            value={formData.name}\r\n+            onChange={(e) => setFormData({ ...formData, name: e.target.value })}\r\n+            error={!!errors.name}\r\n+            helperText={errors.name}\r\n+          />\r\n+          <TextField\r\n+            margin=\"dense\"\r\n+            label=\"Customer Phone\"\r\n+            fullWidth\r\n+            value={formData.phone}\r\n+            onChange={(e) => setFormData({ ...formData, phone: e.target.value })}\r\n+            error={!!errors.phone}\r\n+            helperText={errors.phone}\r\n+          />\r\n+          <TextField\r\n+            margin=\"dense\"\r\n+            select\r\n+            label=\"Type\"\r\n+            fullWidth\r\n+            value={formData.type}\r\n+            onChange={(e) => setFormData({ ...formData, type: e.target.value })}\r\n+          >\r\n+            <MenuItem value=\"Point\">Point</MenuItem>\r\n+            <MenuItem value=\"Rappel\">Rappel</MenuItem>\r\n+          </TextField>\r\n+\r\n+          {/* Status field only editable if 1 hour passed */}\r\n+          {canModifyStatus() ? (\r\n+            <TextField\r\n+              margin=\"dense\"\r\n+              select\r\n+              label=\"Status\"\r\n+              fullWidth\r\n+              value={formData.status}\r\n+              onChange={(e) => setFormData({ ...formData, status: e.target.value })}\r\n+              error={!!errors.status}\r\n+              helperText={errors.status}\r\n+            >\r\n+              <MenuItem value=\"confirmed\">CONFIRMED</MenuItem>\r\n+              <MenuItem value=\"completed\">COMPLETED</MenuItem>\r\n+            </TextField>\r\n+          ) : (\r\n+            <Typography\r\n+              variant=\"body2\"\r\n+              color=\"textSecondary\"\r\n+              sx={{ mt: 2, mb: 1 }}\r\n+            >\r\n+              Status can only be modified  one hour after the event time.\r\n+            </Typography>\r\n+          )}\r\n+        </DialogContent>\r\n+\r\n+        <DialogActions>\r\n+          <Button onClick={() => setOpenEventForm(false)}>Cancel</Button>\r\n+          <Button\r\n+            onClick={handleAddOrUpdate}\r\n+            variant=\"contained\"\r\n+            color=\"primary\"\r\n+            disabled={isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, editingHour)}\r\n+          >\r\n+            Save\r\n+          </Button>\r\n+        </DialogActions>\r\n+      </Dialog>\r\n+    </>\r\n+  );\r\n+}\r\n"
                },
                {
                    "date": 1751917376624,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,415 @@\n+import React, { useState, useEffect } from 'react';\r\n+import {\r\n+  Container,\r\n+  Box,\r\n+  Dialog,\r\n+  DialogTitle,\r\n+  DialogContent,\r\n+  DialogActions,\r\n+  Button,\r\n+  TextField,\r\n+  MenuItem,\r\n+  Table,\r\n+  TableHead,\r\n+  TableBody,\r\n+  TableRow,\r\n+  TableCell,\r\n+  Typography,\r\n+  IconButton,\r\n+} from '@mui/material';\r\n+import FullCalendar from '@fullcalendar/react';\r\n+import dayGridPlugin from '@fullcalendar/daygrid';\r\n+import interactionPlugin from '@fullcalendar/interaction';\r\n+import NavBar from '../components/NavBar';\r\n+\r\n+import AddIcon from '@mui/icons-material/Add';\r\n+import EditIcon from '@mui/icons-material/Edit';\r\n+import DeleteIcon from '@mui/icons-material/Delete';\r\n+\r\n+const HOURS = Array.from({ length: 17 }, (_, i) => 8 + i); // 08:00 to 00:00\r\n+\r\n+function formatHour(h) {\r\n+  return h === 24 ? '00:00' : `${h.toString().padStart(2, '0')}:00`;\r\n+}\r\n+\r\n+export default function Dashboard() {\r\n+  const [profile, setProfile] = useState(null);\r\n+  const [events, setEvents] = useState([]);\r\n+  const [selectedDay, setSelectedDay] = useState(null);\r\n+  const [openDayModal, setOpenDayModal] = useState(false);\r\n+\r\n+  const [openEventForm, setOpenEventForm] = useState(false);\r\n+  const [editingHour, setEditingHour] = useState(null);\r\n+  // Added status field with default 'confirmed'\r\n+  const [formData, setFormData] = useState({ name: '', phone: '', type: 'Point', status: 'CONFIRMED' });\r\n+  const [errors, setErrors] = useState({});\r\n+\r\n+  const token = localStorage.getItem('token');\r\n+  const authHeaders = {\r\n+    Authorization: `Bearer ${token}`,\r\n+    'Content-Type': 'application/json',\r\n+  };\r\n+\r\n+  useEffect(() => {\r\n+    if (!token) return;\r\n+\r\n+    fetch('http://localhost:5000/api/admin/profile', { headers: authHeaders })\r\n+      .then(res => (res.ok ? res.json() : Promise.reject()))\r\n+      .then(setProfile)\r\n+      .catch(() => {\r\n+        localStorage.removeItem('token');\r\n+      });\r\n+\r\n+    fetch('http://localhost:5000/api/events', { headers: authHeaders })\r\n+      .then(res => res.json())\r\n+      .then(setEvents)\r\n+      .catch(console.error);\r\n+  }, [token]);\r\n+\r\n+  const isDateBeforeToday = (dateStr) => {\r\n+    if (!dateStr) return false;\r\n+    const selected = new Date(dateStr);\r\n+    const today = new Date();\r\n+    today.setHours(0, 0, 0, 0);\r\n+    return selected < today;\r\n+  };\r\n+\r\n+  const isHourInPast = (dateStr, hour) => {\r\n+    if (!dateStr) return false;\r\n+    const now = new Date();\r\n+    const selected = new Date(dateStr);\r\n+    selected.setHours(hour, 0, 0, 0);\r\n+    return selected < now;\r\n+  };\r\n+\r\n+  const findEventAtHour = (hour) => {\r\n+    if (!selectedDay) return null;\r\n+    const hourStr = hour === 24 ? '00:00' : formatHour(hour);\r\n+    const prefix = `${selectedDay}T${hourStr}`;\r\n+    return events.find(e => e.date.startsWith(prefix));\r\n+  };\r\n+\r\n+  const validate = () => {\r\n+    const errs = {};\r\n+    if (!formData.name.trim()) errs.name = 'Name is required';\r\n+    if (!formData.phone.trim()) errs.phone = 'Phone is required';\r\n+    else if (!/^\\d{10}$/.test(formData.phone)) errs.phone = 'Phone must be 10 digits';\r\n+    if (!['Point', 'Rappel'].includes(formData.type)) errs.type = 'Invalid type';\r\n+    // Add validation for status (must be confirmed or completed)\r\n+    if (!['', 'completed'].includes(formData.status)) errs.status = 'Invalid status';\r\n+    setErrors(errs);\r\n+    return Object.keys(errs).length === 0;\r\n+  };\r\n+\r\n+  // Helper: Can status be modified? Event date/time passed by at least 1 hour?\r\n+  const canModifyStatus = () => {\r\n+    if (!selectedDay || editingHour === null) return false;\r\n+    const eventDate = new Date(selectedDay);\r\n+    eventDate.setHours(editingHour, 0, 0, 0);\r\n+    const now = new Date();\r\n+    return now - eventDate >= 60 * 60 * 1000; // 1 hour in ms\r\n+  };\r\n+\r\n+  const handleAddOrUpdate = async () => {\r\n+    if (isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, editingHour)) {\r\n+      alert(\"You can't add or modify events for past date/time.\");\r\n+      return;\r\n+    }\r\n+    if (!validate()) return;\r\n+\r\n+    const hourStr = editingHour === 24 ? '00:00' : formatHour(editingHour);\r\n+    const dateTime = `${selectedDay}T${hourStr}:00`;\r\n+\r\n+    const eventPayload = {\r\n+      title: `${formData.type} - ${formData.name}`,\r\n+      date: dateTime,\r\n+      name: formData.name,\r\n+      phone: formData.phone,\r\n+      type: formData.type,\r\n+      status: formData.status,\r\n+    };\r\n+\r\n+    try {\r\n+      const existingEvent = findEventAtHour(editingHour);\r\n+      if (existingEvent) {\r\n+        const res = await fetch(`http://localhost:5000/api/events/${existingEvent._id}`, {\r\n+          method: 'PUT',\r\n+          headers: authHeaders,\r\n+          body: JSON.stringify(eventPayload),\r\n+        });\r\n+        const updated = await res.json();\r\n+        setEvents(events.map(e => (e._id === updated._id ? updated : e)));\r\n+      } else {\r\n+        const res = await fetch('http://localhost:5000/api/events', {\r\n+          method: 'POST',\r\n+          headers: authHeaders,\r\n+          body: JSON.stringify(eventPayload),\r\n+        });\r\n+        const created = await res.json();\r\n+        setEvents([...events, created]);\r\n+      }\r\n+      setOpenEventForm(false);\r\n+      setEditingHour(null);\r\n+      setFormData({ name: '', phone: '', type: 'Point', status: 'confirmed' });\r\n+      setErrors({});\r\n+    } catch (err) {\r\n+      console.error('Save event failed:', err);\r\n+    }\r\n+  };\r\n+\r\n+  const handleDelete = async (hourToDelete) => {\r\n+    if (isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, hourToDelete)) {\r\n+      alert(\"You can't delete events from past date/time.\");\r\n+      return;\r\n+    }\r\n+    const existingEvent = findEventAtHour(hourToDelete);\r\n+    if (!existingEvent) return;\r\n+\r\n+    try {\r\n+      await fetch(`http://localhost:5000/api/events/${existingEvent._id}`, {\r\n+        method: 'DELETE',\r\n+        headers: authHeaders,\r\n+      });\r\n+      setEvents(events.filter(e => e._id !== existingEvent._id));\r\n+      if (editingHour === hourToDelete) {\r\n+        setOpenEventForm(false);\r\n+        setEditingHour(null);\r\n+        setFormData({ name: '', phone: '', type: 'Point', status: 'confirmed' });\r\n+        setErrors({});\r\n+      }\r\n+    } catch (err) {\r\n+      console.error('Delete event failed:', err);\r\n+    }\r\n+  };\r\n+\r\n+  const startEditing = (hour) => {\r\n+    if (isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, hour)) {\r\n+      alert(\"You can't add or modify events for past date/time.\");\r\n+      return;\r\n+    }\r\n+    const ev = findEventAtHour(hour);\r\n+    if (ev) {\r\n+      setFormData({\r\n+        name: ev.name,\r\n+        phone: ev.phone,\r\n+        type: ev.type,\r\n+        status: ev.status || 'confirmed',\r\n+      });\r\n+    } else {\r\n+      setFormData({ name: '', phone: '', type: 'Point', status: 'confirmed' });\r\n+    }\r\n+    setEditingHour(hour);\r\n+    setErrors({});\r\n+    setOpenEventForm(true);\r\n+  };\r\n+\r\n+  const handleDateClick = (arg) => {\r\n+    const clickedDate = arg.dateStr;\r\n+    const hasEventOnDate = events.some(ev => ev.date.startsWith(clickedDate));\r\n+\r\n+    if (isDateBeforeToday(clickedDate) && !hasEventOnDate) {\r\n+      alert('No events on this past date.');\r\n+      return;\r\n+    }\r\n+\r\n+    setSelectedDay(clickedDate);\r\n+    setOpenDayModal(true);\r\n+    setEditingHour(null);\r\n+    setFormData({ name: '', phone: '', type: 'Point', status: 'confirmed' });\r\n+    setErrors({});\r\n+  };\r\n+\r\n+  return (\r\n+    <>\r\n+      <NavBar\r\n+        email={profile?.email}\r\n+        onLogout={() => {\r\n+          localStorage.removeItem('token');\r\n+          // redirect if needed\r\n+        }}\r\n+      />\r\n+      <Container maxWidth=\"lg\" sx={{ mt: 4 }}>\r\n+        <Box boxShadow={3} p={2} bgcolor=\"white\" borderRadius={2}>\r\n+          <FullCalendar\r\n+            plugins={[dayGridPlugin, interactionPlugin]}\r\n+            initialView=\"dayGridMonth\"\r\n+            selectable={true}\r\n+            events={events}\r\n+            dateClick={handleDateClick}\r\n+          />\r\n+        </Box>\r\n+      </Container>\r\n+\r\n+      <Dialog\r\n+        open={openDayModal}\r\n+        onClose={() => setOpenDayModal(false)}\r\n+        maxWidth=\"lg\"\r\n+        fullWidth\r\n+      >\r\n+        <DialogTitle>Schedule for {selectedDay}</DialogTitle>\r\n+        <DialogContent>\r\n+          <Table>\r\n+            <TableHead>\r\n+              <TableRow>\r\n+                <TableCell>Hour</TableCell>\r\n+                <TableCell>Event Name</TableCell>\r\n+                <TableCell>Customer Name</TableCell>\r\n+                <TableCell>Customer Phone</TableCell>\r\n+                <TableCell>Status</TableCell>\r\n+                <TableCell>Action</TableCell>\r\n+              </TableRow>\r\n+            </TableHead>\r\n+\r\n+            <TableBody>\r\n+              {HOURS.map((hour) => {\r\n+                const ev = findEventAtHour(hour);\r\n+                const isPast = isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, hour);\r\n+\r\n+                return (\r\n+                  <TableRow key={hour}>\r\n+                    <TableCell>{formatHour(hour)}</TableCell>\r\n+                    <TableCell>{ev?.title || ''}</TableCell>\r\n+                    <TableCell>{ev?.name || ''}</TableCell>\r\n+                    <TableCell>{ev?.phone || ''}</TableCell>\r\n+                    <TableCell>{ev?.status || ''}</TableCell>\r\n+                    <TableCell>\r\n+                      {isPast ? (\r\n+                        <>\r\n+                          {ev ? (\r\n+                            <>\r\n+                              <IconButton size=\"small\" disabled title=\"Modify disabled on past date/time\">\r\n+                                <EditIcon />\r\n+                              </IconButton>\r\n+                              <IconButton size=\"small\" disabled title=\"Delete disabled on past date/time\">\r\n+                                <DeleteIcon />\r\n+                              </IconButton>\r\n+                            </>\r\n+                          ) : (\r\n+                            <IconButton size=\"small\" disabled title=\"Add disabled on past date/time\">\r\n+                              <AddIcon />\r\n+                            </IconButton>\r\n+                          )}\r\n+                        </>\r\n+                      ) : (\r\n+                        <>\r\n+                          <IconButton\r\n+                            color=\"primary\"\r\n+                            size=\"small\"\r\n+                            onClick={() => startEditing(hour)}\r\n+                            title={ev ? 'Modify' : 'Add'}\r\n+                          >\r\n+                            {ev ? <EditIcon /> : <AddIcon />}\r\n+                          </IconButton>\r\n+\r\n+                          {ev && (\r\n+                            <IconButton\r\n+                              color=\"error\"\r\n+                              size=\"small\"\r\n+                              onClick={() => handleDelete(hour)}\r\n+                              title=\"Delete\"\r\n+                            >\r\n+                              <DeleteIcon />\r\n+                            </IconButton>\r\n+                          )}\r\n+                        </>\r\n+                      )}\r\n+                    </TableCell>\r\n+                  </TableRow>\r\n+                );\r\n+              })}\r\n+            </TableBody>\r\n+          </Table>\r\n+        </DialogContent>\r\n+\r\n+        <DialogActions>\r\n+          <Button onClick={() => setOpenDayModal(false)}>Close</Button>\r\n+        </DialogActions>\r\n+      </Dialog>\r\n+\r\n+      <Dialog\r\n+        open={openEventForm}\r\n+        onClose={() => setOpenEventForm(false)}\r\n+        maxWidth=\"sm\"\r\n+        fullWidth\r\n+      >\r\n+        <DialogTitle>\r\n+          {editingHour !== null && findEventAtHour(editingHour)\r\n+            ? 'Modify Event'\r\n+            : 'Add Event'}\r\n+        </DialogTitle>\r\n+        <DialogContent>\r\n+          <Typography variant=\"subtitle1\" gutterBottom>\r\n+            For hour: {editingHour !== null ? formatHour(editingHour) : ''}\r\n+          </Typography>\r\n+\r\n+          <TextField\r\n+            margin=\"dense\"\r\n+            label=\"Customer Name\"\r\n+            fullWidth\r\n+            value={formData.name}\r\n+            onChange={(e) => setFormData({ ...formData, name: e.target.value })}\r\n+            error={!!errors.name}\r\n+            helperText={errors.name}\r\n+          />\r\n+          <TextField\r\n+            margin=\"dense\"\r\n+            label=\"Customer Phone\"\r\n+            fullWidth\r\n+            value={formData.phone}\r\n+            onChange={(e) => setFormData({ ...formData, phone: e.target.value })}\r\n+            error={!!errors.phone}\r\n+            helperText={errors.phone}\r\n+          />\r\n+          <TextField\r\n+            margin=\"dense\"\r\n+            select\r\n+            label=\"Type\"\r\n+            fullWidth\r\n+            value={formData.type}\r\n+            onChange={(e) => setFormData({ ...formData, type: e.target.value })}\r\n+          >\r\n+            <MenuItem value=\"Point\">Point</MenuItem>\r\n+            <MenuItem value=\"Rappel\">Rappel</MenuItem>\r\n+          </TextField>\r\n+\r\n+          {/* Status field only editable if 1 hour passed */}\r\n+          {canModifyStatus() ? (\r\n+            <TextField\r\n+              margin=\"dense\"\r\n+              select\r\n+              label=\"Status\"\r\n+              fullWidth\r\n+              value={formData.status}\r\n+              onChange={(e) => setFormData({ ...formData, status: e.target.value })}\r\n+              error={!!errors.status}\r\n+              helperText={errors.status}\r\n+            >\r\n+              <MenuItem value=\"confirmed\">CONFIRMED</MenuItem>\r\n+              <MenuItem value=\"completed\">COMPLETED</MenuItem>\r\n+            </TextField>\r\n+          ) : (\r\n+            <Typography\r\n+              variant=\"body2\"\r\n+              color=\"textSecondary\"\r\n+              sx={{ mt: 2, mb: 1 }}\r\n+            >\r\n+              Status can only be modified  one hour after the event time.\r\n+            </Typography>\r\n+          )}\r\n+        </DialogContent>\r\n+\r\n+        <DialogActions>\r\n+          <Button onClick={() => setOpenEventForm(false)}>Cancel</Button>\r\n+          <Button\r\n+            onClick={handleAddOrUpdate}\r\n+            variant=\"contained\"\r\n+            color=\"primary\"\r\n+            disabled={isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, editingHour)}\r\n+          >\r\n+            Save\r\n+          </Button>\r\n+        </DialogActions>\r\n+      </Dialog>\r\n+    </>\r\n+  );\r\n+}\r\n"
                },
                {
                    "date": 1751917383663,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,415 @@\n+import React, { useState, useEffect } from 'react';\r\n+import {\r\n+  Container,\r\n+  Box,\r\n+  Dialog,\r\n+  DialogTitle,\r\n+  DialogContent,\r\n+  DialogActions,\r\n+  Button,\r\n+  TextField,\r\n+  MenuItem,\r\n+  Table,\r\n+  TableHead,\r\n+  TableBody,\r\n+  TableRow,\r\n+  TableCell,\r\n+  Typography,\r\n+  IconButton,\r\n+} from '@mui/material';\r\n+import FullCalendar from '@fullcalendar/react';\r\n+import dayGridPlugin from '@fullcalendar/daygrid';\r\n+import interactionPlugin from '@fullcalendar/interaction';\r\n+import NavBar from '../components/NavBar';\r\n+\r\n+import AddIcon from '@mui/icons-material/Add';\r\n+import EditIcon from '@mui/icons-material/Edit';\r\n+import DeleteIcon from '@mui/icons-material/Delete';\r\n+\r\n+const HOURS = Array.from({ length: 17 }, (_, i) => 8 + i); // 08:00 to 00:00\r\n+\r\n+function formatHour(h) {\r\n+  return h === 24 ? '00:00' : `${h.toString().padStart(2, '0')}:00`;\r\n+}\r\n+\r\n+export default function Dashboard() {\r\n+  const [profile, setProfile] = useState(null);\r\n+  const [events, setEvents] = useState([]);\r\n+  const [selectedDay, setSelectedDay] = useState(null);\r\n+  const [openDayModal, setOpenDayModal] = useState(false);\r\n+\r\n+  const [openEventForm, setOpenEventForm] = useState(false);\r\n+  const [editingHour, setEditingHour] = useState(null);\r\n+  // Added status field with default 'confirmed'\r\n+  const [formData, setFormData] = useState({ name: '', phone: '', type: 'Point', status: 'CONFIRMED' });\r\n+  const [errors, setErrors] = useState({});\r\n+\r\n+  const token = localStorage.getItem('token');\r\n+  const authHeaders = {\r\n+    Authorization: `Bearer ${token}`,\r\n+    'Content-Type': 'application/json',\r\n+  };\r\n+\r\n+  useEffect(() => {\r\n+    if (!token) return;\r\n+\r\n+    fetch('http://localhost:5000/api/admin/profile', { headers: authHeaders })\r\n+      .then(res => (res.ok ? res.json() : Promise.reject()))\r\n+      .then(setProfile)\r\n+      .catch(() => {\r\n+        localStorage.removeItem('token');\r\n+      });\r\n+\r\n+    fetch('http://localhost:5000/api/events', { headers: authHeaders })\r\n+      .then(res => res.json())\r\n+      .then(setEvents)\r\n+      .catch(console.error);\r\n+  }, [token]);\r\n+\r\n+  const isDateBeforeToday = (dateStr) => {\r\n+    if (!dateStr) return false;\r\n+    const selected = new Date(dateStr);\r\n+    const today = new Date();\r\n+    today.setHours(0, 0, 0, 0);\r\n+    return selected < today;\r\n+  };\r\n+\r\n+  const isHourInPast = (dateStr, hour) => {\r\n+    if (!dateStr) return false;\r\n+    const now = new Date();\r\n+    const selected = new Date(dateStr);\r\n+    selected.setHours(hour, 0, 0, 0);\r\n+    return selected < now;\r\n+  };\r\n+\r\n+  const findEventAtHour = (hour) => {\r\n+    if (!selectedDay) return null;\r\n+    const hourStr = hour === 24 ? '00:00' : formatHour(hour);\r\n+    const prefix = `${selectedDay}T${hourStr}`;\r\n+    return events.find(e => e.date.startsWith(prefix));\r\n+  };\r\n+\r\n+  const validate = () => {\r\n+    const errs = {};\r\n+    if (!formData.name.trim()) errs.name = 'Name is required';\r\n+    if (!formData.phone.trim()) errs.phone = 'Phone is required';\r\n+    else if (!/^\\d{10}$/.test(formData.phone)) errs.phone = 'Phone must be 10 digits';\r\n+    if (!['Point', 'Rappel'].includes(formData.type)) errs.type = 'Invalid type';\r\n+    // Add validation for status (must be confirmed or completed)\r\n+    if (!['CONFIRMED', 'COMPLETED'].includes(formData.status)) errs.status = 'Invalid status';\r\n+    setErrors(errs);\r\n+    return Object.keys(errs).length === 0;\r\n+  };\r\n+\r\n+  // Helper: Can status be modified? Event date/time passed by at least 1 hour?\r\n+  const canModifyStatus = () => {\r\n+    if (!selectedDay || editingHour === null) return false;\r\n+    const eventDate = new Date(selectedDay);\r\n+    eventDate.setHours(editingHour, 0, 0, 0);\r\n+    const now = new Date();\r\n+    return now - eventDate >= 60 * 60 * 1000; // 1 hour in ms\r\n+  };\r\n+\r\n+  const handleAddOrUpdate = async () => {\r\n+    if (isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, editingHour)) {\r\n+      alert(\"You can't add or modify events for past date/time.\");\r\n+      return;\r\n+    }\r\n+    if (!validate()) return;\r\n+\r\n+    const hourStr = editingHour === 24 ? '00:00' : formatHour(editingHour);\r\n+    const dateTime = `${selectedDay}T${hourStr}:00`;\r\n+\r\n+    const eventPayload = {\r\n+      title: `${formData.type} - ${formData.name}`,\r\n+      date: dateTime,\r\n+      name: formData.name,\r\n+      phone: formData.phone,\r\n+      type: formData.type,\r\n+      status: formData.status,\r\n+    };\r\n+\r\n+    try {\r\n+      const existingEvent = findEventAtHour(editingHour);\r\n+      if (existingEvent) {\r\n+        const res = await fetch(`http://localhost:5000/api/events/${existingEvent._id}`, {\r\n+          method: 'PUT',\r\n+          headers: authHeaders,\r\n+          body: JSON.stringify(eventPayload),\r\n+        });\r\n+        const updated = await res.json();\r\n+        setEvents(events.map(e => (e._id === updated._id ? updated : e)));\r\n+      } else {\r\n+        const res = await fetch('http://localhost:5000/api/events', {\r\n+          method: 'POST',\r\n+          headers: authHeaders,\r\n+          body: JSON.stringify(eventPayload),\r\n+        });\r\n+        const created = await res.json();\r\n+        setEvents([...events, created]);\r\n+      }\r\n+      setOpenEventForm(false);\r\n+      setEditingHour(null);\r\n+      setFormData({ name: '', phone: '', type: 'Point', status: 'confirmed' });\r\n+      setErrors({});\r\n+    } catch (err) {\r\n+      console.error('Save event failed:', err);\r\n+    }\r\n+  };\r\n+\r\n+  const handleDelete = async (hourToDelete) => {\r\n+    if (isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, hourToDelete)) {\r\n+      alert(\"You can't delete events from past date/time.\");\r\n+      return;\r\n+    }\r\n+    const existingEvent = findEventAtHour(hourToDelete);\r\n+    if (!existingEvent) return;\r\n+\r\n+    try {\r\n+      await fetch(`http://localhost:5000/api/events/${existingEvent._id}`, {\r\n+        method: 'DELETE',\r\n+        headers: authHeaders,\r\n+      });\r\n+      setEvents(events.filter(e => e._id !== existingEvent._id));\r\n+      if (editingHour === hourToDelete) {\r\n+        setOpenEventForm(false);\r\n+        setEditingHour(null);\r\n+        setFormData({ name: '', phone: '', type: 'Point', status: 'confirmed' });\r\n+        setErrors({});\r\n+      }\r\n+    } catch (err) {\r\n+      console.error('Delete event failed:', err);\r\n+    }\r\n+  };\r\n+\r\n+  const startEditing = (hour) => {\r\n+    if (isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, hour)) {\r\n+      alert(\"You can't add or modify events for past date/time.\");\r\n+      return;\r\n+    }\r\n+    const ev = findEventAtHour(hour);\r\n+    if (ev) {\r\n+      setFormData({\r\n+        name: ev.name,\r\n+        phone: ev.phone,\r\n+        type: ev.type,\r\n+        status: ev.status || 'confirmed',\r\n+      });\r\n+    } else {\r\n+      setFormData({ name: '', phone: '', type: 'Point', status: 'confirmed' });\r\n+    }\r\n+    setEditingHour(hour);\r\n+    setErrors({});\r\n+    setOpenEventForm(true);\r\n+  };\r\n+\r\n+  const handleDateClick = (arg) => {\r\n+    const clickedDate = arg.dateStr;\r\n+    const hasEventOnDate = events.some(ev => ev.date.startsWith(clickedDate));\r\n+\r\n+    if (isDateBeforeToday(clickedDate) && !hasEventOnDate) {\r\n+      alert('No events on this past date.');\r\n+      return;\r\n+    }\r\n+\r\n+    setSelectedDay(clickedDate);\r\n+    setOpenDayModal(true);\r\n+    setEditingHour(null);\r\n+    setFormData({ name: '', phone: '', type: 'Point', status: 'confirmed' });\r\n+    setErrors({});\r\n+  };\r\n+\r\n+  return (\r\n+    <>\r\n+      <NavBar\r\n+        email={profile?.email}\r\n+        onLogout={() => {\r\n+          localStorage.removeItem('token');\r\n+          // redirect if needed\r\n+        }}\r\n+      />\r\n+      <Container maxWidth=\"lg\" sx={{ mt: 4 }}>\r\n+        <Box boxShadow={3} p={2} bgcolor=\"white\" borderRadius={2}>\r\n+          <FullCalendar\r\n+            plugins={[dayGridPlugin, interactionPlugin]}\r\n+            initialView=\"dayGridMonth\"\r\n+            selectable={true}\r\n+            events={events}\r\n+            dateClick={handleDateClick}\r\n+          />\r\n+        </Box>\r\n+      </Container>\r\n+\r\n+      <Dialog\r\n+        open={openDayModal}\r\n+        onClose={() => setOpenDayModal(false)}\r\n+        maxWidth=\"lg\"\r\n+        fullWidth\r\n+      >\r\n+        <DialogTitle>Schedule for {selectedDay}</DialogTitle>\r\n+        <DialogContent>\r\n+          <Table>\r\n+            <TableHead>\r\n+              <TableRow>\r\n+                <TableCell>Hour</TableCell>\r\n+                <TableCell>Event Name</TableCell>\r\n+                <TableCell>Customer Name</TableCell>\r\n+                <TableCell>Customer Phone</TableCell>\r\n+                <TableCell>Status</TableCell>\r\n+                <TableCell>Action</TableCell>\r\n+              </TableRow>\r\n+            </TableHead>\r\n+\r\n+            <TableBody>\r\n+              {HOURS.map((hour) => {\r\n+                const ev = findEventAtHour(hour);\r\n+                const isPast = isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, hour);\r\n+\r\n+                return (\r\n+                  <TableRow key={hour}>\r\n+                    <TableCell>{formatHour(hour)}</TableCell>\r\n+                    <TableCell>{ev?.title || ''}</TableCell>\r\n+                    <TableCell>{ev?.name || ''}</TableCell>\r\n+                    <TableCell>{ev?.phone || ''}</TableCell>\r\n+                    <TableCell>{ev?.status || ''}</TableCell>\r\n+                    <TableCell>\r\n+                      {isPast ? (\r\n+                        <>\r\n+                          {ev ? (\r\n+                            <>\r\n+                              <IconButton size=\"small\" disabled title=\"Modify disabled on past date/time\">\r\n+                                <EditIcon />\r\n+                              </IconButton>\r\n+                              <IconButton size=\"small\" disabled title=\"Delete disabled on past date/time\">\r\n+                                <DeleteIcon />\r\n+                              </IconButton>\r\n+                            </>\r\n+                          ) : (\r\n+                            <IconButton size=\"small\" disabled title=\"Add disabled on past date/time\">\r\n+                              <AddIcon />\r\n+                            </IconButton>\r\n+                          )}\r\n+                        </>\r\n+                      ) : (\r\n+                        <>\r\n+                          <IconButton\r\n+                            color=\"primary\"\r\n+                            size=\"small\"\r\n+                            onClick={() => startEditing(hour)}\r\n+                            title={ev ? 'Modify' : 'Add'}\r\n+                          >\r\n+                            {ev ? <EditIcon /> : <AddIcon />}\r\n+                          </IconButton>\r\n+\r\n+                          {ev && (\r\n+                            <IconButton\r\n+                              color=\"error\"\r\n+                              size=\"small\"\r\n+                              onClick={() => handleDelete(hour)}\r\n+                              title=\"Delete\"\r\n+                            >\r\n+                              <DeleteIcon />\r\n+                            </IconButton>\r\n+                          )}\r\n+                        </>\r\n+                      )}\r\n+                    </TableCell>\r\n+                  </TableRow>\r\n+                );\r\n+              })}\r\n+            </TableBody>\r\n+          </Table>\r\n+        </DialogContent>\r\n+\r\n+        <DialogActions>\r\n+          <Button onClick={() => setOpenDayModal(false)}>Close</Button>\r\n+        </DialogActions>\r\n+      </Dialog>\r\n+\r\n+      <Dialog\r\n+        open={openEventForm}\r\n+        onClose={() => setOpenEventForm(false)}\r\n+        maxWidth=\"sm\"\r\n+        fullWidth\r\n+      >\r\n+        <DialogTitle>\r\n+          {editingHour !== null && findEventAtHour(editingHour)\r\n+            ? 'Modify Event'\r\n+            : 'Add Event'}\r\n+        </DialogTitle>\r\n+        <DialogContent>\r\n+          <Typography variant=\"subtitle1\" gutterBottom>\r\n+            For hour: {editingHour !== null ? formatHour(editingHour) : ''}\r\n+          </Typography>\r\n+\r\n+          <TextField\r\n+            margin=\"dense\"\r\n+            label=\"Customer Name\"\r\n+            fullWidth\r\n+            value={formData.name}\r\n+            onChange={(e) => setFormData({ ...formData, name: e.target.value })}\r\n+            error={!!errors.name}\r\n+            helperText={errors.name}\r\n+          />\r\n+          <TextField\r\n+            margin=\"dense\"\r\n+            label=\"Customer Phone\"\r\n+            fullWidth\r\n+            value={formData.phone}\r\n+            onChange={(e) => setFormData({ ...formData, phone: e.target.value })}\r\n+            error={!!errors.phone}\r\n+            helperText={errors.phone}\r\n+          />\r\n+          <TextField\r\n+            margin=\"dense\"\r\n+            select\r\n+            label=\"Type\"\r\n+            fullWidth\r\n+            value={formData.type}\r\n+            onChange={(e) => setFormData({ ...formData, type: e.target.value })}\r\n+          >\r\n+            <MenuItem value=\"Point\">Point</MenuItem>\r\n+            <MenuItem value=\"Rappel\">Rappel</MenuItem>\r\n+          </TextField>\r\n+\r\n+          {/* Status field only editable if 1 hour passed */}\r\n+          {canModifyStatus() ? (\r\n+            <TextField\r\n+              margin=\"dense\"\r\n+              select\r\n+              label=\"Status\"\r\n+              fullWidth\r\n+              value={formData.status}\r\n+              onChange={(e) => setFormData({ ...formData, status: e.target.value })}\r\n+              error={!!errors.status}\r\n+              helperText={errors.status}\r\n+            >\r\n+              <MenuItem value=\"confirmed\">CONFIRMED</MenuItem>\r\n+              <MenuItem value=\"completed\">COMPLETED</MenuItem>\r\n+            </TextField>\r\n+          ) : (\r\n+            <Typography\r\n+              variant=\"body2\"\r\n+              color=\"textSecondary\"\r\n+              sx={{ mt: 2, mb: 1 }}\r\n+            >\r\n+              Status can only be modified  one hour after the event time.\r\n+            </Typography>\r\n+          )}\r\n+        </DialogContent>\r\n+\r\n+        <DialogActions>\r\n+          <Button onClick={() => setOpenEventForm(false)}>Cancel</Button>\r\n+          <Button\r\n+            onClick={handleAddOrUpdate}\r\n+            variant=\"contained\"\r\n+            color=\"primary\"\r\n+            disabled={isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, editingHour)}\r\n+          >\r\n+            Save\r\n+          </Button>\r\n+        </DialogActions>\r\n+      </Dialog>\r\n+    </>\r\n+  );\r\n+}\r\n"
                },
                {
                    "date": 1751917396072,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,415 @@\n+import React, { useState, useEffect } from 'react';\r\n+import {\r\n+  Container,\r\n+  Box,\r\n+  Dialog,\r\n+  DialogTitle,\r\n+  DialogContent,\r\n+  DialogActions,\r\n+  Button,\r\n+  TextField,\r\n+  MenuItem,\r\n+  Table,\r\n+  TableHead,\r\n+  TableBody,\r\n+  TableRow,\r\n+  TableCell,\r\n+  Typography,\r\n+  IconButton,\r\n+} from '@mui/material';\r\n+import FullCalendar from '@fullcalendar/react';\r\n+import dayGridPlugin from '@fullcalendar/daygrid';\r\n+import interactionPlugin from '@fullcalendar/interaction';\r\n+import NavBar from '../components/NavBar';\r\n+\r\n+import AddIcon from '@mui/icons-material/Add';\r\n+import EditIcon from '@mui/icons-material/Edit';\r\n+import DeleteIcon from '@mui/icons-material/Delete';\r\n+\r\n+const HOURS = Array.from({ length: 17 }, (_, i) => 8 + i); // 08:00 to 00:00\r\n+\r\n+function formatHour(h) {\r\n+  return h === 24 ? '00:00' : `${h.toString().padStart(2, '0')}:00`;\r\n+}\r\n+\r\n+export default function Dashboard() {\r\n+  const [profile, setProfile] = useState(null);\r\n+  const [events, setEvents] = useState([]);\r\n+  const [selectedDay, setSelectedDay] = useState(null);\r\n+  const [openDayModal, setOpenDayModal] = useState(false);\r\n+\r\n+  const [openEventForm, setOpenEventForm] = useState(false);\r\n+  const [editingHour, setEditingHour] = useState(null);\r\n+  // Added status field with default 'confirmed'\r\n+  const [formData, setFormData] = useState({ name: '', phone: '', type: 'Point', status: 'CONFIRMED' });\r\n+  const [errors, setErrors] = useState({});\r\n+\r\n+  const token = localStorage.getItem('token');\r\n+  const authHeaders = {\r\n+    Authorization: `Bearer ${token}`,\r\n+    'Content-Type': 'application/json',\r\n+  };\r\n+\r\n+  useEffect(() => {\r\n+    if (!token) return;\r\n+\r\n+    fetch('http://localhost:5000/api/admin/profile', { headers: authHeaders })\r\n+      .then(res => (res.ok ? res.json() : Promise.reject()))\r\n+      .then(setProfile)\r\n+      .catch(() => {\r\n+        localStorage.removeItem('token');\r\n+      });\r\n+\r\n+    fetch('http://localhost:5000/api/events', { headers: authHeaders })\r\n+      .then(res => res.json())\r\n+      .then(setEvents)\r\n+      .catch(console.error);\r\n+  }, [token]);\r\n+\r\n+  const isDateBeforeToday = (dateStr) => {\r\n+    if (!dateStr) return false;\r\n+    const selected = new Date(dateStr);\r\n+    const today = new Date();\r\n+    today.setHours(0, 0, 0, 0);\r\n+    return selected < today;\r\n+  };\r\n+\r\n+  const isHourInPast = (dateStr, hour) => {\r\n+    if (!dateStr) return false;\r\n+    const now = new Date();\r\n+    const selected = new Date(dateStr);\r\n+    selected.setHours(hour, 0, 0, 0);\r\n+    return selected < now;\r\n+  };\r\n+\r\n+  const findEventAtHour = (hour) => {\r\n+    if (!selectedDay) return null;\r\n+    const hourStr = hour === 24 ? '00:00' : formatHour(hour);\r\n+    const prefix = `${selectedDay}T${hourStr}`;\r\n+    return events.find(e => e.date.startsWith(prefix));\r\n+  };\r\n+\r\n+  const validate = () => {\r\n+    const errs = {};\r\n+    if (!formData.name.trim()) errs.name = 'Name is required';\r\n+    if (!formData.phone.trim()) errs.phone = 'Phone is required';\r\n+    else if (!/^\\d{10}$/.test(formData.phone)) errs.phone = 'Phone must be 10 digits';\r\n+    if (!['Point', 'Rappel'].includes(formData.type)) errs.type = 'Invalid type';\r\n+    // Add validation for status (must be confirmed or completed)\r\n+    if (!['CONFIRMED', 'COMPLETED'].includes(formData.status)) errs.status = 'Invalid status';\r\n+    setErrors(errs);\r\n+    return Object.keys(errs).length === 0;\r\n+  };\r\n+\r\n+  // Helper: Can status be modified? Event date/time passed by at least 1 hour?\r\n+  const canModifyStatus = () => {\r\n+    if (!selectedDay || editingHour === null) return false;\r\n+    const eventDate = new Date(selectedDay);\r\n+    eventDate.setHours(editingHour, 0, 0, 0);\r\n+    const now = new Date();\r\n+    return now - eventDate >= 60 * 60 * 1000; // 1 hour in ms\r\n+  };\r\n+\r\n+  const handleAddOrUpdate = async () => {\r\n+    if (isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, editingHour)) {\r\n+      alert(\"You can't add or modify events for past date/time.\");\r\n+      return;\r\n+    }\r\n+    if (!validate()) return;\r\n+\r\n+    const hourStr = editingHour === 24 ? '00:00' : formatHour(editingHour);\r\n+    const dateTime = `${selectedDay}T${hourStr}:00`;\r\n+\r\n+    const eventPayload = {\r\n+      title: `${formData.type} - ${formData.name}`,\r\n+      date: dateTime,\r\n+      name: formData.name,\r\n+      phone: formData.phone,\r\n+      type: formData.type,\r\n+      status: formData.status,\r\n+    };\r\n+\r\n+    try {\r\n+      const existingEvent = findEventAtHour(editingHour);\r\n+      if (existingEvent) {\r\n+        const res = await fetch(`http://localhost:5000/api/events/${existingEvent._id}`, {\r\n+          method: 'PUT',\r\n+          headers: authHeaders,\r\n+          body: JSON.stringify(eventPayload),\r\n+        });\r\n+        const updated = await res.json();\r\n+        setEvents(events.map(e => (e._id === updated._id ? updated : e)));\r\n+      } else {\r\n+        const res = await fetch('http://localhost:5000/api/events', {\r\n+          method: 'POST',\r\n+          headers: authHeaders,\r\n+          body: JSON.stringify(eventPayload),\r\n+        });\r\n+        const created = await res.json();\r\n+        setEvents([...events, created]);\r\n+      }\r\n+      setOpenEventForm(false);\r\n+      setEditingHour(null);\r\n+      setFormData({ name: '', phone: '', type: 'Point', status: 'CONFIRMED' });\r\n+      setErrors({});\r\n+    } catch (err) {\r\n+      console.error('Save event failed:', err);\r\n+    }\r\n+  };\r\n+\r\n+  const handleDelete = async (hourToDelete) => {\r\n+    if (isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, hourToDelete)) {\r\n+      alert(\"You can't delete events from past date/time.\");\r\n+      return;\r\n+    }\r\n+    const existingEvent = findEventAtHour(hourToDelete);\r\n+    if (!existingEvent) return;\r\n+\r\n+    try {\r\n+      await fetch(`http://localhost:5000/api/events/${existingEvent._id}`, {\r\n+        method: 'DELETE',\r\n+        headers: authHeaders,\r\n+      });\r\n+      setEvents(events.filter(e => e._id !== existingEvent._id));\r\n+      if (editingHour === hourToDelete) {\r\n+        setOpenEventForm(false);\r\n+        setEditingHour(null);\r\n+        setFormData({ name: '', phone: '', type: 'Point', status: 'confirmed' });\r\n+        setErrors({});\r\n+      }\r\n+    } catch (err) {\r\n+      console.error('Delete event failed:', err);\r\n+    }\r\n+  };\r\n+\r\n+  const startEditing = (hour) => {\r\n+    if (isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, hour)) {\r\n+      alert(\"You can't add or modify events for past date/time.\");\r\n+      return;\r\n+    }\r\n+    const ev = findEventAtHour(hour);\r\n+    if (ev) {\r\n+      setFormData({\r\n+        name: ev.name,\r\n+        phone: ev.phone,\r\n+        type: ev.type,\r\n+        status: ev.status || 'confirmed',\r\n+      });\r\n+    } else {\r\n+      setFormData({ name: '', phone: '', type: 'Point', status: 'confirmed' });\r\n+    }\r\n+    setEditingHour(hour);\r\n+    setErrors({});\r\n+    setOpenEventForm(true);\r\n+  };\r\n+\r\n+  const handleDateClick = (arg) => {\r\n+    const clickedDate = arg.dateStr;\r\n+    const hasEventOnDate = events.some(ev => ev.date.startsWith(clickedDate));\r\n+\r\n+    if (isDateBeforeToday(clickedDate) && !hasEventOnDate) {\r\n+      alert('No events on this past date.');\r\n+      return;\r\n+    }\r\n+\r\n+    setSelectedDay(clickedDate);\r\n+    setOpenDayModal(true);\r\n+    setEditingHour(null);\r\n+    setFormData({ name: '', phone: '', type: 'Point', status: 'confirmed' });\r\n+    setErrors({});\r\n+  };\r\n+\r\n+  return (\r\n+    <>\r\n+      <NavBar\r\n+        email={profile?.email}\r\n+        onLogout={() => {\r\n+          localStorage.removeItem('token');\r\n+          // redirect if needed\r\n+        }}\r\n+      />\r\n+      <Container maxWidth=\"lg\" sx={{ mt: 4 }}>\r\n+        <Box boxShadow={3} p={2} bgcolor=\"white\" borderRadius={2}>\r\n+          <FullCalendar\r\n+            plugins={[dayGridPlugin, interactionPlugin]}\r\n+            initialView=\"dayGridMonth\"\r\n+            selectable={true}\r\n+            events={events}\r\n+            dateClick={handleDateClick}\r\n+          />\r\n+        </Box>\r\n+      </Container>\r\n+\r\n+      <Dialog\r\n+        open={openDayModal}\r\n+        onClose={() => setOpenDayModal(false)}\r\n+        maxWidth=\"lg\"\r\n+        fullWidth\r\n+      >\r\n+        <DialogTitle>Schedule for {selectedDay}</DialogTitle>\r\n+        <DialogContent>\r\n+          <Table>\r\n+            <TableHead>\r\n+              <TableRow>\r\n+                <TableCell>Hour</TableCell>\r\n+                <TableCell>Event Name</TableCell>\r\n+                <TableCell>Customer Name</TableCell>\r\n+                <TableCell>Customer Phone</TableCell>\r\n+                <TableCell>Status</TableCell>\r\n+                <TableCell>Action</TableCell>\r\n+              </TableRow>\r\n+            </TableHead>\r\n+\r\n+            <TableBody>\r\n+              {HOURS.map((hour) => {\r\n+                const ev = findEventAtHour(hour);\r\n+                const isPast = isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, hour);\r\n+\r\n+                return (\r\n+                  <TableRow key={hour}>\r\n+                    <TableCell>{formatHour(hour)}</TableCell>\r\n+                    <TableCell>{ev?.title || ''}</TableCell>\r\n+                    <TableCell>{ev?.name || ''}</TableCell>\r\n+                    <TableCell>{ev?.phone || ''}</TableCell>\r\n+                    <TableCell>{ev?.status || ''}</TableCell>\r\n+                    <TableCell>\r\n+                      {isPast ? (\r\n+                        <>\r\n+                          {ev ? (\r\n+                            <>\r\n+                              <IconButton size=\"small\" disabled title=\"Modify disabled on past date/time\">\r\n+                                <EditIcon />\r\n+                              </IconButton>\r\n+                              <IconButton size=\"small\" disabled title=\"Delete disabled on past date/time\">\r\n+                                <DeleteIcon />\r\n+                              </IconButton>\r\n+                            </>\r\n+                          ) : (\r\n+                            <IconButton size=\"small\" disabled title=\"Add disabled on past date/time\">\r\n+                              <AddIcon />\r\n+                            </IconButton>\r\n+                          )}\r\n+                        </>\r\n+                      ) : (\r\n+                        <>\r\n+                          <IconButton\r\n+                            color=\"primary\"\r\n+                            size=\"small\"\r\n+                            onClick={() => startEditing(hour)}\r\n+                            title={ev ? 'Modify' : 'Add'}\r\n+                          >\r\n+                            {ev ? <EditIcon /> : <AddIcon />}\r\n+                          </IconButton>\r\n+\r\n+                          {ev && (\r\n+                            <IconButton\r\n+                              color=\"error\"\r\n+                              size=\"small\"\r\n+                              onClick={() => handleDelete(hour)}\r\n+                              title=\"Delete\"\r\n+                            >\r\n+                              <DeleteIcon />\r\n+                            </IconButton>\r\n+                          )}\r\n+                        </>\r\n+                      )}\r\n+                    </TableCell>\r\n+                  </TableRow>\r\n+                );\r\n+              })}\r\n+            </TableBody>\r\n+          </Table>\r\n+        </DialogContent>\r\n+\r\n+        <DialogActions>\r\n+          <Button onClick={() => setOpenDayModal(false)}>Close</Button>\r\n+        </DialogActions>\r\n+      </Dialog>\r\n+\r\n+      <Dialog\r\n+        open={openEventForm}\r\n+        onClose={() => setOpenEventForm(false)}\r\n+        maxWidth=\"sm\"\r\n+        fullWidth\r\n+      >\r\n+        <DialogTitle>\r\n+          {editingHour !== null && findEventAtHour(editingHour)\r\n+            ? 'Modify Event'\r\n+            : 'Add Event'}\r\n+        </DialogTitle>\r\n+        <DialogContent>\r\n+          <Typography variant=\"subtitle1\" gutterBottom>\r\n+            For hour: {editingHour !== null ? formatHour(editingHour) : ''}\r\n+          </Typography>\r\n+\r\n+          <TextField\r\n+            margin=\"dense\"\r\n+            label=\"Customer Name\"\r\n+            fullWidth\r\n+            value={formData.name}\r\n+            onChange={(e) => setFormData({ ...formData, name: e.target.value })}\r\n+            error={!!errors.name}\r\n+            helperText={errors.name}\r\n+          />\r\n+          <TextField\r\n+            margin=\"dense\"\r\n+            label=\"Customer Phone\"\r\n+            fullWidth\r\n+            value={formData.phone}\r\n+            onChange={(e) => setFormData({ ...formData, phone: e.target.value })}\r\n+            error={!!errors.phone}\r\n+            helperText={errors.phone}\r\n+          />\r\n+          <TextField\r\n+            margin=\"dense\"\r\n+            select\r\n+            label=\"Type\"\r\n+            fullWidth\r\n+            value={formData.type}\r\n+            onChange={(e) => setFormData({ ...formData, type: e.target.value })}\r\n+          >\r\n+            <MenuItem value=\"Point\">Point</MenuItem>\r\n+            <MenuItem value=\"Rappel\">Rappel</MenuItem>\r\n+          </TextField>\r\n+\r\n+          {/* Status field only editable if 1 hour passed */}\r\n+          {canModifyStatus() ? (\r\n+            <TextField\r\n+              margin=\"dense\"\r\n+              select\r\n+              label=\"Status\"\r\n+              fullWidth\r\n+              value={formData.status}\r\n+              onChange={(e) => setFormData({ ...formData, status: e.target.value })}\r\n+              error={!!errors.status}\r\n+              helperText={errors.status}\r\n+            >\r\n+              <MenuItem value=\"confirmed\">CONFIRMED</MenuItem>\r\n+              <MenuItem value=\"completed\">COMPLETED</MenuItem>\r\n+            </TextField>\r\n+          ) : (\r\n+            <Typography\r\n+              variant=\"body2\"\r\n+              color=\"textSecondary\"\r\n+              sx={{ mt: 2, mb: 1 }}\r\n+            >\r\n+              Status can only be modified  one hour after the event time.\r\n+            </Typography>\r\n+          )}\r\n+        </DialogContent>\r\n+\r\n+        <DialogActions>\r\n+          <Button onClick={() => setOpenEventForm(false)}>Cancel</Button>\r\n+          <Button\r\n+            onClick={handleAddOrUpdate}\r\n+            variant=\"contained\"\r\n+            color=\"primary\"\r\n+            disabled={isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, editingHour)}\r\n+          >\r\n+            Save\r\n+          </Button>\r\n+        </DialogActions>\r\n+      </Dialog>\r\n+    </>\r\n+  );\r\n+}\r\n"
                },
                {
                    "date": 1751917402509,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,415 @@\n+import React, { useState, useEffect } from 'react';\r\n+import {\r\n+  Container,\r\n+  Box,\r\n+  Dialog,\r\n+  DialogTitle,\r\n+  DialogContent,\r\n+  DialogActions,\r\n+  Button,\r\n+  TextField,\r\n+  MenuItem,\r\n+  Table,\r\n+  TableHead,\r\n+  TableBody,\r\n+  TableRow,\r\n+  TableCell,\r\n+  Typography,\r\n+  IconButton,\r\n+} from '@mui/material';\r\n+import FullCalendar from '@fullcalendar/react';\r\n+import dayGridPlugin from '@fullcalendar/daygrid';\r\n+import interactionPlugin from '@fullcalendar/interaction';\r\n+import NavBar from '../components/NavBar';\r\n+\r\n+import AddIcon from '@mui/icons-material/Add';\r\n+import EditIcon from '@mui/icons-material/Edit';\r\n+import DeleteIcon from '@mui/icons-material/Delete';\r\n+\r\n+const HOURS = Array.from({ length: 17 }, (_, i) => 8 + i); // 08:00 to 00:00\r\n+\r\n+function formatHour(h) {\r\n+  return h === 24 ? '00:00' : `${h.toString().padStart(2, '0')}:00`;\r\n+}\r\n+\r\n+export default function Dashboard() {\r\n+  const [profile, setProfile] = useState(null);\r\n+  const [events, setEvents] = useState([]);\r\n+  const [selectedDay, setSelectedDay] = useState(null);\r\n+  const [openDayModal, setOpenDayModal] = useState(false);\r\n+\r\n+  const [openEventForm, setOpenEventForm] = useState(false);\r\n+  const [editingHour, setEditingHour] = useState(null);\r\n+  // Added status field with default 'confirmed'\r\n+  const [formData, setFormData] = useState({ name: '', phone: '', type: 'Point', status: 'CONFIRMED' });\r\n+  const [errors, setErrors] = useState({});\r\n+\r\n+  const token = localStorage.getItem('token');\r\n+  const authHeaders = {\r\n+    Authorization: `Bearer ${token}`,\r\n+    'Content-Type': 'application/json',\r\n+  };\r\n+\r\n+  useEffect(() => {\r\n+    if (!token) return;\r\n+\r\n+    fetch('http://localhost:5000/api/admin/profile', { headers: authHeaders })\r\n+      .then(res => (res.ok ? res.json() : Promise.reject()))\r\n+      .then(setProfile)\r\n+      .catch(() => {\r\n+        localStorage.removeItem('token');\r\n+      });\r\n+\r\n+    fetch('http://localhost:5000/api/events', { headers: authHeaders })\r\n+      .then(res => res.json())\r\n+      .then(setEvents)\r\n+      .catch(console.error);\r\n+  }, [token]);\r\n+\r\n+  const isDateBeforeToday = (dateStr) => {\r\n+    if (!dateStr) return false;\r\n+    const selected = new Date(dateStr);\r\n+    const today = new Date();\r\n+    today.setHours(0, 0, 0, 0);\r\n+    return selected < today;\r\n+  };\r\n+\r\n+  const isHourInPast = (dateStr, hour) => {\r\n+    if (!dateStr) return false;\r\n+    const now = new Date();\r\n+    const selected = new Date(dateStr);\r\n+    selected.setHours(hour, 0, 0, 0);\r\n+    return selected < now;\r\n+  };\r\n+\r\n+  const findEventAtHour = (hour) => {\r\n+    if (!selectedDay) return null;\r\n+    const hourStr = hour === 24 ? '00:00' : formatHour(hour);\r\n+    const prefix = `${selectedDay}T${hourStr}`;\r\n+    return events.find(e => e.date.startsWith(prefix));\r\n+  };\r\n+\r\n+  const validate = () => {\r\n+    const errs = {};\r\n+    if (!formData.name.trim()) errs.name = 'Name is required';\r\n+    if (!formData.phone.trim()) errs.phone = 'Phone is required';\r\n+    else if (!/^\\d{10}$/.test(formData.phone)) errs.phone = 'Phone must be 10 digits';\r\n+    if (!['Point', 'Rappel'].includes(formData.type)) errs.type = 'Invalid type';\r\n+    // Add validation for status (must be confirmed or completed)\r\n+    if (!['CONFIRMED', 'COMPLETED'].includes(formData.status)) errs.status = 'Invalid status';\r\n+    setErrors(errs);\r\n+    return Object.keys(errs).length === 0;\r\n+  };\r\n+\r\n+  // Helper: Can status be modified? Event date/time passed by at least 1 hour?\r\n+  const canModifyStatus = () => {\r\n+    if (!selectedDay || editingHour === null) return false;\r\n+    const eventDate = new Date(selectedDay);\r\n+    eventDate.setHours(editingHour, 0, 0, 0);\r\n+    const now = new Date();\r\n+    return now - eventDate >= 60 * 60 * 1000; // 1 hour in ms\r\n+  };\r\n+\r\n+  const handleAddOrUpdate = async () => {\r\n+    if (isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, editingHour)) {\r\n+      alert(\"You can't add or modify events for past date/time.\");\r\n+      return;\r\n+    }\r\n+    if (!validate()) return;\r\n+\r\n+    const hourStr = editingHour === 24 ? '00:00' : formatHour(editingHour);\r\n+    const dateTime = `${selectedDay}T${hourStr}:00`;\r\n+\r\n+    const eventPayload = {\r\n+      title: `${formData.type} - ${formData.name}`,\r\n+      date: dateTime,\r\n+      name: formData.name,\r\n+      phone: formData.phone,\r\n+      type: formData.type,\r\n+      status: formData.status,\r\n+    };\r\n+\r\n+    try {\r\n+      const existingEvent = findEventAtHour(editingHour);\r\n+      if (existingEvent) {\r\n+        const res = await fetch(`http://localhost:5000/api/events/${existingEvent._id}`, {\r\n+          method: 'PUT',\r\n+          headers: authHeaders,\r\n+          body: JSON.stringify(eventPayload),\r\n+        });\r\n+        const updated = await res.json();\r\n+        setEvents(events.map(e => (e._id === updated._id ? updated : e)));\r\n+      } else {\r\n+        const res = await fetch('http://localhost:5000/api/events', {\r\n+          method: 'POST',\r\n+          headers: authHeaders,\r\n+          body: JSON.stringify(eventPayload),\r\n+        });\r\n+        const created = await res.json();\r\n+        setEvents([...events, created]);\r\n+      }\r\n+      setOpenEventForm(false);\r\n+      setEditingHour(null);\r\n+      setFormData({ name: '', phone: '', type: 'Point', status: 'CONFIRMED' });\r\n+      setErrors({});\r\n+    } catch (err) {\r\n+      console.error('Save event failed:', err);\r\n+    }\r\n+  };\r\n+\r\n+  const handleDelete = async (hourToDelete) => {\r\n+    if (isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, hourToDelete)) {\r\n+      alert(\"You can't delete events from past date/time.\");\r\n+      return;\r\n+    }\r\n+    const existingEvent = findEventAtHour(hourToDelete);\r\n+    if (!existingEvent) return;\r\n+\r\n+    try {\r\n+      await fetch(`http://localhost:5000/api/events/${existingEvent._id}`, {\r\n+        method: 'DELETE',\r\n+        headers: authHeaders,\r\n+      });\r\n+      setEvents(events.filter(e => e._id !== existingEvent._id));\r\n+      if (editingHour === hourToDelete) {\r\n+        setOpenEventForm(false);\r\n+        setEditingHour(null);\r\n+        setFormData({ name: '', phone: '', type: 'Point', status: '' });\r\n+        setErrors({});\r\n+      }\r\n+    } catch (err) {\r\n+      console.error('Delete event failed:', err);\r\n+    }\r\n+  };\r\n+\r\n+  const startEditing = (hour) => {\r\n+    if (isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, hour)) {\r\n+      alert(\"You can't add or modify events for past date/time.\");\r\n+      return;\r\n+    }\r\n+    const ev = findEventAtHour(hour);\r\n+    if (ev) {\r\n+      setFormData({\r\n+        name: ev.name,\r\n+        phone: ev.phone,\r\n+        type: ev.type,\r\n+        status: ev.status || 'confirmed',\r\n+      });\r\n+    } else {\r\n+      setFormData({ name: '', phone: '', type: 'Point', status: 'confirmed' });\r\n+    }\r\n+    setEditingHour(hour);\r\n+    setErrors({});\r\n+    setOpenEventForm(true);\r\n+  };\r\n+\r\n+  const handleDateClick = (arg) => {\r\n+    const clickedDate = arg.dateStr;\r\n+    const hasEventOnDate = events.some(ev => ev.date.startsWith(clickedDate));\r\n+\r\n+    if (isDateBeforeToday(clickedDate) && !hasEventOnDate) {\r\n+      alert('No events on this past date.');\r\n+      return;\r\n+    }\r\n+\r\n+    setSelectedDay(clickedDate);\r\n+    setOpenDayModal(true);\r\n+    setEditingHour(null);\r\n+    setFormData({ name: '', phone: '', type: 'Point', status: 'confirmed' });\r\n+    setErrors({});\r\n+  };\r\n+\r\n+  return (\r\n+    <>\r\n+      <NavBar\r\n+        email={profile?.email}\r\n+        onLogout={() => {\r\n+          localStorage.removeItem('token');\r\n+          // redirect if needed\r\n+        }}\r\n+      />\r\n+      <Container maxWidth=\"lg\" sx={{ mt: 4 }}>\r\n+        <Box boxShadow={3} p={2} bgcolor=\"white\" borderRadius={2}>\r\n+          <FullCalendar\r\n+            plugins={[dayGridPlugin, interactionPlugin]}\r\n+            initialView=\"dayGridMonth\"\r\n+            selectable={true}\r\n+            events={events}\r\n+            dateClick={handleDateClick}\r\n+          />\r\n+        </Box>\r\n+      </Container>\r\n+\r\n+      <Dialog\r\n+        open={openDayModal}\r\n+        onClose={() => setOpenDayModal(false)}\r\n+        maxWidth=\"lg\"\r\n+        fullWidth\r\n+      >\r\n+        <DialogTitle>Schedule for {selectedDay}</DialogTitle>\r\n+        <DialogContent>\r\n+          <Table>\r\n+            <TableHead>\r\n+              <TableRow>\r\n+                <TableCell>Hour</TableCell>\r\n+                <TableCell>Event Name</TableCell>\r\n+                <TableCell>Customer Name</TableCell>\r\n+                <TableCell>Customer Phone</TableCell>\r\n+                <TableCell>Status</TableCell>\r\n+                <TableCell>Action</TableCell>\r\n+              </TableRow>\r\n+            </TableHead>\r\n+\r\n+            <TableBody>\r\n+              {HOURS.map((hour) => {\r\n+                const ev = findEventAtHour(hour);\r\n+                const isPast = isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, hour);\r\n+\r\n+                return (\r\n+                  <TableRow key={hour}>\r\n+                    <TableCell>{formatHour(hour)}</TableCell>\r\n+                    <TableCell>{ev?.title || ''}</TableCell>\r\n+                    <TableCell>{ev?.name || ''}</TableCell>\r\n+                    <TableCell>{ev?.phone || ''}</TableCell>\r\n+                    <TableCell>{ev?.status || ''}</TableCell>\r\n+                    <TableCell>\r\n+                      {isPast ? (\r\n+                        <>\r\n+                          {ev ? (\r\n+                            <>\r\n+                              <IconButton size=\"small\" disabled title=\"Modify disabled on past date/time\">\r\n+                                <EditIcon />\r\n+                              </IconButton>\r\n+                              <IconButton size=\"small\" disabled title=\"Delete disabled on past date/time\">\r\n+                                <DeleteIcon />\r\n+                              </IconButton>\r\n+                            </>\r\n+                          ) : (\r\n+                            <IconButton size=\"small\" disabled title=\"Add disabled on past date/time\">\r\n+                              <AddIcon />\r\n+                            </IconButton>\r\n+                          )}\r\n+                        </>\r\n+                      ) : (\r\n+                        <>\r\n+                          <IconButton\r\n+                            color=\"primary\"\r\n+                            size=\"small\"\r\n+                            onClick={() => startEditing(hour)}\r\n+                            title={ev ? 'Modify' : 'Add'}\r\n+                          >\r\n+                            {ev ? <EditIcon /> : <AddIcon />}\r\n+                          </IconButton>\r\n+\r\n+                          {ev && (\r\n+                            <IconButton\r\n+                              color=\"error\"\r\n+                              size=\"small\"\r\n+                              onClick={() => handleDelete(hour)}\r\n+                              title=\"Delete\"\r\n+                            >\r\n+                              <DeleteIcon />\r\n+                            </IconButton>\r\n+                          )}\r\n+                        </>\r\n+                      )}\r\n+                    </TableCell>\r\n+                  </TableRow>\r\n+                );\r\n+              })}\r\n+            </TableBody>\r\n+          </Table>\r\n+        </DialogContent>\r\n+\r\n+        <DialogActions>\r\n+          <Button onClick={() => setOpenDayModal(false)}>Close</Button>\r\n+        </DialogActions>\r\n+      </Dialog>\r\n+\r\n+      <Dialog\r\n+        open={openEventForm}\r\n+        onClose={() => setOpenEventForm(false)}\r\n+        maxWidth=\"sm\"\r\n+        fullWidth\r\n+      >\r\n+        <DialogTitle>\r\n+          {editingHour !== null && findEventAtHour(editingHour)\r\n+            ? 'Modify Event'\r\n+            : 'Add Event'}\r\n+        </DialogTitle>\r\n+        <DialogContent>\r\n+          <Typography variant=\"subtitle1\" gutterBottom>\r\n+            For hour: {editingHour !== null ? formatHour(editingHour) : ''}\r\n+          </Typography>\r\n+\r\n+          <TextField\r\n+            margin=\"dense\"\r\n+            label=\"Customer Name\"\r\n+            fullWidth\r\n+            value={formData.name}\r\n+            onChange={(e) => setFormData({ ...formData, name: e.target.value })}\r\n+            error={!!errors.name}\r\n+            helperText={errors.name}\r\n+          />\r\n+          <TextField\r\n+            margin=\"dense\"\r\n+            label=\"Customer Phone\"\r\n+            fullWidth\r\n+            value={formData.phone}\r\n+            onChange={(e) => setFormData({ ...formData, phone: e.target.value })}\r\n+            error={!!errors.phone}\r\n+            helperText={errors.phone}\r\n+          />\r\n+          <TextField\r\n+            margin=\"dense\"\r\n+            select\r\n+            label=\"Type\"\r\n+            fullWidth\r\n+            value={formData.type}\r\n+            onChange={(e) => setFormData({ ...formData, type: e.target.value })}\r\n+          >\r\n+            <MenuItem value=\"Point\">Point</MenuItem>\r\n+            <MenuItem value=\"Rappel\">Rappel</MenuItem>\r\n+          </TextField>\r\n+\r\n+          {/* Status field only editable if 1 hour passed */}\r\n+          {canModifyStatus() ? (\r\n+            <TextField\r\n+              margin=\"dense\"\r\n+              select\r\n+              label=\"Status\"\r\n+              fullWidth\r\n+              value={formData.status}\r\n+              onChange={(e) => setFormData({ ...formData, status: e.target.value })}\r\n+              error={!!errors.status}\r\n+              helperText={errors.status}\r\n+            >\r\n+              <MenuItem value=\"confirmed\">CONFIRMED</MenuItem>\r\n+              <MenuItem value=\"completed\">COMPLETED</MenuItem>\r\n+            </TextField>\r\n+          ) : (\r\n+            <Typography\r\n+              variant=\"body2\"\r\n+              color=\"textSecondary\"\r\n+              sx={{ mt: 2, mb: 1 }}\r\n+            >\r\n+              Status can only be modified  one hour after the event time.\r\n+            </Typography>\r\n+          )}\r\n+        </DialogContent>\r\n+\r\n+        <DialogActions>\r\n+          <Button onClick={() => setOpenEventForm(false)}>Cancel</Button>\r\n+          <Button\r\n+            onClick={handleAddOrUpdate}\r\n+            variant=\"contained\"\r\n+            color=\"primary\"\r\n+            disabled={isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, editingHour)}\r\n+          >\r\n+            Save\r\n+          </Button>\r\n+        </DialogActions>\r\n+      </Dialog>\r\n+    </>\r\n+  );\r\n+}\r\n"
                },
                {
                    "date": 1751917414678,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,415 @@\n+import React, { useState, useEffect } from 'react';\r\n+import {\r\n+  Container,\r\n+  Box,\r\n+  Dialog,\r\n+  DialogTitle,\r\n+  DialogContent,\r\n+  DialogActions,\r\n+  Button,\r\n+  TextField,\r\n+  MenuItem,\r\n+  Table,\r\n+  TableHead,\r\n+  TableBody,\r\n+  TableRow,\r\n+  TableCell,\r\n+  Typography,\r\n+  IconButton,\r\n+} from '@mui/material';\r\n+import FullCalendar from '@fullcalendar/react';\r\n+import dayGridPlugin from '@fullcalendar/daygrid';\r\n+import interactionPlugin from '@fullcalendar/interaction';\r\n+import NavBar from '../components/NavBar';\r\n+\r\n+import AddIcon from '@mui/icons-material/Add';\r\n+import EditIcon from '@mui/icons-material/Edit';\r\n+import DeleteIcon from '@mui/icons-material/Delete';\r\n+\r\n+const HOURS = Array.from({ length: 17 }, (_, i) => 8 + i); // 08:00 to 00:00\r\n+\r\n+function formatHour(h) {\r\n+  return h === 24 ? '00:00' : `${h.toString().padStart(2, '0')}:00`;\r\n+}\r\n+\r\n+export default function Dashboard() {\r\n+  const [profile, setProfile] = useState(null);\r\n+  const [events, setEvents] = useState([]);\r\n+  const [selectedDay, setSelectedDay] = useState(null);\r\n+  const [openDayModal, setOpenDayModal] = useState(false);\r\n+\r\n+  const [openEventForm, setOpenEventForm] = useState(false);\r\n+  const [editingHour, setEditingHour] = useState(null);\r\n+  // Added status field with default 'confirmed'\r\n+  const [formData, setFormData] = useState({ name: '', phone: '', type: 'Point', status: 'CONFIRMED' });\r\n+  const [errors, setErrors] = useState({});\r\n+\r\n+  const token = localStorage.getItem('token');\r\n+  const authHeaders = {\r\n+    Authorization: `Bearer ${token}`,\r\n+    'Content-Type': 'application/json',\r\n+  };\r\n+\r\n+  useEffect(() => {\r\n+    if (!token) return;\r\n+\r\n+    fetch('http://localhost:5000/api/admin/profile', { headers: authHeaders })\r\n+      .then(res => (res.ok ? res.json() : Promise.reject()))\r\n+      .then(setProfile)\r\n+      .catch(() => {\r\n+        localStorage.removeItem('token');\r\n+      });\r\n+\r\n+    fetch('http://localhost:5000/api/events', { headers: authHeaders })\r\n+      .then(res => res.json())\r\n+      .then(setEvents)\r\n+      .catch(console.error);\r\n+  }, [token]);\r\n+\r\n+  const isDateBeforeToday = (dateStr) => {\r\n+    if (!dateStr) return false;\r\n+    const selected = new Date(dateStr);\r\n+    const today = new Date();\r\n+    today.setHours(0, 0, 0, 0);\r\n+    return selected < today;\r\n+  };\r\n+\r\n+  const isHourInPast = (dateStr, hour) => {\r\n+    if (!dateStr) return false;\r\n+    const now = new Date();\r\n+    const selected = new Date(dateStr);\r\n+    selected.setHours(hour, 0, 0, 0);\r\n+    return selected < now;\r\n+  };\r\n+\r\n+  const findEventAtHour = (hour) => {\r\n+    if (!selectedDay) return null;\r\n+    const hourStr = hour === 24 ? '00:00' : formatHour(hour);\r\n+    const prefix = `${selectedDay}T${hourStr}`;\r\n+    return events.find(e => e.date.startsWith(prefix));\r\n+  };\r\n+\r\n+  const validate = () => {\r\n+    const errs = {};\r\n+    if (!formData.name.trim()) errs.name = 'Name is required';\r\n+    if (!formData.phone.trim()) errs.phone = 'Phone is required';\r\n+    else if (!/^\\d{10}$/.test(formData.phone)) errs.phone = 'Phone must be 10 digits';\r\n+    if (!['Point', 'Rappel'].includes(formData.type)) errs.type = 'Invalid type';\r\n+    // Add validation for status (must be confirmed or completed)\r\n+    if (!['CONFIRMED', 'COMPLETED'].includes(formData.status)) errs.status = 'Invalid status';\r\n+    setErrors(errs);\r\n+    return Object.keys(errs).length === 0;\r\n+  };\r\n+\r\n+  // Helper: Can status be modified? Event date/time passed by at least 1 hour?\r\n+  const canModifyStatus = () => {\r\n+    if (!selectedDay || editingHour === null) return false;\r\n+    const eventDate = new Date(selectedDay);\r\n+    eventDate.setHours(editingHour, 0, 0, 0);\r\n+    const now = new Date();\r\n+    return now - eventDate >= 60 * 60 * 1000; // 1 hour in ms\r\n+  };\r\n+\r\n+  const handleAddOrUpdate = async () => {\r\n+    if (isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, editingHour)) {\r\n+      alert(\"You can't add or modify events for past date/time.\");\r\n+      return;\r\n+    }\r\n+    if (!validate()) return;\r\n+\r\n+    const hourStr = editingHour === 24 ? '00:00' : formatHour(editingHour);\r\n+    const dateTime = `${selectedDay}T${hourStr}:00`;\r\n+\r\n+    const eventPayload = {\r\n+      title: `${formData.type} - ${formData.name}`,\r\n+      date: dateTime,\r\n+      name: formData.name,\r\n+      phone: formData.phone,\r\n+      type: formData.type,\r\n+      status: formData.status,\r\n+    };\r\n+\r\n+    try {\r\n+      const existingEvent = findEventAtHour(editingHour);\r\n+      if (existingEvent) {\r\n+        const res = await fetch(`http://localhost:5000/api/events/${existingEvent._id}`, {\r\n+          method: 'PUT',\r\n+          headers: authHeaders,\r\n+          body: JSON.stringify(eventPayload),\r\n+        });\r\n+        const updated = await res.json();\r\n+        setEvents(events.map(e => (e._id === updated._id ? updated : e)));\r\n+      } else {\r\n+        const res = await fetch('http://localhost:5000/api/events', {\r\n+          method: 'POST',\r\n+          headers: authHeaders,\r\n+          body: JSON.stringify(eventPayload),\r\n+        });\r\n+        const created = await res.json();\r\n+        setEvents([...events, created]);\r\n+      }\r\n+      setOpenEventForm(false);\r\n+      setEditingHour(null);\r\n+      setFormData({ name: '', phone: '', type: 'Point', status: 'CONFIRMED' });\r\n+      setErrors({});\r\n+    } catch (err) {\r\n+      console.error('Save event failed:', err);\r\n+    }\r\n+  };\r\n+\r\n+  const handleDelete = async (hourToDelete) => {\r\n+    if (isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, hourToDelete)) {\r\n+      alert(\"You can't delete events from past date/time.\");\r\n+      return;\r\n+    }\r\n+    const existingEvent = findEventAtHour(hourToDelete);\r\n+    if (!existingEvent) return;\r\n+\r\n+    try {\r\n+      await fetch(`http://localhost:5000/api/events/${existingEvent._id}`, {\r\n+        method: 'DELETE',\r\n+        headers: authHeaders,\r\n+      });\r\n+      setEvents(events.filter(e => e._id !== existingEvent._id));\r\n+      if (editingHour === hourToDelete) {\r\n+        setOpenEventForm(false);\r\n+        setEditingHour(null);\r\n+        setFormData({ name: '', phone: '', type: 'Point', status: 'CONFIRMED' });\r\n+        setErrors({});\r\n+      }\r\n+    } catch (err) {\r\n+      console.error('Delete event failed:', err);\r\n+    }\r\n+  };\r\n+\r\n+  const startEditing = (hour) => {\r\n+    if (isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, hour)) {\r\n+      alert(\"You can't add or modify events for past date/time.\");\r\n+      return;\r\n+    }\r\n+    const ev = findEventAtHour(hour);\r\n+    if (ev) {\r\n+      setFormData({\r\n+        name: ev.name,\r\n+        phone: ev.phone,\r\n+        type: ev.type,\r\n+        status: ev.status || '',\r\n+      });\r\n+    } else {\r\n+      setFormData({ name: '', phone: '', type: 'Point', status: 'confirmed' });\r\n+    }\r\n+    setEditingHour(hour);\r\n+    setErrors({});\r\n+    setOpenEventForm(true);\r\n+  };\r\n+\r\n+  const handleDateClick = (arg) => {\r\n+    const clickedDate = arg.dateStr;\r\n+    const hasEventOnDate = events.some(ev => ev.date.startsWith(clickedDate));\r\n+\r\n+    if (isDateBeforeToday(clickedDate) && !hasEventOnDate) {\r\n+      alert('No events on this past date.');\r\n+      return;\r\n+    }\r\n+\r\n+    setSelectedDay(clickedDate);\r\n+    setOpenDayModal(true);\r\n+    setEditingHour(null);\r\n+    setFormData({ name: '', phone: '', type: 'Point', status: 'confirmed' });\r\n+    setErrors({});\r\n+  };\r\n+\r\n+  return (\r\n+    <>\r\n+      <NavBar\r\n+        email={profile?.email}\r\n+        onLogout={() => {\r\n+          localStorage.removeItem('token');\r\n+          // redirect if needed\r\n+        }}\r\n+      />\r\n+      <Container maxWidth=\"lg\" sx={{ mt: 4 }}>\r\n+        <Box boxShadow={3} p={2} bgcolor=\"white\" borderRadius={2}>\r\n+          <FullCalendar\r\n+            plugins={[dayGridPlugin, interactionPlugin]}\r\n+            initialView=\"dayGridMonth\"\r\n+            selectable={true}\r\n+            events={events}\r\n+            dateClick={handleDateClick}\r\n+          />\r\n+        </Box>\r\n+      </Container>\r\n+\r\n+      <Dialog\r\n+        open={openDayModal}\r\n+        onClose={() => setOpenDayModal(false)}\r\n+        maxWidth=\"lg\"\r\n+        fullWidth\r\n+      >\r\n+        <DialogTitle>Schedule for {selectedDay}</DialogTitle>\r\n+        <DialogContent>\r\n+          <Table>\r\n+            <TableHead>\r\n+              <TableRow>\r\n+                <TableCell>Hour</TableCell>\r\n+                <TableCell>Event Name</TableCell>\r\n+                <TableCell>Customer Name</TableCell>\r\n+                <TableCell>Customer Phone</TableCell>\r\n+                <TableCell>Status</TableCell>\r\n+                <TableCell>Action</TableCell>\r\n+              </TableRow>\r\n+            </TableHead>\r\n+\r\n+            <TableBody>\r\n+              {HOURS.map((hour) => {\r\n+                const ev = findEventAtHour(hour);\r\n+                const isPast = isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, hour);\r\n+\r\n+                return (\r\n+                  <TableRow key={hour}>\r\n+                    <TableCell>{formatHour(hour)}</TableCell>\r\n+                    <TableCell>{ev?.title || ''}</TableCell>\r\n+                    <TableCell>{ev?.name || ''}</TableCell>\r\n+                    <TableCell>{ev?.phone || ''}</TableCell>\r\n+                    <TableCell>{ev?.status || ''}</TableCell>\r\n+                    <TableCell>\r\n+                      {isPast ? (\r\n+                        <>\r\n+                          {ev ? (\r\n+                            <>\r\n+                              <IconButton size=\"small\" disabled title=\"Modify disabled on past date/time\">\r\n+                                <EditIcon />\r\n+                              </IconButton>\r\n+                              <IconButton size=\"small\" disabled title=\"Delete disabled on past date/time\">\r\n+                                <DeleteIcon />\r\n+                              </IconButton>\r\n+                            </>\r\n+                          ) : (\r\n+                            <IconButton size=\"small\" disabled title=\"Add disabled on past date/time\">\r\n+                              <AddIcon />\r\n+                            </IconButton>\r\n+                          )}\r\n+                        </>\r\n+                      ) : (\r\n+                        <>\r\n+                          <IconButton\r\n+                            color=\"primary\"\r\n+                            size=\"small\"\r\n+                            onClick={() => startEditing(hour)}\r\n+                            title={ev ? 'Modify' : 'Add'}\r\n+                          >\r\n+                            {ev ? <EditIcon /> : <AddIcon />}\r\n+                          </IconButton>\r\n+\r\n+                          {ev && (\r\n+                            <IconButton\r\n+                              color=\"error\"\r\n+                              size=\"small\"\r\n+                              onClick={() => handleDelete(hour)}\r\n+                              title=\"Delete\"\r\n+                            >\r\n+                              <DeleteIcon />\r\n+                            </IconButton>\r\n+                          )}\r\n+                        </>\r\n+                      )}\r\n+                    </TableCell>\r\n+                  </TableRow>\r\n+                );\r\n+              })}\r\n+            </TableBody>\r\n+          </Table>\r\n+        </DialogContent>\r\n+\r\n+        <DialogActions>\r\n+          <Button onClick={() => setOpenDayModal(false)}>Close</Button>\r\n+        </DialogActions>\r\n+      </Dialog>\r\n+\r\n+      <Dialog\r\n+        open={openEventForm}\r\n+        onClose={() => setOpenEventForm(false)}\r\n+        maxWidth=\"sm\"\r\n+        fullWidth\r\n+      >\r\n+        <DialogTitle>\r\n+          {editingHour !== null && findEventAtHour(editingHour)\r\n+            ? 'Modify Event'\r\n+            : 'Add Event'}\r\n+        </DialogTitle>\r\n+        <DialogContent>\r\n+          <Typography variant=\"subtitle1\" gutterBottom>\r\n+            For hour: {editingHour !== null ? formatHour(editingHour) : ''}\r\n+          </Typography>\r\n+\r\n+          <TextField\r\n+            margin=\"dense\"\r\n+            label=\"Customer Name\"\r\n+            fullWidth\r\n+            value={formData.name}\r\n+            onChange={(e) => setFormData({ ...formData, name: e.target.value })}\r\n+            error={!!errors.name}\r\n+            helperText={errors.name}\r\n+          />\r\n+          <TextField\r\n+            margin=\"dense\"\r\n+            label=\"Customer Phone\"\r\n+            fullWidth\r\n+            value={formData.phone}\r\n+            onChange={(e) => setFormData({ ...formData, phone: e.target.value })}\r\n+            error={!!errors.phone}\r\n+            helperText={errors.phone}\r\n+          />\r\n+          <TextField\r\n+            margin=\"dense\"\r\n+            select\r\n+            label=\"Type\"\r\n+            fullWidth\r\n+            value={formData.type}\r\n+            onChange={(e) => setFormData({ ...formData, type: e.target.value })}\r\n+          >\r\n+            <MenuItem value=\"Point\">Point</MenuItem>\r\n+            <MenuItem value=\"Rappel\">Rappel</MenuItem>\r\n+          </TextField>\r\n+\r\n+          {/* Status field only editable if 1 hour passed */}\r\n+          {canModifyStatus() ? (\r\n+            <TextField\r\n+              margin=\"dense\"\r\n+              select\r\n+              label=\"Status\"\r\n+              fullWidth\r\n+              value={formData.status}\r\n+              onChange={(e) => setFormData({ ...formData, status: e.target.value })}\r\n+              error={!!errors.status}\r\n+              helperText={errors.status}\r\n+            >\r\n+              <MenuItem value=\"confirmed\">CONFIRMED</MenuItem>\r\n+              <MenuItem value=\"completed\">COMPLETED</MenuItem>\r\n+            </TextField>\r\n+          ) : (\r\n+            <Typography\r\n+              variant=\"body2\"\r\n+              color=\"textSecondary\"\r\n+              sx={{ mt: 2, mb: 1 }}\r\n+            >\r\n+              Status can only be modified  one hour after the event time.\r\n+            </Typography>\r\n+          )}\r\n+        </DialogContent>\r\n+\r\n+        <DialogActions>\r\n+          <Button onClick={() => setOpenEventForm(false)}>Cancel</Button>\r\n+          <Button\r\n+            onClick={handleAddOrUpdate}\r\n+            variant=\"contained\"\r\n+            color=\"primary\"\r\n+            disabled={isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, editingHour)}\r\n+          >\r\n+            Save\r\n+          </Button>\r\n+        </DialogActions>\r\n+      </Dialog>\r\n+    </>\r\n+  );\r\n+}\r\n"
                },
                {
                    "date": 1751917425158,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,415 @@\n+import React, { useState, useEffect } from 'react';\r\n+import {\r\n+  Container,\r\n+  Box,\r\n+  Dialog,\r\n+  DialogTitle,\r\n+  DialogContent,\r\n+  DialogActions,\r\n+  Button,\r\n+  TextField,\r\n+  MenuItem,\r\n+  Table,\r\n+  TableHead,\r\n+  TableBody,\r\n+  TableRow,\r\n+  TableCell,\r\n+  Typography,\r\n+  IconButton,\r\n+} from '@mui/material';\r\n+import FullCalendar from '@fullcalendar/react';\r\n+import dayGridPlugin from '@fullcalendar/daygrid';\r\n+import interactionPlugin from '@fullcalendar/interaction';\r\n+import NavBar from '../components/NavBar';\r\n+\r\n+import AddIcon from '@mui/icons-material/Add';\r\n+import EditIcon from '@mui/icons-material/Edit';\r\n+import DeleteIcon from '@mui/icons-material/Delete';\r\n+\r\n+const HOURS = Array.from({ length: 17 }, (_, i) => 8 + i); // 08:00 to 00:00\r\n+\r\n+function formatHour(h) {\r\n+  return h === 24 ? '00:00' : `${h.toString().padStart(2, '0')}:00`;\r\n+}\r\n+\r\n+export default function Dashboard() {\r\n+  const [profile, setProfile] = useState(null);\r\n+  const [events, setEvents] = useState([]);\r\n+  const [selectedDay, setSelectedDay] = useState(null);\r\n+  const [openDayModal, setOpenDayModal] = useState(false);\r\n+\r\n+  const [openEventForm, setOpenEventForm] = useState(false);\r\n+  const [editingHour, setEditingHour] = useState(null);\r\n+  // Added status field with default 'confirmed'\r\n+  const [formData, setFormData] = useState({ name: '', phone: '', type: 'Point', status: 'CONFIRMED' });\r\n+  const [errors, setErrors] = useState({});\r\n+\r\n+  const token = localStorage.getItem('token');\r\n+  const authHeaders = {\r\n+    Authorization: `Bearer ${token}`,\r\n+    'Content-Type': 'application/json',\r\n+  };\r\n+\r\n+  useEffect(() => {\r\n+    if (!token) return;\r\n+\r\n+    fetch('http://localhost:5000/api/admin/profile', { headers: authHeaders })\r\n+      .then(res => (res.ok ? res.json() : Promise.reject()))\r\n+      .then(setProfile)\r\n+      .catch(() => {\r\n+        localStorage.removeItem('token');\r\n+      });\r\n+\r\n+    fetch('http://localhost:5000/api/events', { headers: authHeaders })\r\n+      .then(res => res.json())\r\n+      .then(setEvents)\r\n+      .catch(console.error);\r\n+  }, [token]);\r\n+\r\n+  const isDateBeforeToday = (dateStr) => {\r\n+    if (!dateStr) return false;\r\n+    const selected = new Date(dateStr);\r\n+    const today = new Date();\r\n+    today.setHours(0, 0, 0, 0);\r\n+    return selected < today;\r\n+  };\r\n+\r\n+  const isHourInPast = (dateStr, hour) => {\r\n+    if (!dateStr) return false;\r\n+    const now = new Date();\r\n+    const selected = new Date(dateStr);\r\n+    selected.setHours(hour, 0, 0, 0);\r\n+    return selected < now;\r\n+  };\r\n+\r\n+  const findEventAtHour = (hour) => {\r\n+    if (!selectedDay) return null;\r\n+    const hourStr = hour === 24 ? '00:00' : formatHour(hour);\r\n+    const prefix = `${selectedDay}T${hourStr}`;\r\n+    return events.find(e => e.date.startsWith(prefix));\r\n+  };\r\n+\r\n+  const validate = () => {\r\n+    const errs = {};\r\n+    if (!formData.name.trim()) errs.name = 'Name is required';\r\n+    if (!formData.phone.trim()) errs.phone = 'Phone is required';\r\n+    else if (!/^\\d{10}$/.test(formData.phone)) errs.phone = 'Phone must be 10 digits';\r\n+    if (!['Point', 'Rappel'].includes(formData.type)) errs.type = 'Invalid type';\r\n+    // Add validation for status (must be confirmed or completed)\r\n+    if (!['CONFIRMED', 'COMPLETED'].includes(formData.status)) errs.status = 'Invalid status';\r\n+    setErrors(errs);\r\n+    return Object.keys(errs).length === 0;\r\n+  };\r\n+\r\n+  // Helper: Can status be modified? Event date/time passed by at least 1 hour?\r\n+  const canModifyStatus = () => {\r\n+    if (!selectedDay || editingHour === null) return false;\r\n+    const eventDate = new Date(selectedDay);\r\n+    eventDate.setHours(editingHour, 0, 0, 0);\r\n+    const now = new Date();\r\n+    return now - eventDate >= 60 * 60 * 1000; // 1 hour in ms\r\n+  };\r\n+\r\n+  const handleAddOrUpdate = async () => {\r\n+    if (isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, editingHour)) {\r\n+      alert(\"You can't add or modify events for past date/time.\");\r\n+      return;\r\n+    }\r\n+    if (!validate()) return;\r\n+\r\n+    const hourStr = editingHour === 24 ? '00:00' : formatHour(editingHour);\r\n+    const dateTime = `${selectedDay}T${hourStr}:00`;\r\n+\r\n+    const eventPayload = {\r\n+      title: `${formData.type} - ${formData.name}`,\r\n+      date: dateTime,\r\n+      name: formData.name,\r\n+      phone: formData.phone,\r\n+      type: formData.type,\r\n+      status: formData.status,\r\n+    };\r\n+\r\n+    try {\r\n+      const existingEvent = findEventAtHour(editingHour);\r\n+      if (existingEvent) {\r\n+        const res = await fetch(`http://localhost:5000/api/events/${existingEvent._id}`, {\r\n+          method: 'PUT',\r\n+          headers: authHeaders,\r\n+          body: JSON.stringify(eventPayload),\r\n+        });\r\n+        const updated = await res.json();\r\n+        setEvents(events.map(e => (e._id === updated._id ? updated : e)));\r\n+      } else {\r\n+        const res = await fetch('http://localhost:5000/api/events', {\r\n+          method: 'POST',\r\n+          headers: authHeaders,\r\n+          body: JSON.stringify(eventPayload),\r\n+        });\r\n+        const created = await res.json();\r\n+        setEvents([...events, created]);\r\n+      }\r\n+      setOpenEventForm(false);\r\n+      setEditingHour(null);\r\n+      setFormData({ name: '', phone: '', type: 'Point', status: 'CONFIRMED' });\r\n+      setErrors({});\r\n+    } catch (err) {\r\n+      console.error('Save event failed:', err);\r\n+    }\r\n+  };\r\n+\r\n+  const handleDelete = async (hourToDelete) => {\r\n+    if (isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, hourToDelete)) {\r\n+      alert(\"You can't delete events from past date/time.\");\r\n+      return;\r\n+    }\r\n+    const existingEvent = findEventAtHour(hourToDelete);\r\n+    if (!existingEvent) return;\r\n+\r\n+    try {\r\n+      await fetch(`http://localhost:5000/api/events/${existingEvent._id}`, {\r\n+        method: 'DELETE',\r\n+        headers: authHeaders,\r\n+      });\r\n+      setEvents(events.filter(e => e._id !== existingEvent._id));\r\n+      if (editingHour === hourToDelete) {\r\n+        setOpenEventForm(false);\r\n+        setEditingHour(null);\r\n+        setFormData({ name: '', phone: '', type: 'Point', status: 'CONFIRMED' });\r\n+        setErrors({});\r\n+      }\r\n+    } catch (err) {\r\n+      console.error('Delete event failed:', err);\r\n+    }\r\n+  };\r\n+\r\n+  const startEditing = (hour) => {\r\n+    if (isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, hour)) {\r\n+      alert(\"You can't add or modify events for past date/time.\");\r\n+      return;\r\n+    }\r\n+    const ev = findEventAtHour(hour);\r\n+    if (ev) {\r\n+      setFormData({\r\n+        name: ev.name,\r\n+        phone: ev.phone,\r\n+        type: ev.type,\r\n+        status: ev.status || 'CONFIRMED',\r\n+      });\r\n+    } else {\r\n+      setFormData({ name: '', phone: '', type: 'Point', status: 'CONFIRMED' });\r\n+    }\r\n+    setEditingHour(hour);\r\n+    setErrors({});\r\n+    setOpenEventForm(true);\r\n+  };\r\n+\r\n+  const handleDateClick = (arg) => {\r\n+    const clickedDate = arg.dateStr;\r\n+    const hasEventOnDate = events.some(ev => ev.date.startsWith(clickedDate));\r\n+\r\n+    if (isDateBeforeToday(clickedDate) && !hasEventOnDate) {\r\n+      alert('No events on this past date.');\r\n+      return;\r\n+    }\r\n+\r\n+    setSelectedDay(clickedDate);\r\n+    setOpenDayModal(true);\r\n+    setEditingHour(null);\r\n+    setFormData({ name: '', phone: '', type: 'Point', status: 'confirmed' });\r\n+    setErrors({});\r\n+  };\r\n+\r\n+  return (\r\n+    <>\r\n+      <NavBar\r\n+        email={profile?.email}\r\n+        onLogout={() => {\r\n+          localStorage.removeItem('token');\r\n+          // redirect if needed\r\n+        }}\r\n+      />\r\n+      <Container maxWidth=\"lg\" sx={{ mt: 4 }}>\r\n+        <Box boxShadow={3} p={2} bgcolor=\"white\" borderRadius={2}>\r\n+          <FullCalendar\r\n+            plugins={[dayGridPlugin, interactionPlugin]}\r\n+            initialView=\"dayGridMonth\"\r\n+            selectable={true}\r\n+            events={events}\r\n+            dateClick={handleDateClick}\r\n+          />\r\n+        </Box>\r\n+      </Container>\r\n+\r\n+      <Dialog\r\n+        open={openDayModal}\r\n+        onClose={() => setOpenDayModal(false)}\r\n+        maxWidth=\"lg\"\r\n+        fullWidth\r\n+      >\r\n+        <DialogTitle>Schedule for {selectedDay}</DialogTitle>\r\n+        <DialogContent>\r\n+          <Table>\r\n+            <TableHead>\r\n+              <TableRow>\r\n+                <TableCell>Hour</TableCell>\r\n+                <TableCell>Event Name</TableCell>\r\n+                <TableCell>Customer Name</TableCell>\r\n+                <TableCell>Customer Phone</TableCell>\r\n+                <TableCell>Status</TableCell>\r\n+                <TableCell>Action</TableCell>\r\n+              </TableRow>\r\n+            </TableHead>\r\n+\r\n+            <TableBody>\r\n+              {HOURS.map((hour) => {\r\n+                const ev = findEventAtHour(hour);\r\n+                const isPast = isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, hour);\r\n+\r\n+                return (\r\n+                  <TableRow key={hour}>\r\n+                    <TableCell>{formatHour(hour)}</TableCell>\r\n+                    <TableCell>{ev?.title || ''}</TableCell>\r\n+                    <TableCell>{ev?.name || ''}</TableCell>\r\n+                    <TableCell>{ev?.phone || ''}</TableCell>\r\n+                    <TableCell>{ev?.status || ''}</TableCell>\r\n+                    <TableCell>\r\n+                      {isPast ? (\r\n+                        <>\r\n+                          {ev ? (\r\n+                            <>\r\n+                              <IconButton size=\"small\" disabled title=\"Modify disabled on past date/time\">\r\n+                                <EditIcon />\r\n+                              </IconButton>\r\n+                              <IconButton size=\"small\" disabled title=\"Delete disabled on past date/time\">\r\n+                                <DeleteIcon />\r\n+                              </IconButton>\r\n+                            </>\r\n+                          ) : (\r\n+                            <IconButton size=\"small\" disabled title=\"Add disabled on past date/time\">\r\n+                              <AddIcon />\r\n+                            </IconButton>\r\n+                          )}\r\n+                        </>\r\n+                      ) : (\r\n+                        <>\r\n+                          <IconButton\r\n+                            color=\"primary\"\r\n+                            size=\"small\"\r\n+                            onClick={() => startEditing(hour)}\r\n+                            title={ev ? 'Modify' : 'Add'}\r\n+                          >\r\n+                            {ev ? <EditIcon /> : <AddIcon />}\r\n+                          </IconButton>\r\n+\r\n+                          {ev && (\r\n+                            <IconButton\r\n+                              color=\"error\"\r\n+                              size=\"small\"\r\n+                              onClick={() => handleDelete(hour)}\r\n+                              title=\"Delete\"\r\n+                            >\r\n+                              <DeleteIcon />\r\n+                            </IconButton>\r\n+                          )}\r\n+                        </>\r\n+                      )}\r\n+                    </TableCell>\r\n+                  </TableRow>\r\n+                );\r\n+              })}\r\n+            </TableBody>\r\n+          </Table>\r\n+        </DialogContent>\r\n+\r\n+        <DialogActions>\r\n+          <Button onClick={() => setOpenDayModal(false)}>Close</Button>\r\n+        </DialogActions>\r\n+      </Dialog>\r\n+\r\n+      <Dialog\r\n+        open={openEventForm}\r\n+        onClose={() => setOpenEventForm(false)}\r\n+        maxWidth=\"sm\"\r\n+        fullWidth\r\n+      >\r\n+        <DialogTitle>\r\n+          {editingHour !== null && findEventAtHour(editingHour)\r\n+            ? 'Modify Event'\r\n+            : 'Add Event'}\r\n+        </DialogTitle>\r\n+        <DialogContent>\r\n+          <Typography variant=\"subtitle1\" gutterBottom>\r\n+            For hour: {editingHour !== null ? formatHour(editingHour) : ''}\r\n+          </Typography>\r\n+\r\n+          <TextField\r\n+            margin=\"dense\"\r\n+            label=\"Customer Name\"\r\n+            fullWidth\r\n+            value={formData.name}\r\n+            onChange={(e) => setFormData({ ...formData, name: e.target.value })}\r\n+            error={!!errors.name}\r\n+            helperText={errors.name}\r\n+          />\r\n+          <TextField\r\n+            margin=\"dense\"\r\n+            label=\"Customer Phone\"\r\n+            fullWidth\r\n+            value={formData.phone}\r\n+            onChange={(e) => setFormData({ ...formData, phone: e.target.value })}\r\n+            error={!!errors.phone}\r\n+            helperText={errors.phone}\r\n+          />\r\n+          <TextField\r\n+            margin=\"dense\"\r\n+            select\r\n+            label=\"Type\"\r\n+            fullWidth\r\n+            value={formData.type}\r\n+            onChange={(e) => setFormData({ ...formData, type: e.target.value })}\r\n+          >\r\n+            <MenuItem value=\"Point\">Point</MenuItem>\r\n+            <MenuItem value=\"Rappel\">Rappel</MenuItem>\r\n+          </TextField>\r\n+\r\n+          {/* Status field only editable if 1 hour passed */}\r\n+          {canModifyStatus() ? (\r\n+            <TextField\r\n+              margin=\"dense\"\r\n+              select\r\n+              label=\"Status\"\r\n+              fullWidth\r\n+              value={formData.status}\r\n+              onChange={(e) => setFormData({ ...formData, status: e.target.value })}\r\n+              error={!!errors.status}\r\n+              helperText={errors.status}\r\n+            >\r\n+              <MenuItem value=\"confirmed\">CONFIRMED</MenuItem>\r\n+              <MenuItem value=\"completed\">COMPLETED</MenuItem>\r\n+            </TextField>\r\n+          ) : (\r\n+            <Typography\r\n+              variant=\"body2\"\r\n+              color=\"textSecondary\"\r\n+              sx={{ mt: 2, mb: 1 }}\r\n+            >\r\n+              Status can only be modified  one hour after the event time.\r\n+            </Typography>\r\n+          )}\r\n+        </DialogContent>\r\n+\r\n+        <DialogActions>\r\n+          <Button onClick={() => setOpenEventForm(false)}>Cancel</Button>\r\n+          <Button\r\n+            onClick={handleAddOrUpdate}\r\n+            variant=\"contained\"\r\n+            color=\"primary\"\r\n+            disabled={isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, editingHour)}\r\n+          >\r\n+            Save\r\n+          </Button>\r\n+        </DialogActions>\r\n+      </Dialog>\r\n+    </>\r\n+  );\r\n+}\r\n"
                },
                {
                    "date": 1751917430892,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,415 @@\n+import React, { useState, useEffect } from 'react';\r\n+import {\r\n+  Container,\r\n+  Box,\r\n+  Dialog,\r\n+  DialogTitle,\r\n+  DialogContent,\r\n+  DialogActions,\r\n+  Button,\r\n+  TextField,\r\n+  MenuItem,\r\n+  Table,\r\n+  TableHead,\r\n+  TableBody,\r\n+  TableRow,\r\n+  TableCell,\r\n+  Typography,\r\n+  IconButton,\r\n+} from '@mui/material';\r\n+import FullCalendar from '@fullcalendar/react';\r\n+import dayGridPlugin from '@fullcalendar/daygrid';\r\n+import interactionPlugin from '@fullcalendar/interaction';\r\n+import NavBar from '../components/NavBar';\r\n+\r\n+import AddIcon from '@mui/icons-material/Add';\r\n+import EditIcon from '@mui/icons-material/Edit';\r\n+import DeleteIcon from '@mui/icons-material/Delete';\r\n+\r\n+const HOURS = Array.from({ length: 17 }, (_, i) => 8 + i); // 08:00 to 00:00\r\n+\r\n+function formatHour(h) {\r\n+  return h === 24 ? '00:00' : `${h.toString().padStart(2, '0')}:00`;\r\n+}\r\n+\r\n+export default function Dashboard() {\r\n+  const [profile, setProfile] = useState(null);\r\n+  const [events, setEvents] = useState([]);\r\n+  const [selectedDay, setSelectedDay] = useState(null);\r\n+  const [openDayModal, setOpenDayModal] = useState(false);\r\n+\r\n+  const [openEventForm, setOpenEventForm] = useState(false);\r\n+  const [editingHour, setEditingHour] = useState(null);\r\n+  // Added status field with default 'confirmed'\r\n+  const [formData, setFormData] = useState({ name: '', phone: '', type: 'Point', status: 'CONFIRMED' });\r\n+  const [errors, setErrors] = useState({});\r\n+\r\n+  const token = localStorage.getItem('token');\r\n+  const authHeaders = {\r\n+    Authorization: `Bearer ${token}`,\r\n+    'Content-Type': 'application/json',\r\n+  };\r\n+\r\n+  useEffect(() => {\r\n+    if (!token) return;\r\n+\r\n+    fetch('http://localhost:5000/api/admin/profile', { headers: authHeaders })\r\n+      .then(res => (res.ok ? res.json() : Promise.reject()))\r\n+      .then(setProfile)\r\n+      .catch(() => {\r\n+        localStorage.removeItem('token');\r\n+      });\r\n+\r\n+    fetch('http://localhost:5000/api/events', { headers: authHeaders })\r\n+      .then(res => res.json())\r\n+      .then(setEvents)\r\n+      .catch(console.error);\r\n+  }, [token]);\r\n+\r\n+  const isDateBeforeToday = (dateStr) => {\r\n+    if (!dateStr) return false;\r\n+    const selected = new Date(dateStr);\r\n+    const today = new Date();\r\n+    today.setHours(0, 0, 0, 0);\r\n+    return selected < today;\r\n+  };\r\n+\r\n+  const isHourInPast = (dateStr, hour) => {\r\n+    if (!dateStr) return false;\r\n+    const now = new Date();\r\n+    const selected = new Date(dateStr);\r\n+    selected.setHours(hour, 0, 0, 0);\r\n+    return selected < now;\r\n+  };\r\n+\r\n+  const findEventAtHour = (hour) => {\r\n+    if (!selectedDay) return null;\r\n+    const hourStr = hour === 24 ? '00:00' : formatHour(hour);\r\n+    const prefix = `${selectedDay}T${hourStr}`;\r\n+    return events.find(e => e.date.startsWith(prefix));\r\n+  };\r\n+\r\n+  const validate = () => {\r\n+    const errs = {};\r\n+    if (!formData.name.trim()) errs.name = 'Name is required';\r\n+    if (!formData.phone.trim()) errs.phone = 'Phone is required';\r\n+    else if (!/^\\d{10}$/.test(formData.phone)) errs.phone = 'Phone must be 10 digits';\r\n+    if (!['Point', 'Rappel'].includes(formData.type)) errs.type = 'Invalid type';\r\n+    // Add validation for status (must be confirmed or completed)\r\n+    if (!['CONFIRMED', 'COMPLETED'].includes(formData.status)) errs.status = 'Invalid status';\r\n+    setErrors(errs);\r\n+    return Object.keys(errs).length === 0;\r\n+  };\r\n+\r\n+  // Helper: Can status be modified? Event date/time passed by at least 1 hour?\r\n+  const canModifyStatus = () => {\r\n+    if (!selectedDay || editingHour === null) return false;\r\n+    const eventDate = new Date(selectedDay);\r\n+    eventDate.setHours(editingHour, 0, 0, 0);\r\n+    const now = new Date();\r\n+    return now - eventDate >= 60 * 60 * 1000; // 1 hour in ms\r\n+  };\r\n+\r\n+  const handleAddOrUpdate = async () => {\r\n+    if (isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, editingHour)) {\r\n+      alert(\"You can't add or modify events for past date/time.\");\r\n+      return;\r\n+    }\r\n+    if (!validate()) return;\r\n+\r\n+    const hourStr = editingHour === 24 ? '00:00' : formatHour(editingHour);\r\n+    const dateTime = `${selectedDay}T${hourStr}:00`;\r\n+\r\n+    const eventPayload = {\r\n+      title: `${formData.type} - ${formData.name}`,\r\n+      date: dateTime,\r\n+      name: formData.name,\r\n+      phone: formData.phone,\r\n+      type: formData.type,\r\n+      status: formData.status,\r\n+    };\r\n+\r\n+    try {\r\n+      const existingEvent = findEventAtHour(editingHour);\r\n+      if (existingEvent) {\r\n+        const res = await fetch(`http://localhost:5000/api/events/${existingEvent._id}`, {\r\n+          method: 'PUT',\r\n+          headers: authHeaders,\r\n+          body: JSON.stringify(eventPayload),\r\n+        });\r\n+        const updated = await res.json();\r\n+        setEvents(events.map(e => (e._id === updated._id ? updated : e)));\r\n+      } else {\r\n+        const res = await fetch('http://localhost:5000/api/events', {\r\n+          method: 'POST',\r\n+          headers: authHeaders,\r\n+          body: JSON.stringify(eventPayload),\r\n+        });\r\n+        const created = await res.json();\r\n+        setEvents([...events, created]);\r\n+      }\r\n+      setOpenEventForm(false);\r\n+      setEditingHour(null);\r\n+      setFormData({ name: '', phone: '', type: 'Point', status: 'CONFIRMED' });\r\n+      setErrors({});\r\n+    } catch (err) {\r\n+      console.error('Save event failed:', err);\r\n+    }\r\n+  };\r\n+\r\n+  const handleDelete = async (hourToDelete) => {\r\n+    if (isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, hourToDelete)) {\r\n+      alert(\"You can't delete events from past date/time.\");\r\n+      return;\r\n+    }\r\n+    const existingEvent = findEventAtHour(hourToDelete);\r\n+    if (!existingEvent) return;\r\n+\r\n+    try {\r\n+      await fetch(`http://localhost:5000/api/events/${existingEvent._id}`, {\r\n+        method: 'DELETE',\r\n+        headers: authHeaders,\r\n+      });\r\n+      setEvents(events.filter(e => e._id !== existingEvent._id));\r\n+      if (editingHour === hourToDelete) {\r\n+        setOpenEventForm(false);\r\n+        setEditingHour(null);\r\n+        setFormData({ name: '', phone: '', type: 'Point', status: 'CONFIRMED' });\r\n+        setErrors({});\r\n+      }\r\n+    } catch (err) {\r\n+      console.error('Delete event failed:', err);\r\n+    }\r\n+  };\r\n+\r\n+  const startEditing = (hour) => {\r\n+    if (isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, hour)) {\r\n+      alert(\"You can't add or modify events for past date/time.\");\r\n+      return;\r\n+    }\r\n+    const ev = findEventAtHour(hour);\r\n+    if (ev) {\r\n+      setFormData({\r\n+        name: ev.name,\r\n+        phone: ev.phone,\r\n+        type: ev.type,\r\n+        status: ev.status || 'CONFIRMED',\r\n+      });\r\n+    } else {\r\n+      setFormData({ name: '', phone: '', type: 'Point', status: 'CONFIRMED' });\r\n+    }\r\n+    setEditingHour(hour);\r\n+    setErrors({});\r\n+    setOpenEventForm(true);\r\n+  };\r\n+\r\n+  const handleDateClick = (arg) => {\r\n+    const clickedDate = arg.dateStr;\r\n+    const hasEventOnDate = events.some(ev => ev.date.startsWith(clickedDate));\r\n+\r\n+    if (isDateBeforeToday(clickedDate) && !hasEventOnDate) {\r\n+      alert('No events on this past date.');\r\n+      return;\r\n+    }\r\n+\r\n+    setSelectedDay(clickedDate);\r\n+    setOpenDayModal(true);\r\n+    setEditingHour(null);\r\n+    setFormData({ name: '', phone: '', type: 'Point', status: 'CONFIRMED' });\r\n+    setErrors({});\r\n+  };\r\n+\r\n+  return (\r\n+    <>\r\n+      <NavBar\r\n+        email={profile?.email}\r\n+        onLogout={() => {\r\n+          localStorage.removeItem('token');\r\n+          // redirect if needed\r\n+        }}\r\n+      />\r\n+      <Container maxWidth=\"lg\" sx={{ mt: 4 }}>\r\n+        <Box boxShadow={3} p={2} bgcolor=\"white\" borderRadius={2}>\r\n+          <FullCalendar\r\n+            plugins={[dayGridPlugin, interactionPlugin]}\r\n+            initialView=\"dayGridMonth\"\r\n+            selectable={true}\r\n+            events={events}\r\n+            dateClick={handleDateClick}\r\n+          />\r\n+        </Box>\r\n+      </Container>\r\n+\r\n+      <Dialog\r\n+        open={openDayModal}\r\n+        onClose={() => setOpenDayModal(false)}\r\n+        maxWidth=\"lg\"\r\n+        fullWidth\r\n+      >\r\n+        <DialogTitle>Schedule for {selectedDay}</DialogTitle>\r\n+        <DialogContent>\r\n+          <Table>\r\n+            <TableHead>\r\n+              <TableRow>\r\n+                <TableCell>Hour</TableCell>\r\n+                <TableCell>Event Name</TableCell>\r\n+                <TableCell>Customer Name</TableCell>\r\n+                <TableCell>Customer Phone</TableCell>\r\n+                <TableCell>Status</TableCell>\r\n+                <TableCell>Action</TableCell>\r\n+              </TableRow>\r\n+            </TableHead>\r\n+\r\n+            <TableBody>\r\n+              {HOURS.map((hour) => {\r\n+                const ev = findEventAtHour(hour);\r\n+                const isPast = isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, hour);\r\n+\r\n+                return (\r\n+                  <TableRow key={hour}>\r\n+                    <TableCell>{formatHour(hour)}</TableCell>\r\n+                    <TableCell>{ev?.title || ''}</TableCell>\r\n+                    <TableCell>{ev?.name || ''}</TableCell>\r\n+                    <TableCell>{ev?.phone || ''}</TableCell>\r\n+                    <TableCell>{ev?.status || ''}</TableCell>\r\n+                    <TableCell>\r\n+                      {isPast ? (\r\n+                        <>\r\n+                          {ev ? (\r\n+                            <>\r\n+                              <IconButton size=\"small\" disabled title=\"Modify disabled on past date/time\">\r\n+                                <EditIcon />\r\n+                              </IconButton>\r\n+                              <IconButton size=\"small\" disabled title=\"Delete disabled on past date/time\">\r\n+                                <DeleteIcon />\r\n+                              </IconButton>\r\n+                            </>\r\n+                          ) : (\r\n+                            <IconButton size=\"small\" disabled title=\"Add disabled on past date/time\">\r\n+                              <AddIcon />\r\n+                            </IconButton>\r\n+                          )}\r\n+                        </>\r\n+                      ) : (\r\n+                        <>\r\n+                          <IconButton\r\n+                            color=\"primary\"\r\n+                            size=\"small\"\r\n+                            onClick={() => startEditing(hour)}\r\n+                            title={ev ? 'Modify' : 'Add'}\r\n+                          >\r\n+                            {ev ? <EditIcon /> : <AddIcon />}\r\n+                          </IconButton>\r\n+\r\n+                          {ev && (\r\n+                            <IconButton\r\n+                              color=\"error\"\r\n+                              size=\"small\"\r\n+                              onClick={() => handleDelete(hour)}\r\n+                              title=\"Delete\"\r\n+                            >\r\n+                              <DeleteIcon />\r\n+                            </IconButton>\r\n+                          )}\r\n+                        </>\r\n+                      )}\r\n+                    </TableCell>\r\n+                  </TableRow>\r\n+                );\r\n+              })}\r\n+            </TableBody>\r\n+          </Table>\r\n+        </DialogContent>\r\n+\r\n+        <DialogActions>\r\n+          <Button onClick={() => setOpenDayModal(false)}>Close</Button>\r\n+        </DialogActions>\r\n+      </Dialog>\r\n+\r\n+      <Dialog\r\n+        open={openEventForm}\r\n+        onClose={() => setOpenEventForm(false)}\r\n+        maxWidth=\"sm\"\r\n+        fullWidth\r\n+      >\r\n+        <DialogTitle>\r\n+          {editingHour !== null && findEventAtHour(editingHour)\r\n+            ? 'Modify Event'\r\n+            : 'Add Event'}\r\n+        </DialogTitle>\r\n+        <DialogContent>\r\n+          <Typography variant=\"subtitle1\" gutterBottom>\r\n+            For hour: {editingHour !== null ? formatHour(editingHour) : ''}\r\n+          </Typography>\r\n+\r\n+          <TextField\r\n+            margin=\"dense\"\r\n+            label=\"Customer Name\"\r\n+            fullWidth\r\n+            value={formData.name}\r\n+            onChange={(e) => setFormData({ ...formData, name: e.target.value })}\r\n+            error={!!errors.name}\r\n+            helperText={errors.name}\r\n+          />\r\n+          <TextField\r\n+            margin=\"dense\"\r\n+            label=\"Customer Phone\"\r\n+            fullWidth\r\n+            value={formData.phone}\r\n+            onChange={(e) => setFormData({ ...formData, phone: e.target.value })}\r\n+            error={!!errors.phone}\r\n+            helperText={errors.phone}\r\n+          />\r\n+          <TextField\r\n+            margin=\"dense\"\r\n+            select\r\n+            label=\"Type\"\r\n+            fullWidth\r\n+            value={formData.type}\r\n+            onChange={(e) => setFormData({ ...formData, type: e.target.value })}\r\n+          >\r\n+            <MenuItem value=\"Point\">Point</MenuItem>\r\n+            <MenuItem value=\"Rappel\">Rappel</MenuItem>\r\n+          </TextField>\r\n+\r\n+          {/* Status field only editable if 1 hour passed */}\r\n+          {canModifyStatus() ? (\r\n+            <TextField\r\n+              margin=\"dense\"\r\n+              select\r\n+              label=\"Status\"\r\n+              fullWidth\r\n+              value={formData.status}\r\n+              onChange={(e) => setFormData({ ...formData, status: e.target.value })}\r\n+              error={!!errors.status}\r\n+              helperText={errors.status}\r\n+            >\r\n+              <MenuItem value=\"confirmed\">CONFIRMED</MenuItem>\r\n+              <MenuItem value=\"completed\">COMPLETED</MenuItem>\r\n+            </TextField>\r\n+          ) : (\r\n+            <Typography\r\n+              variant=\"body2\"\r\n+              color=\"textSecondary\"\r\n+              sx={{ mt: 2, mb: 1 }}\r\n+            >\r\n+              Status can only be modified  one hour after the event time.\r\n+            </Typography>\r\n+          )}\r\n+        </DialogContent>\r\n+\r\n+        <DialogActions>\r\n+          <Button onClick={() => setOpenEventForm(false)}>Cancel</Button>\r\n+          <Button\r\n+            onClick={handleAddOrUpdate}\r\n+            variant=\"contained\"\r\n+            color=\"primary\"\r\n+            disabled={isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, editingHour)}\r\n+          >\r\n+            Save\r\n+          </Button>\r\n+        </DialogActions>\r\n+      </Dialog>\r\n+    </>\r\n+  );\r\n+}\r\n"
                },
                {
                    "date": 1751917436319,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,415 @@\n+import React, { useState, useEffect } from 'react';\r\n+import {\r\n+  Container,\r\n+  Box,\r\n+  Dialog,\r\n+  DialogTitle,\r\n+  DialogContent,\r\n+  DialogActions,\r\n+  Button,\r\n+  TextField,\r\n+  MenuItem,\r\n+  Table,\r\n+  TableHead,\r\n+  TableBody,\r\n+  TableRow,\r\n+  TableCell,\r\n+  Typography,\r\n+  IconButton,\r\n+} from '@mui/material';\r\n+import FullCalendar from '@fullcalendar/react';\r\n+import dayGridPlugin from '@fullcalendar/daygrid';\r\n+import interactionPlugin from '@fullcalendar/interaction';\r\n+import NavBar from '../components/NavBar';\r\n+\r\n+import AddIcon from '@mui/icons-material/Add';\r\n+import EditIcon from '@mui/icons-material/Edit';\r\n+import DeleteIcon from '@mui/icons-material/Delete';\r\n+\r\n+const HOURS = Array.from({ length: 17 }, (_, i) => 8 + i); // 08:00 to 00:00\r\n+\r\n+function formatHour(h) {\r\n+  return h === 24 ? '00:00' : `${h.toString().padStart(2, '0')}:00`;\r\n+}\r\n+\r\n+export default function Dashboard() {\r\n+  const [profile, setProfile] = useState(null);\r\n+  const [events, setEvents] = useState([]);\r\n+  const [selectedDay, setSelectedDay] = useState(null);\r\n+  const [openDayModal, setOpenDayModal] = useState(false);\r\n+\r\n+  const [openEventForm, setOpenEventForm] = useState(false);\r\n+  const [editingHour, setEditingHour] = useState(null);\r\n+  // Added status field with default 'confirmed'\r\n+  const [formData, setFormData] = useState({ name: '', phone: '', type: 'Point', status: 'CONFIRMED' });\r\n+  const [errors, setErrors] = useState({});\r\n+\r\n+  const token = localStorage.getItem('token');\r\n+  const authHeaders = {\r\n+    Authorization: `Bearer ${token}`,\r\n+    'Content-Type': 'application/json',\r\n+  };\r\n+\r\n+  useEffect(() => {\r\n+    if (!token) return;\r\n+\r\n+    fetch('http://localhost:5000/api/admin/profile', { headers: authHeaders })\r\n+      .then(res => (res.ok ? res.json() : Promise.reject()))\r\n+      .then(setProfile)\r\n+      .catch(() => {\r\n+        localStorage.removeItem('token');\r\n+      });\r\n+\r\n+    fetch('http://localhost:5000/api/events', { headers: authHeaders })\r\n+      .then(res => res.json())\r\n+      .then(setEvents)\r\n+      .catch(console.error);\r\n+  }, [token]);\r\n+\r\n+  const isDateBeforeToday = (dateStr) => {\r\n+    if (!dateStr) return false;\r\n+    const selected = new Date(dateStr);\r\n+    const today = new Date();\r\n+    today.setHours(0, 0, 0, 0);\r\n+    return selected < today;\r\n+  };\r\n+\r\n+  const isHourInPast = (dateStr, hour) => {\r\n+    if (!dateStr) return false;\r\n+    const now = new Date();\r\n+    const selected = new Date(dateStr);\r\n+    selected.setHours(hour, 0, 0, 0);\r\n+    return selected < now;\r\n+  };\r\n+\r\n+  const findEventAtHour = (hour) => {\r\n+    if (!selectedDay) return null;\r\n+    const hourStr = hour === 24 ? '00:00' : formatHour(hour);\r\n+    const prefix = `${selectedDay}T${hourStr}`;\r\n+    return events.find(e => e.date.startsWith(prefix));\r\n+  };\r\n+\r\n+  const validate = () => {\r\n+    const errs = {};\r\n+    if (!formData.name.trim()) errs.name = 'Name is required';\r\n+    if (!formData.phone.trim()) errs.phone = 'Phone is required';\r\n+    else if (!/^\\d{10}$/.test(formData.phone)) errs.phone = 'Phone must be 10 digits';\r\n+    if (!['Point', 'Rappel'].includes(formData.type)) errs.type = 'Invalid type';\r\n+    // Add validation for status (must be confirmed or completed)\r\n+    if (!['CONFIRMED', 'COMPLETED'].includes(formData.status)) errs.status = 'Invalid status';\r\n+    setErrors(errs);\r\n+    return Object.keys(errs).length === 0;\r\n+  };\r\n+\r\n+  // Helper: Can status be modified? Event date/time passed by at least 1 hour?\r\n+  const canModifyStatus = () => {\r\n+    if (!selectedDay || editingHour === null) return false;\r\n+    const eventDate = new Date(selectedDay);\r\n+    eventDate.setHours(editingHour, 0, 0, 0);\r\n+    const now = new Date();\r\n+    return now - eventDate >= 60 * 60 * 1000; // 1 hour in ms\r\n+  };\r\n+\r\n+  const handleAddOrUpdate = async () => {\r\n+    if (isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, editingHour)) {\r\n+      alert(\"You can't add or modify events for past date/time.\");\r\n+      return;\r\n+    }\r\n+    if (!validate()) return;\r\n+\r\n+    const hourStr = editingHour === 24 ? '00:00' : formatHour(editingHour);\r\n+    const dateTime = `${selectedDay}T${hourStr}:00`;\r\n+\r\n+    const eventPayload = {\r\n+      title: `${formData.type} - ${formData.name}`,\r\n+      date: dateTime,\r\n+      name: formData.name,\r\n+      phone: formData.phone,\r\n+      type: formData.type,\r\n+      status: formData.status,\r\n+    };\r\n+\r\n+    try {\r\n+      const existingEvent = findEventAtHour(editingHour);\r\n+      if (existingEvent) {\r\n+        const res = await fetch(`http://localhost:5000/api/events/${existingEvent._id}`, {\r\n+          method: 'PUT',\r\n+          headers: authHeaders,\r\n+          body: JSON.stringify(eventPayload),\r\n+        });\r\n+        const updated = await res.json();\r\n+        setEvents(events.map(e => (e._id === updated._id ? updated : e)));\r\n+      } else {\r\n+        const res = await fetch('http://localhost:5000/api/events', {\r\n+          method: 'POST',\r\n+          headers: authHeaders,\r\n+          body: JSON.stringify(eventPayload),\r\n+        });\r\n+        const created = await res.json();\r\n+        setEvents([...events, created]);\r\n+      }\r\n+      setOpenEventForm(false);\r\n+      setEditingHour(null);\r\n+      setFormData({ name: '', phone: '', type: 'Point', status: 'CONFIRMED' });\r\n+      setErrors({});\r\n+    } catch (err) {\r\n+      console.error('Save event failed:', err);\r\n+    }\r\n+  };\r\n+\r\n+  const handleDelete = async (hourToDelete) => {\r\n+    if (isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, hourToDelete)) {\r\n+      alert(\"You can't delete events from past date/time.\");\r\n+      return;\r\n+    }\r\n+    const existingEvent = findEventAtHour(hourToDelete);\r\n+    if (!existingEvent) return;\r\n+\r\n+    try {\r\n+      await fetch(`http://localhost:5000/api/events/${existingEvent._id}`, {\r\n+        method: 'DELETE',\r\n+        headers: authHeaders,\r\n+      });\r\n+      setEvents(events.filter(e => e._id !== existingEvent._id));\r\n+      if (editingHour === hourToDelete) {\r\n+        setOpenEventForm(false);\r\n+        setEditingHour(null);\r\n+        setFormData({ name: '', phone: '', type: 'Point', status: 'CONFIRMED' });\r\n+        setErrors({});\r\n+      }\r\n+    } catch (err) {\r\n+      console.error('Delete event failed:', err);\r\n+    }\r\n+  };\r\n+\r\n+  const startEditing = (hour) => {\r\n+    if (isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, hour)) {\r\n+      alert(\"You can't add or modify events for past date/time.\");\r\n+      return;\r\n+    }\r\n+    const ev = findEventAtHour(hour);\r\n+    if (ev) {\r\n+      setFormData({\r\n+        name: ev.name,\r\n+        phone: ev.phone,\r\n+        type: ev.type,\r\n+        status: ev.status || 'CONFIRMED',\r\n+      });\r\n+    } else {\r\n+      setFormData({ name: '', phone: '', type: 'Point', status: 'CONFIRMED' });\r\n+    }\r\n+    setEditingHour(hour);\r\n+    setErrors({});\r\n+    setOpenEventForm(true);\r\n+  };\r\n+\r\n+  const handleDateClick = (arg) => {\r\n+    const clickedDate = arg.dateStr;\r\n+    const hasEventOnDate = events.some(ev => ev.date.startsWith(clickedDate));\r\n+\r\n+    if (isDateBeforeToday(clickedDate) && !hasEventOnDate) {\r\n+      alert('No events on this past date.');\r\n+      return;\r\n+    }\r\n+\r\n+    setSelectedDay(clickedDate);\r\n+    setOpenDayModal(true);\r\n+    setEditingHour(null);\r\n+    setFormData({ name: '', phone: '', type: 'Point', status: 'CONFIRMED' });\r\n+    setErrors({});\r\n+  };\r\n+\r\n+  return (\r\n+    <>\r\n+      <NavBar\r\n+        email={profile?.email}\r\n+        onLogout={() => {\r\n+          localStorage.removeItem('token');\r\n+          // redirect if needed\r\n+        }}\r\n+      />\r\n+      <Container maxWidth=\"lg\" sx={{ mt: 4 }}>\r\n+        <Box boxShadow={3} p={2} bgcolor=\"white\" borderRadius={2}>\r\n+          <FullCalendar\r\n+            plugins={[dayGridPlugin, interactionPlugin]}\r\n+            initialView=\"dayGridMonth\"\r\n+            selectable={true}\r\n+            events={events}\r\n+            dateClick={handleDateClick}\r\n+          />\r\n+        </Box>\r\n+      </Container>\r\n+\r\n+      <Dialog\r\n+        open={openDayModal}\r\n+        onClose={() => setOpenDayModal(false)}\r\n+        maxWidth=\"lg\"\r\n+        fullWidth\r\n+      >\r\n+        <DialogTitle>Schedule for {selectedDay}</DialogTitle>\r\n+        <DialogContent>\r\n+          <Table>\r\n+            <TableHead>\r\n+              <TableRow>\r\n+                <TableCell>Hour</TableCell>\r\n+                <TableCell>Event Name</TableCell>\r\n+                <TableCell>Customer Name</TableCell>\r\n+                <TableCell>Customer Phone</TableCell>\r\n+                <TableCell>Status</TableCell>\r\n+                <TableCell>Action</TableCell>\r\n+              </TableRow>\r\n+            </TableHead>\r\n+\r\n+            <TableBody>\r\n+              {HOURS.map((hour) => {\r\n+                const ev = findEventAtHour(hour);\r\n+                const isPast = isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, hour);\r\n+\r\n+                return (\r\n+                  <TableRow key={hour}>\r\n+                    <TableCell>{formatHour(hour)}</TableCell>\r\n+                    <TableCell>{ev?.title || ''}</TableCell>\r\n+                    <TableCell>{ev?.name || ''}</TableCell>\r\n+                    <TableCell>{ev?.phone || ''}</TableCell>\r\n+                    <TableCell>{ev?.status || ''}</TableCell>\r\n+                    <TableCell>\r\n+                      {isPast ? (\r\n+                        <>\r\n+                          {ev ? (\r\n+                            <>\r\n+                              <IconButton size=\"small\" disabled title=\"Modify disabled on past date/time\">\r\n+                                <EditIcon />\r\n+                              </IconButton>\r\n+                              <IconButton size=\"small\" disabled title=\"Delete disabled on past date/time\">\r\n+                                <DeleteIcon />\r\n+                              </IconButton>\r\n+                            </>\r\n+                          ) : (\r\n+                            <IconButton size=\"small\" disabled title=\"Add disabled on past date/time\">\r\n+                              <AddIcon />\r\n+                            </IconButton>\r\n+                          )}\r\n+                        </>\r\n+                      ) : (\r\n+                        <>\r\n+                          <IconButton\r\n+                            color=\"primary\"\r\n+                            size=\"small\"\r\n+                            onClick={() => startEditing(hour)}\r\n+                            title={ev ? 'Modify' : 'Add'}\r\n+                          >\r\n+                            {ev ? <EditIcon /> : <AddIcon />}\r\n+                          </IconButton>\r\n+\r\n+                          {ev && (\r\n+                            <IconButton\r\n+                              color=\"error\"\r\n+                              size=\"small\"\r\n+                              onClick={() => handleDelete(hour)}\r\n+                              title=\"Delete\"\r\n+                            >\r\n+                              <DeleteIcon />\r\n+                            </IconButton>\r\n+                          )}\r\n+                        </>\r\n+                      )}\r\n+                    </TableCell>\r\n+                  </TableRow>\r\n+                );\r\n+              })}\r\n+            </TableBody>\r\n+          </Table>\r\n+        </DialogContent>\r\n+\r\n+        <DialogActions>\r\n+          <Button onClick={() => setOpenDayModal(false)}>Close</Button>\r\n+        </DialogActions>\r\n+      </Dialog>\r\n+\r\n+      <Dialog\r\n+        open={openEventForm}\r\n+        onClose={() => setOpenEventForm(false)}\r\n+        maxWidth=\"sm\"\r\n+        fullWidth\r\n+      >\r\n+        <DialogTitle>\r\n+          {editingHour !== null && findEventAtHour(editingHour)\r\n+            ? 'Modify Event'\r\n+            : 'Add Event'}\r\n+        </DialogTitle>\r\n+        <DialogContent>\r\n+          <Typography variant=\"subtitle1\" gutterBottom>\r\n+            For hour: {editingHour !== null ? formatHour(editingHour) : ''}\r\n+          </Typography>\r\n+\r\n+          <TextField\r\n+            margin=\"dense\"\r\n+            label=\"Customer Name\"\r\n+            fullWidth\r\n+            value={formData.name}\r\n+            onChange={(e) => setFormData({ ...formData, name: e.target.value })}\r\n+            error={!!errors.name}\r\n+            helperText={errors.name}\r\n+          />\r\n+          <TextField\r\n+            margin=\"dense\"\r\n+            label=\"Customer Phone\"\r\n+            fullWidth\r\n+            value={formData.phone}\r\n+            onChange={(e) => setFormData({ ...formData, phone: e.target.value })}\r\n+            error={!!errors.phone}\r\n+            helperText={errors.phone}\r\n+          />\r\n+          <TextField\r\n+            margin=\"dense\"\r\n+            select\r\n+            label=\"Type\"\r\n+            fullWidth\r\n+            value={formData.type}\r\n+            onChange={(e) => setFormData({ ...formData, type: e.target.value })}\r\n+          >\r\n+            <MenuItem value=\"Point\">Point</MenuItem>\r\n+            <MenuItem value=\"Rappel\">Rappel</MenuItem>\r\n+          </TextField>\r\n+\r\n+          {/* Status field only editable if 1 hour passed */}\r\n+          {canModifyStatus() ? (\r\n+            <TextField\r\n+              margin=\"dense\"\r\n+              select\r\n+              label=\"Status\"\r\n+              fullWidth\r\n+              value={formData.status}\r\n+              onChange={(e) => setFormData({ ...formData, status: e.target.value })}\r\n+              error={!!errors.status}\r\n+              helperText={errors.status}\r\n+            >\r\n+              <MenuItem value=\"CONFIRMED\">CONFIRMED</MenuItem>\r\n+              <MenuItem value=\"completed\">COMPLETED</MenuItem>\r\n+            </TextField>\r\n+          ) : (\r\n+            <Typography\r\n+              variant=\"body2\"\r\n+              color=\"textSecondary\"\r\n+              sx={{ mt: 2, mb: 1 }}\r\n+            >\r\n+              Status can only be modified  one hour after the event time.\r\n+            </Typography>\r\n+          )}\r\n+        </DialogContent>\r\n+\r\n+        <DialogActions>\r\n+          <Button onClick={() => setOpenEventForm(false)}>Cancel</Button>\r\n+          <Button\r\n+            onClick={handleAddOrUpdate}\r\n+            variant=\"contained\"\r\n+            color=\"primary\"\r\n+            disabled={isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, editingHour)}\r\n+          >\r\n+            Save\r\n+          </Button>\r\n+        </DialogActions>\r\n+      </Dialog>\r\n+    </>\r\n+  );\r\n+}\r\n"
                },
                {
                    "date": 1751917442197,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,415 @@\n+import React, { useState, useEffect } from 'react';\r\n+import {\r\n+  Container,\r\n+  Box,\r\n+  Dialog,\r\n+  DialogTitle,\r\n+  DialogContent,\r\n+  DialogActions,\r\n+  Button,\r\n+  TextField,\r\n+  MenuItem,\r\n+  Table,\r\n+  TableHead,\r\n+  TableBody,\r\n+  TableRow,\r\n+  TableCell,\r\n+  Typography,\r\n+  IconButton,\r\n+} from '@mui/material';\r\n+import FullCalendar from '@fullcalendar/react';\r\n+import dayGridPlugin from '@fullcalendar/daygrid';\r\n+import interactionPlugin from '@fullcalendar/interaction';\r\n+import NavBar from '../components/NavBar';\r\n+\r\n+import AddIcon from '@mui/icons-material/Add';\r\n+import EditIcon from '@mui/icons-material/Edit';\r\n+import DeleteIcon from '@mui/icons-material/Delete';\r\n+\r\n+const HOURS = Array.from({ length: 17 }, (_, i) => 8 + i); // 08:00 to 00:00\r\n+\r\n+function formatHour(h) {\r\n+  return h === 24 ? '00:00' : `${h.toString().padStart(2, '0')}:00`;\r\n+}\r\n+\r\n+export default function Dashboard() {\r\n+  const [profile, setProfile] = useState(null);\r\n+  const [events, setEvents] = useState([]);\r\n+  const [selectedDay, setSelectedDay] = useState(null);\r\n+  const [openDayModal, setOpenDayModal] = useState(false);\r\n+\r\n+  const [openEventForm, setOpenEventForm] = useState(false);\r\n+  const [editingHour, setEditingHour] = useState(null);\r\n+  // Added status field with default 'confirmed'\r\n+  const [formData, setFormData] = useState({ name: '', phone: '', type: 'Point', status: 'CONFIRMED' });\r\n+  const [errors, setErrors] = useState({});\r\n+\r\n+  const token = localStorage.getItem('token');\r\n+  const authHeaders = {\r\n+    Authorization: `Bearer ${token}`,\r\n+    'Content-Type': 'application/json',\r\n+  };\r\n+\r\n+  useEffect(() => {\r\n+    if (!token) return;\r\n+\r\n+    fetch('http://localhost:5000/api/admin/profile', { headers: authHeaders })\r\n+      .then(res => (res.ok ? res.json() : Promise.reject()))\r\n+      .then(setProfile)\r\n+      .catch(() => {\r\n+        localStorage.removeItem('token');\r\n+      });\r\n+\r\n+    fetch('http://localhost:5000/api/events', { headers: authHeaders })\r\n+      .then(res => res.json())\r\n+      .then(setEvents)\r\n+      .catch(console.error);\r\n+  }, [token]);\r\n+\r\n+  const isDateBeforeToday = (dateStr) => {\r\n+    if (!dateStr) return false;\r\n+    const selected = new Date(dateStr);\r\n+    const today = new Date();\r\n+    today.setHours(0, 0, 0, 0);\r\n+    return selected < today;\r\n+  };\r\n+\r\n+  const isHourInPast = (dateStr, hour) => {\r\n+    if (!dateStr) return false;\r\n+    const now = new Date();\r\n+    const selected = new Date(dateStr);\r\n+    selected.setHours(hour, 0, 0, 0);\r\n+    return selected < now;\r\n+  };\r\n+\r\n+  const findEventAtHour = (hour) => {\r\n+    if (!selectedDay) return null;\r\n+    const hourStr = hour === 24 ? '00:00' : formatHour(hour);\r\n+    const prefix = `${selectedDay}T${hourStr}`;\r\n+    return events.find(e => e.date.startsWith(prefix));\r\n+  };\r\n+\r\n+  const validate = () => {\r\n+    const errs = {};\r\n+    if (!formData.name.trim()) errs.name = 'Name is required';\r\n+    if (!formData.phone.trim()) errs.phone = 'Phone is required';\r\n+    else if (!/^\\d{10}$/.test(formData.phone)) errs.phone = 'Phone must be 10 digits';\r\n+    if (!['Point', 'Rappel'].includes(formData.type)) errs.type = 'Invalid type';\r\n+    // Add validation for status (must be confirmed or completed)\r\n+    if (!['CONFIRMED', 'COMPLETED'].includes(formData.status)) errs.status = 'Invalid status';\r\n+    setErrors(errs);\r\n+    return Object.keys(errs).length === 0;\r\n+  };\r\n+\r\n+  // Helper: Can status be modified? Event date/time passed by at least 1 hour?\r\n+  const canModifyStatus = () => {\r\n+    if (!selectedDay || editingHour === null) return false;\r\n+    const eventDate = new Date(selectedDay);\r\n+    eventDate.setHours(editingHour, 0, 0, 0);\r\n+    const now = new Date();\r\n+    return now - eventDate >= 60 * 60 * 1000; // 1 hour in ms\r\n+  };\r\n+\r\n+  const handleAddOrUpdate = async () => {\r\n+    if (isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, editingHour)) {\r\n+      alert(\"You can't add or modify events for past date/time.\");\r\n+      return;\r\n+    }\r\n+    if (!validate()) return;\r\n+\r\n+    const hourStr = editingHour === 24 ? '00:00' : formatHour(editingHour);\r\n+    const dateTime = `${selectedDay}T${hourStr}:00`;\r\n+\r\n+    const eventPayload = {\r\n+      title: `${formData.type} - ${formData.name}`,\r\n+      date: dateTime,\r\n+      name: formData.name,\r\n+      phone: formData.phone,\r\n+      type: formData.type,\r\n+      status: formData.status,\r\n+    };\r\n+\r\n+    try {\r\n+      const existingEvent = findEventAtHour(editingHour);\r\n+      if (existingEvent) {\r\n+        const res = await fetch(`http://localhost:5000/api/events/${existingEvent._id}`, {\r\n+          method: 'PUT',\r\n+          headers: authHeaders,\r\n+          body: JSON.stringify(eventPayload),\r\n+        });\r\n+        const updated = await res.json();\r\n+        setEvents(events.map(e => (e._id === updated._id ? updated : e)));\r\n+      } else {\r\n+        const res = await fetch('http://localhost:5000/api/events', {\r\n+          method: 'POST',\r\n+          headers: authHeaders,\r\n+          body: JSON.stringify(eventPayload),\r\n+        });\r\n+        const created = await res.json();\r\n+        setEvents([...events, created]);\r\n+      }\r\n+      setOpenEventForm(false);\r\n+      setEditingHour(null);\r\n+      setFormData({ name: '', phone: '', type: 'Point', status: 'CONFIRMED' });\r\n+      setErrors({});\r\n+    } catch (err) {\r\n+      console.error('Save event failed:', err);\r\n+    }\r\n+  };\r\n+\r\n+  const handleDelete = async (hourToDelete) => {\r\n+    if (isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, hourToDelete)) {\r\n+      alert(\"You can't delete events from past date/time.\");\r\n+      return;\r\n+    }\r\n+    const existingEvent = findEventAtHour(hourToDelete);\r\n+    if (!existingEvent) return;\r\n+\r\n+    try {\r\n+      await fetch(`http://localhost:5000/api/events/${existingEvent._id}`, {\r\n+        method: 'DELETE',\r\n+        headers: authHeaders,\r\n+      });\r\n+      setEvents(events.filter(e => e._id !== existingEvent._id));\r\n+      if (editingHour === hourToDelete) {\r\n+        setOpenEventForm(false);\r\n+        setEditingHour(null);\r\n+        setFormData({ name: '', phone: '', type: 'Point', status: 'CONFIRMED' });\r\n+        setErrors({});\r\n+      }\r\n+    } catch (err) {\r\n+      console.error('Delete event failed:', err);\r\n+    }\r\n+  };\r\n+\r\n+  const startEditing = (hour) => {\r\n+    if (isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, hour)) {\r\n+      alert(\"You can't add or modify events for past date/time.\");\r\n+      return;\r\n+    }\r\n+    const ev = findEventAtHour(hour);\r\n+    if (ev) {\r\n+      setFormData({\r\n+        name: ev.name,\r\n+        phone: ev.phone,\r\n+        type: ev.type,\r\n+        status: ev.status || 'CONFIRMED',\r\n+      });\r\n+    } else {\r\n+      setFormData({ name: '', phone: '', type: 'Point', status: 'CONFIRMED' });\r\n+    }\r\n+    setEditingHour(hour);\r\n+    setErrors({});\r\n+    setOpenEventForm(true);\r\n+  };\r\n+\r\n+  const handleDateClick = (arg) => {\r\n+    const clickedDate = arg.dateStr;\r\n+    const hasEventOnDate = events.some(ev => ev.date.startsWith(clickedDate));\r\n+\r\n+    if (isDateBeforeToday(clickedDate) && !hasEventOnDate) {\r\n+      alert('No events on this past date.');\r\n+      return;\r\n+    }\r\n+\r\n+    setSelectedDay(clickedDate);\r\n+    setOpenDayModal(true);\r\n+    setEditingHour(null);\r\n+    setFormData({ name: '', phone: '', type: 'Point', status: 'CONFIRMED' });\r\n+    setErrors({});\r\n+  };\r\n+\r\n+  return (\r\n+    <>\r\n+      <NavBar\r\n+        email={profile?.email}\r\n+        onLogout={() => {\r\n+          localStorage.removeItem('token');\r\n+          // redirect if needed\r\n+        }}\r\n+      />\r\n+      <Container maxWidth=\"lg\" sx={{ mt: 4 }}>\r\n+        <Box boxShadow={3} p={2} bgcolor=\"white\" borderRadius={2}>\r\n+          <FullCalendar\r\n+            plugins={[dayGridPlugin, interactionPlugin]}\r\n+            initialView=\"dayGridMonth\"\r\n+            selectable={true}\r\n+            events={events}\r\n+            dateClick={handleDateClick}\r\n+          />\r\n+        </Box>\r\n+      </Container>\r\n+\r\n+      <Dialog\r\n+        open={openDayModal}\r\n+        onClose={() => setOpenDayModal(false)}\r\n+        maxWidth=\"lg\"\r\n+        fullWidth\r\n+      >\r\n+        <DialogTitle>Schedule for {selectedDay}</DialogTitle>\r\n+        <DialogContent>\r\n+          <Table>\r\n+            <TableHead>\r\n+              <TableRow>\r\n+                <TableCell>Hour</TableCell>\r\n+                <TableCell>Event Name</TableCell>\r\n+                <TableCell>Customer Name</TableCell>\r\n+                <TableCell>Customer Phone</TableCell>\r\n+                <TableCell>Status</TableCell>\r\n+                <TableCell>Action</TableCell>\r\n+              </TableRow>\r\n+            </TableHead>\r\n+\r\n+            <TableBody>\r\n+              {HOURS.map((hour) => {\r\n+                const ev = findEventAtHour(hour);\r\n+                const isPast = isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, hour);\r\n+\r\n+                return (\r\n+                  <TableRow key={hour}>\r\n+                    <TableCell>{formatHour(hour)}</TableCell>\r\n+                    <TableCell>{ev?.title || ''}</TableCell>\r\n+                    <TableCell>{ev?.name || ''}</TableCell>\r\n+                    <TableCell>{ev?.phone || ''}</TableCell>\r\n+                    <TableCell>{ev?.status || ''}</TableCell>\r\n+                    <TableCell>\r\n+                      {isPast ? (\r\n+                        <>\r\n+                          {ev ? (\r\n+                            <>\r\n+                              <IconButton size=\"small\" disabled title=\"Modify disabled on past date/time\">\r\n+                                <EditIcon />\r\n+                              </IconButton>\r\n+                              <IconButton size=\"small\" disabled title=\"Delete disabled on past date/time\">\r\n+                                <DeleteIcon />\r\n+                              </IconButton>\r\n+                            </>\r\n+                          ) : (\r\n+                            <IconButton size=\"small\" disabled title=\"Add disabled on past date/time\">\r\n+                              <AddIcon />\r\n+                            </IconButton>\r\n+                          )}\r\n+                        </>\r\n+                      ) : (\r\n+                        <>\r\n+                          <IconButton\r\n+                            color=\"primary\"\r\n+                            size=\"small\"\r\n+                            onClick={() => startEditing(hour)}\r\n+                            title={ev ? 'Modify' : 'Add'}\r\n+                          >\r\n+                            {ev ? <EditIcon /> : <AddIcon />}\r\n+                          </IconButton>\r\n+\r\n+                          {ev && (\r\n+                            <IconButton\r\n+                              color=\"error\"\r\n+                              size=\"small\"\r\n+                              onClick={() => handleDelete(hour)}\r\n+                              title=\"Delete\"\r\n+                            >\r\n+                              <DeleteIcon />\r\n+                            </IconButton>\r\n+                          )}\r\n+                        </>\r\n+                      )}\r\n+                    </TableCell>\r\n+                  </TableRow>\r\n+                );\r\n+              })}\r\n+            </TableBody>\r\n+          </Table>\r\n+        </DialogContent>\r\n+\r\n+        <DialogActions>\r\n+          <Button onClick={() => setOpenDayModal(false)}>Close</Button>\r\n+        </DialogActions>\r\n+      </Dialog>\r\n+\r\n+      <Dialog\r\n+        open={openEventForm}\r\n+        onClose={() => setOpenEventForm(false)}\r\n+        maxWidth=\"sm\"\r\n+        fullWidth\r\n+      >\r\n+        <DialogTitle>\r\n+          {editingHour !== null && findEventAtHour(editingHour)\r\n+            ? 'Modify Event'\r\n+            : 'Add Event'}\r\n+        </DialogTitle>\r\n+        <DialogContent>\r\n+          <Typography variant=\"subtitle1\" gutterBottom>\r\n+            For hour: {editingHour !== null ? formatHour(editingHour) : ''}\r\n+          </Typography>\r\n+\r\n+          <TextField\r\n+            margin=\"dense\"\r\n+            label=\"Customer Name\"\r\n+            fullWidth\r\n+            value={formData.name}\r\n+            onChange={(e) => setFormData({ ...formData, name: e.target.value })}\r\n+            error={!!errors.name}\r\n+            helperText={errors.name}\r\n+          />\r\n+          <TextField\r\n+            margin=\"dense\"\r\n+            label=\"Customer Phone\"\r\n+            fullWidth\r\n+            value={formData.phone}\r\n+            onChange={(e) => setFormData({ ...formData, phone: e.target.value })}\r\n+            error={!!errors.phone}\r\n+            helperText={errors.phone}\r\n+          />\r\n+          <TextField\r\n+            margin=\"dense\"\r\n+            select\r\n+            label=\"Type\"\r\n+            fullWidth\r\n+            value={formData.type}\r\n+            onChange={(e) => setFormData({ ...formData, type: e.target.value })}\r\n+          >\r\n+            <MenuItem value=\"Point\">Point</MenuItem>\r\n+            <MenuItem value=\"Rappel\">Rappel</MenuItem>\r\n+          </TextField>\r\n+\r\n+          {/* Status field only editable if 1 hour passed */}\r\n+          {canModifyStatus() ? (\r\n+            <TextField\r\n+              margin=\"dense\"\r\n+              select\r\n+              label=\"Status\"\r\n+              fullWidth\r\n+              value={formData.status}\r\n+              onChange={(e) => setFormData({ ...formData, status: e.target.value })}\r\n+              error={!!errors.status}\r\n+              helperText={errors.status}\r\n+            >\r\n+              <MenuItem value=\"CONFIRMED\">CONFIRMED</MenuItem>\r\n+              <MenuItem value=\"COMPLETED\">COMPLETED</MenuItem>\r\n+            </TextField>\r\n+          ) : (\r\n+            <Typography\r\n+              variant=\"body2\"\r\n+              color=\"textSecondary\"\r\n+              sx={{ mt: 2, mb: 1 }}\r\n+            >\r\n+              Status can only be modified  one hour after the event time.\r\n+            </Typography>\r\n+          )}\r\n+        </DialogContent>\r\n+\r\n+        <DialogActions>\r\n+          <Button onClick={() => setOpenEventForm(false)}>Cancel</Button>\r\n+          <Button\r\n+            onClick={handleAddOrUpdate}\r\n+            variant=\"contained\"\r\n+            color=\"primary\"\r\n+            disabled={isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, editingHour)}\r\n+          >\r\n+            Save\r\n+          </Button>\r\n+        </DialogActions>\r\n+      </Dialog>\r\n+    </>\r\n+  );\r\n+}\r\n"
                },
                {
                    "date": 1751918033544,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,280 @@\n+import React, { useState, useEffect } from 'react';\r\n+import {\r\n+  Container,\r\n+  Box,\r\n+  Dialog,\r\n+  DialogTitle,\r\n+  DialogContent,\r\n+  DialogActions,\r\n+  Button,\r\n+  TextField,\r\n+  MenuItem,\r\n+  Table,\r\n+  TableHead,\r\n+  TableBody,\r\n+  TableRow,\r\n+  TableCell,\r\n+  Typography,\r\n+  IconButton,\r\n+} from '@mui/material';\r\n+import FullCalendar from '@fullcalendar/react';\r\n+import dayGridPlugin from '@fullcalendar/daygrid';\r\n+import interactionPlugin from '@fullcalendar/interaction';\r\n+import NavBar from '../components/NavBar';\r\n+\r\n+import AddIcon from '@mui/icons-material/Add';\r\n+import EditIcon from '@mui/icons-material/Edit';\r\n+import DeleteIcon from '@mui/icons-material/Delete';\r\n+\r\n+const HOURS = Array.from({ length: 17 }, (_, i) => 8 + i); // 08:00 to 00:00\r\n+\r\n+function formatHour(h) {\r\n+  return h === 24 ? '00:00' : `${h.toString().padStart(2, '0')}:00`;\r\n+}\r\n+\r\n+export default function Dashboard() {\r\n+  const [profile, setProfile] = useState(null);\r\n+  const [events, setEvents] = useState([]);\r\n+  const [selectedDay, setSelectedDay] = useState(null);\r\n+  const [openDayModal, setOpenDayModal] = useState(false);\r\n+\r\n+  const [openEventForm, setOpenEventForm] = useState(false);\r\n+  const [editingHour, setEditingHour] = useState(null);\r\n+  const [formData, setFormData] = useState({ name: '', phone: '', type: 'Point', status: 'CONFIRMED' });\r\n+  const [errors, setErrors] = useState({});\r\n+\r\n+  const token = localStorage.getItem('token');\r\n+  const authHeaders = {\r\n+    Authorization: `Bearer ${token}`,\r\n+    'Content-Type': 'application/json',\r\n+  };\r\n+\r\n+  useEffect(() => {\r\n+    if (!token) return;\r\n+\r\n+    fetch('http://localhost:5000/api/admin/profile', { headers: authHeaders })\r\n+      .then(res => res.ok ? res.json() : Promise.reject())\r\n+      .then(setProfile)\r\n+      .catch(() => localStorage.removeItem('token'));\r\n+\r\n+    fetch('http://localhost:5000/api/events', { headers: authHeaders })\r\n+      .then(res => res.json())\r\n+      .then(setEvents)\r\n+      .catch(console.error);\r\n+  }, [token]);\r\n+\r\n+  const isDateBeforeToday = (dateStr) => {\r\n+    const d = new Date(dateStr);\r\n+    const today = new Date();\r\n+    today.setHours(0, 0, 0, 0);\r\n+    return d < today;\r\n+  };\r\n+\r\n+  const isHourInPast = (dateStr, hour) => {\r\n+    const now = new Date();\r\n+    const selected = new Date(dateStr);\r\n+    selected.setHours(hour, 0, 0, 0);\r\n+    return selected < now;\r\n+  };\r\n+\r\n+  const isPastEvent = () => {\r\n+    return isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, editingHour);\r\n+  };\r\n+\r\n+  const canModifyStatus = () => {\r\n+    if (!selectedDay || editingHour === null) return false;\r\n+    const eventDate = new Date(selectedDay);\r\n+    eventDate.setHours(editingHour, 0, 0, 0);\r\n+    return new Date() - eventDate >= 3600000; // 1 hour = 3600000 ms\r\n+  };\r\n+\r\n+  const findEventAtHour = (hour) => {\r\n+    const hourStr = formatHour(hour);\r\n+    return events.find(e => e.date.startsWith(`${selectedDay}T${hourStr}`));\r\n+  };\r\n+\r\n+  const validate = () => {\r\n+    const errs = {};\r\n+    if (!['CONFIRMED', 'COMPLETED', 'CANCELLED'].includes(formData.status)) {\r\n+      errs.status = 'Invalid status';\r\n+    }\r\n+    if (!isPastEvent()) {\r\n+      if (!formData.name.trim()) errs.name = 'Name is required';\r\n+      if (!/^\\d{10}$/.test(formData.phone)) errs.phone = 'Phone must be 10 digits';\r\n+    }\r\n+    setErrors(errs);\r\n+    return Object.keys(errs).length === 0;\r\n+  };\r\n+\r\n+  const handleAddOrUpdate = async () => {\r\n+    if (!validate()) return;\r\n+\r\n+    const hourStr = formatHour(editingHour);\r\n+    const dateTime = `${selectedDay}T${hourStr}:00`;\r\n+    const existingEvent = findEventAtHour(editingHour);\r\n+\r\n+    const eventPayload = isPastEvent()\r\n+      ? { status: formData.status }\r\n+      : {\r\n+          title: `${formData.type} - ${formData.name}`,\r\n+          date: dateTime,\r\n+          name: formData.name,\r\n+          phone: formData.phone,\r\n+          type: formData.type,\r\n+          status: formData.status,\r\n+        };\r\n+\r\n+    try {\r\n+      const res = await fetch(\r\n+        `http://localhost:5000/api/events/${existingEvent ? existingEvent._id : ''}`,\r\n+        {\r\n+          method: existingEvent ? 'PUT' : 'POST',\r\n+          headers: authHeaders,\r\n+          body: JSON.stringify(eventPayload),\r\n+        }\r\n+      );\r\n+      const updated = await res.json();\r\n+      if (existingEvent) {\r\n+        setEvents(events.map(e => (e._id === updated._id ? updated : e)));\r\n+      } else {\r\n+        setEvents([...events, updated]);\r\n+      }\r\n+      setOpenEventForm(false);\r\n+      setEditingHour(null);\r\n+      setFormData({ name: '', phone: '', type: 'Point', status: 'CONFIRMED' });\r\n+      setErrors({});\r\n+    } catch (err) {\r\n+      console.error('Save event failed:', err);\r\n+    }\r\n+  };\r\n+\r\n+  const handleDelete = async (hourToDelete) => {\r\n+    if (isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, hourToDelete)) {\r\n+      alert(\"You can't delete events from past date/time.\");\r\n+      return;\r\n+    }\r\n+    const existingEvent = findEventAtHour(hourToDelete);\r\n+    if (!existingEvent) return;\r\n+\r\n+    try {\r\n+      await fetch(`http://localhost:5000/api/events/${existingEvent._id}`, {\r\n+        method: 'DELETE',\r\n+        headers: authHeaders,\r\n+      });\r\n+      setEvents(events.filter(e => e._id !== existingEvent._id));\r\n+    } catch (err) {\r\n+      console.error('Delete event failed:', err);\r\n+    }\r\n+  };\r\n+\r\n+  const startEditing = (hour) => {\r\n+    const ev = findEventAtHour(hour);\r\n+    setFormData({\r\n+      name: ev?.name || '',\r\n+      phone: ev?.phone || '',\r\n+      type: ev?.type || 'Point',\r\n+      status: ev?.status || 'CONFIRMED',\r\n+    });\r\n+    setEditingHour(hour);\r\n+    setErrors({});\r\n+    setOpenEventForm(true);\r\n+  };\r\n+\r\n+  const handleDateClick = (arg) => {\r\n+    const clickedDate = arg.dateStr;\r\n+    setSelectedDay(clickedDate);\r\n+    setOpenDayModal(true);\r\n+    setEditingHour(null);\r\n+    setFormData({ name: '', phone: '', type: 'Point', status: 'CONFIRMED' });\r\n+    setErrors({});\r\n+  };\r\n+\r\n+  return (\r\n+    <>\r\n+      <NavBar email={profile?.email} onLogout={() => localStorage.removeItem('token')} />\r\n+      <Container maxWidth=\"lg\" sx={{ mt: 4 }}>\r\n+        <Box boxShadow={3} p={2} bgcolor=\"white\" borderRadius={2}>\r\n+          <FullCalendar\r\n+            plugins={[dayGridPlugin, interactionPlugin]}\r\n+            initialView=\"dayGridMonth\"\r\n+            selectable={true}\r\n+            events={events}\r\n+            dateClick={handleDateClick}\r\n+          />\r\n+        </Box>\r\n+      </Container>\r\n+\r\n+      <Dialog open={openEventForm} onClose={() => setOpenEventForm(false)} maxWidth=\"sm\" fullWidth>\r\n+        <DialogTitle>{editingHour !== null && findEventAtHour(editingHour) ? 'Modify Event' : 'Add Event'}</DialogTitle>\r\n+        <DialogContent>\r\n+          <Typography variant=\"subtitle1\" gutterBottom>\r\n+            For hour: {editingHour !== null ? formatHour(editingHour) : ''}\r\n+          </Typography>\r\n+\r\n+          <TextField\r\n+            margin=\"dense\"\r\n+            label=\"Customer Name\"\r\n+            fullWidth\r\n+            value={formData.name}\r\n+            onChange={(e) => setFormData({ ...formData, name: e.target.value })}\r\n+            error={!!errors.name}\r\n+            helperText={errors.name}\r\n+            InputProps={{ readOnly: isPastEvent() }}\r\n+          />\r\n+\r\n+          <TextField\r\n+            margin=\"dense\"\r\n+            label=\"Customer Phone\"\r\n+            fullWidth\r\n+            value={formData.phone}\r\n+            onChange={(e) => setFormData({ ...formData, phone: e.target.value })}\r\n+            error={!!errors.phone}\r\n+            helperText={errors.phone}\r\n+            InputProps={{ readOnly: isPastEvent() }}\r\n+          />\r\n+\r\n+          <TextField\r\n+            margin=\"dense\"\r\n+            select\r\n+            label=\"Type\"\r\n+            fullWidth\r\n+            value={formData.type}\r\n+            onChange={(e) => setFormData({ ...formData, type: e.target.value })}\r\n+            InputProps={{ readOnly: isPastEvent() }}\r\n+          >\r\n+            <MenuItem value=\"Point\">Point</MenuItem>\r\n+            <MenuItem value=\"Rappel\">Rappel</MenuItem>\r\n+          </TextField>\r\n+\r\n+          {canModifyStatus() ? (\r\n+            <TextField\r\n+              margin=\"dense\"\r\n+              select\r\n+              label=\"Status\"\r\n+              fullWidth\r\n+              value={formData.status}\r\n+              onChange={(e) => setFormData({ ...formData, status: e.target.value })}\r\n+              error={!!errors.status}\r\n+              helperText={errors.status}\r\n+            >\r\n+              <MenuItem value=\"CONFIRMED\">CONFIRMED</MenuItem>\r\n+              <MenuItem value=\"COMPLETED\">COMPLETED</MenuItem>\r\n+              <MenuItem value=\"CANCELLED\">CANCELLED</MenuItem>\r\n+            </TextField>\r\n+          ) : (\r\n+            <Typography variant=\"body2\" color=\"textSecondary\">\r\n+              Status editable 1 hour after event only.\r\n+            </Typography>\r\n+          )}\r\n+        </DialogContent>\r\n+\r\n+        <DialogActions>\r\n+          <Button onClick={() => setOpenEventForm(false)}>Cancel</Button>\r\n+          <Button onClick={handleAddOrUpdate} variant=\"contained\" color=\"primary\">\r\n+            Save\r\n+          </Button>\r\n+        </DialogActions>\r\n+      </Dialog>\r\n+    </>\r\n+  );\r\n+}\r\n"
                },
                {
                    "date": 1751918059855,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,415 @@\n+import React, { useState, useEffect } from 'react';\r\n+import {\r\n+  Container,\r\n+  Box,\r\n+  Dialog,\r\n+  DialogTitle,\r\n+  DialogContent,\r\n+  DialogActions,\r\n+  Button,\r\n+  TextField,\r\n+  MenuItem,\r\n+  Table,\r\n+  TableHead,\r\n+  TableBody,\r\n+  TableRow,\r\n+  TableCell,\r\n+  Typography,\r\n+  IconButton,\r\n+} from '@mui/material';\r\n+import FullCalendar from '@fullcalendar/react';\r\n+import dayGridPlugin from '@fullcalendar/daygrid';\r\n+import interactionPlugin from '@fullcalendar/interaction';\r\n+import NavBar from '../components/NavBar';\r\n+\r\n+import AddIcon from '@mui/icons-material/Add';\r\n+import EditIcon from '@mui/icons-material/Edit';\r\n+import DeleteIcon from '@mui/icons-material/Delete';\r\n+\r\n+const HOURS = Array.from({ length: 17 }, (_, i) => 8 + i); // 08:00 to 00:00\r\n+\r\n+function formatHour(h) {\r\n+  return h === 24 ? '00:00' : `${h.toString().padStart(2, '0')}:00`;\r\n+}\r\n+\r\n+export default function Dashboard() {\r\n+  const [profile, setProfile] = useState(null);\r\n+  const [events, setEvents] = useState([]);\r\n+  const [selectedDay, setSelectedDay] = useState(null);\r\n+  const [openDayModal, setOpenDayModal] = useState(false);\r\n+\r\n+  const [openEventForm, setOpenEventForm] = useState(false);\r\n+  const [editingHour, setEditingHour] = useState(null);\r\n+  // Added status field with default 'confirmed'\r\n+  const [formData, setFormData] = useState({ name: '', phone: '', type: 'Point', status: 'CONFIRMED' });\r\n+  const [errors, setErrors] = useState({});\r\n+\r\n+  const token = localStorage.getItem('token');\r\n+  const authHeaders = {\r\n+    Authorization: `Bearer ${token}`,\r\n+    'Content-Type': 'application/json',\r\n+  };\r\n+\r\n+  useEffect(() => {\r\n+    if (!token) return;\r\n+\r\n+    fetch('http://localhost:5000/api/admin/profile', { headers: authHeaders })\r\n+      .then(res => (res.ok ? res.json() : Promise.reject()))\r\n+      .then(setProfile)\r\n+      .catch(() => {\r\n+        localStorage.removeItem('token');\r\n+      });\r\n+\r\n+    fetch('http://localhost:5000/api/events', { headers: authHeaders })\r\n+      .then(res => res.json())\r\n+      .then(setEvents)\r\n+      .catch(console.error);\r\n+  }, [token]);\r\n+\r\n+  const isDateBeforeToday = (dateStr) => {\r\n+    if (!dateStr) return false;\r\n+    const selected = new Date(dateStr);\r\n+    const today = new Date();\r\n+    today.setHours(0, 0, 0, 0);\r\n+    return selected < today;\r\n+  };\r\n+\r\n+  const isHourInPast = (dateStr, hour) => {\r\n+    if (!dateStr) return false;\r\n+    const now = new Date();\r\n+    const selected = new Date(dateStr);\r\n+    selected.setHours(hour, 0, 0, 0);\r\n+    return selected < now;\r\n+  };\r\n+\r\n+  const findEventAtHour = (hour) => {\r\n+    if (!selectedDay) return null;\r\n+    const hourStr = hour === 24 ? '00:00' : formatHour(hour);\r\n+    const prefix = `${selectedDay}T${hourStr}`;\r\n+    return events.find(e => e.date.startsWith(prefix));\r\n+  };\r\n+\r\n+  const validate = () => {\r\n+    const errs = {};\r\n+    if (!formData.name.trim()) errs.name = 'Name is required';\r\n+    if (!formData.phone.trim()) errs.phone = 'Phone is required';\r\n+    else if (!/^\\d{10}$/.test(formData.phone)) errs.phone = 'Phone must be 10 digits';\r\n+    if (!['Point', 'Rappel'].includes(formData.type)) errs.type = 'Invalid type';\r\n+    // Add validation for status (must be confirmed or completed)\r\n+    if (!['CONFIRMED', 'COMPLETED'].includes(formData.status)) errs.status = 'Invalid status';\r\n+    setErrors(errs);\r\n+    return Object.keys(errs).length === 0;\r\n+  };\r\n+\r\n+  // Helper: Can status be modified? Event date/time passed by at least 1 hour?\r\n+  const canModifyStatus = () => {\r\n+    if (!selectedDay || editingHour === null) return false;\r\n+    const eventDate = new Date(selectedDay);\r\n+    eventDate.setHours(editingHour, 0, 0, 0);\r\n+    const now = new Date();\r\n+    return now - eventDate >= 60 * 60 * 1000; // 1 hour in ms\r\n+  };\r\n+\r\n+  const handleAddOrUpdate = async () => {\r\n+    if (isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, editingHour)) {\r\n+      alert(\"You can't add or modify events for past date/time.\");\r\n+      return;\r\n+    }\r\n+    if (!validate()) return;\r\n+\r\n+    const hourStr = editingHour === 24 ? '00:00' : formatHour(editingHour);\r\n+    const dateTime = `${selectedDay}T${hourStr}:00`;\r\n+\r\n+    const eventPayload = {\r\n+      title: `${formData.type} - ${formData.name}`,\r\n+      date: dateTime,\r\n+      name: formData.name,\r\n+      phone: formData.phone,\r\n+      type: formData.type,\r\n+      status: formData.status,\r\n+    };\r\n+\r\n+    try {\r\n+      const existingEvent = findEventAtHour(editingHour);\r\n+      if (existingEvent) {\r\n+        const res = await fetch(`http://localhost:5000/api/events/${existingEvent._id}`, {\r\n+          method: 'PUT',\r\n+          headers: authHeaders,\r\n+          body: JSON.stringify(eventPayload),\r\n+        });\r\n+        const updated = await res.json();\r\n+        setEvents(events.map(e => (e._id === updated._id ? updated : e)));\r\n+      } else {\r\n+        const res = await fetch('http://localhost:5000/api/events', {\r\n+          method: 'POST',\r\n+          headers: authHeaders,\r\n+          body: JSON.stringify(eventPayload),\r\n+        });\r\n+        const created = await res.json();\r\n+        setEvents([...events, created]);\r\n+      }\r\n+      setOpenEventForm(false);\r\n+      setEditingHour(null);\r\n+      setFormData({ name: '', phone: '', type: 'Point', status: 'CONFIRMED' });\r\n+      setErrors({});\r\n+    } catch (err) {\r\n+      console.error('Save event failed:', err);\r\n+    }\r\n+  };\r\n+\r\n+  const handleDelete = async (hourToDelete) => {\r\n+    if (isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, hourToDelete)) {\r\n+      alert(\"You can't delete events from past date/time.\");\r\n+      return;\r\n+    }\r\n+    const existingEvent = findEventAtHour(hourToDelete);\r\n+    if (!existingEvent) return;\r\n+\r\n+    try {\r\n+      await fetch(`http://localhost:5000/api/events/${existingEvent._id}`, {\r\n+        method: 'DELETE',\r\n+        headers: authHeaders,\r\n+      });\r\n+      setEvents(events.filter(e => e._id !== existingEvent._id));\r\n+      if (editingHour === hourToDelete) {\r\n+        setOpenEventForm(false);\r\n+        setEditingHour(null);\r\n+        setFormData({ name: '', phone: '', type: 'Point', status: 'CONFIRMED' });\r\n+        setErrors({});\r\n+      }\r\n+    } catch (err) {\r\n+      console.error('Delete event failed:', err);\r\n+    }\r\n+  };\r\n+\r\n+  const startEditing = (hour) => {\r\n+    if (isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, hour)) {\r\n+      alert(\"You can't add or modify events for past date/time.\");\r\n+      return;\r\n+    }\r\n+    const ev = findEventAtHour(hour);\r\n+    if (ev) {\r\n+      setFormData({\r\n+        name: ev.name,\r\n+        phone: ev.phone,\r\n+        type: ev.type,\r\n+        status: ev.status || 'CONFIRMED',\r\n+      });\r\n+    } else {\r\n+      setFormData({ name: '', phone: '', type: 'Point', status: 'CONFIRMED' });\r\n+    }\r\n+    setEditingHour(hour);\r\n+    setErrors({});\r\n+    setOpenEventForm(true);\r\n+  };\r\n+\r\n+  const handleDateClick = (arg) => {\r\n+    const clickedDate = arg.dateStr;\r\n+    const hasEventOnDate = events.some(ev => ev.date.startsWith(clickedDate));\r\n+\r\n+    if (isDateBeforeToday(clickedDate) && !hasEventOnDate) {\r\n+      alert('No events on this past date.');\r\n+      return;\r\n+    }\r\n+\r\n+    setSelectedDay(clickedDate);\r\n+    setOpenDayModal(true);\r\n+    setEditingHour(null);\r\n+    setFormData({ name: '', phone: '', type: 'Point', status: 'CONFIRMED' });\r\n+    setErrors({});\r\n+  };\r\n+\r\n+  return (\r\n+    <>\r\n+      <NavBar\r\n+        email={profile?.email}\r\n+        onLogout={() => {\r\n+          localStorage.removeItem('token');\r\n+          // redirect if needed\r\n+        }}\r\n+      />\r\n+      <Container maxWidth=\"lg\" sx={{ mt: 4 }}>\r\n+        <Box boxShadow={3} p={2} bgcolor=\"white\" borderRadius={2}>\r\n+          <FullCalendar\r\n+            plugins={[dayGridPlugin, interactionPlugin]}\r\n+            initialView=\"dayGridMonth\"\r\n+            selectable={true}\r\n+            events={events}\r\n+            dateClick={handleDateClick}\r\n+          />\r\n+        </Box>\r\n+      </Container>\r\n+\r\n+      <Dialog\r\n+        open={openDayModal}\r\n+        onClose={() => setOpenDayModal(false)}\r\n+        maxWidth=\"lg\"\r\n+        fullWidth\r\n+      >\r\n+        <DialogTitle>Schedule for {selectedDay}</DialogTitle>\r\n+        <DialogContent>\r\n+          <Table>\r\n+            <TableHead>\r\n+              <TableRow>\r\n+                <TableCell>Hour</TableCell>\r\n+                <TableCell>Event Name</TableCell>\r\n+                <TableCell>Customer Name</TableCell>\r\n+                <TableCell>Customer Phone</TableCell>\r\n+                <TableCell>Status</TableCell>\r\n+                <TableCell>Action</TableCell>\r\n+              </TableRow>\r\n+            </TableHead>\r\n+\r\n+            <TableBody>\r\n+              {HOURS.map((hour) => {\r\n+                const ev = findEventAtHour(hour);\r\n+                const isPast = isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, hour);\r\n+\r\n+                return (\r\n+                  <TableRow key={hour}>\r\n+                    <TableCell>{formatHour(hour)}</TableCell>\r\n+                    <TableCell>{ev?.title || ''}</TableCell>\r\n+                    <TableCell>{ev?.name || ''}</TableCell>\r\n+                    <TableCell>{ev?.phone || ''}</TableCell>\r\n+                    <TableCell>{ev?.status || ''}</TableCell>\r\n+                    <TableCell>\r\n+                      {isPast ? (\r\n+                        <>\r\n+                          {ev ? (\r\n+                            <>\r\n+                              <IconButton size=\"small\" disabled title=\"Modify disabled on past date/time\">\r\n+                                <EditIcon />\r\n+                              </IconButton>\r\n+                              <IconButton size=\"small\" disabled title=\"Delete disabled on past date/time\">\r\n+                                <DeleteIcon />\r\n+                              </IconButton>\r\n+                            </>\r\n+                          ) : (\r\n+                            <IconButton size=\"small\" disabled title=\"Add disabled on past date/time\">\r\n+                              <AddIcon />\r\n+                            </IconButton>\r\n+                          )}\r\n+                        </>\r\n+                      ) : (\r\n+                        <>\r\n+                          <IconButton\r\n+                            color=\"primary\"\r\n+                            size=\"small\"\r\n+                            onClick={() => startEditing(hour)}\r\n+                            title={ev ? 'Modify' : 'Add'}\r\n+                          >\r\n+                            {ev ? <EditIcon /> : <AddIcon />}\r\n+                          </IconButton>\r\n+\r\n+                          {ev && (\r\n+                            <IconButton\r\n+                              color=\"error\"\r\n+                              size=\"small\"\r\n+                              onClick={() => handleDelete(hour)}\r\n+                              title=\"Delete\"\r\n+                            >\r\n+                              <DeleteIcon />\r\n+                            </IconButton>\r\n+                          )}\r\n+                        </>\r\n+                      )}\r\n+                    </TableCell>\r\n+                  </TableRow>\r\n+                );\r\n+              })}\r\n+            </TableBody>\r\n+          </Table>\r\n+        </DialogContent>\r\n+\r\n+        <DialogActions>\r\n+          <Button onClick={() => setOpenDayModal(false)}>Close</Button>\r\n+        </DialogActions>\r\n+      </Dialog>\r\n+\r\n+      <Dialog\r\n+        open={openEventForm}\r\n+        onClose={() => setOpenEventForm(false)}\r\n+        maxWidth=\"sm\"\r\n+        fullWidth\r\n+      >\r\n+        <DialogTitle>\r\n+          {editingHour !== null && findEventAtHour(editingHour)\r\n+            ? 'Modify Event'\r\n+            : 'Add Event'}\r\n+        </DialogTitle>\r\n+        <DialogContent>\r\n+          <Typography variant=\"subtitle1\" gutterBottom>\r\n+            For hour: {editingHour !== null ? formatHour(editingHour) : ''}\r\n+          </Typography>\r\n+\r\n+          <TextField\r\n+            margin=\"dense\"\r\n+            label=\"Customer Name\"\r\n+            fullWidth\r\n+            value={formData.name}\r\n+            onChange={(e) => setFormData({ ...formData, name: e.target.value })}\r\n+            error={!!errors.name}\r\n+            helperText={errors.name}\r\n+          />\r\n+          <TextField\r\n+            margin=\"dense\"\r\n+            label=\"Customer Phone\"\r\n+            fullWidth\r\n+            value={formData.phone}\r\n+            onChange={(e) => setFormData({ ...formData, phone: e.target.value })}\r\n+            error={!!errors.phone}\r\n+            helperText={errors.phone}\r\n+          />\r\n+          <TextField\r\n+            margin=\"dense\"\r\n+            select\r\n+            label=\"Type\"\r\n+            fullWidth\r\n+            value={formData.type}\r\n+            onChange={(e) => setFormData({ ...formData, type: e.target.value })}\r\n+          >\r\n+            <MenuItem value=\"Point\">Point</MenuItem>\r\n+            <MenuItem value=\"Rappel\">Rappel</MenuItem>\r\n+          </TextField>\r\n+\r\n+          {/* Status field only editable if 1 hour passed */}\r\n+          {canModifyStatus() ? (\r\n+            <TextField\r\n+              margin=\"dense\"\r\n+              select\r\n+              label=\"Status\"\r\n+              fullWidth\r\n+              value={formData.status}\r\n+              onChange={(e) => setFormData({ ...formData, status: e.target.value })}\r\n+              error={!!errors.status}\r\n+              helperText={errors.status}\r\n+            >\r\n+              <MenuItem value=\"CONFIRMED\">CONFIRMED</MenuItem>\r\n+              <MenuItem value=\"COMPLETED\">COMPLETED</MenuItem>\r\n+            </TextField>\r\n+          ) : (\r\n+            <Typography\r\n+              variant=\"body2\"\r\n+              color=\"textSecondary\"\r\n+              sx={{ mt: 2, mb: 1 }}\r\n+            >\r\n+              Status can only be modified  one hour after the event time.\r\n+            </Typography>\r\n+          )}\r\n+        </DialogContent>\r\n+\r\n+        <DialogActions>\r\n+          <Button onClick={() => setOpenEventForm(false)}>Cancel</Button>\r\n+          <Button\r\n+            onClick={handleAddOrUpdate}\r\n+            variant=\"contained\"\r\n+            color=\"primary\"\r\n+            disabled={isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, editingHour)}\r\n+          >\r\n+            Save\r\n+          </Button>\r\n+        </DialogActions>\r\n+      </Dialog>\r\n+    </>\r\n+  );\r\n+}\r\n"
                },
                {
                    "date": 1751918249193,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,415 @@\n+import React, { useState, useEffect } from 'react';\r\n+import {\r\n+  Container,\r\n+  Box,\r\n+  Dialog,\r\n+  DialogTitle,\r\n+  DialogContent,\r\n+  DialogActions,\r\n+  Button,\r\n+  TextField,\r\n+  MenuItem,\r\n+  Table,\r\n+  TableHead,\r\n+  TableBody,\r\n+  TableRow,\r\n+  TableCell,\r\n+  Typography,\r\n+  IconButton,\r\n+} from '@mui/material';\r\n+import FullCalendar from '@fullcalendar/react';\r\n+import dayGridPlugin from '@fullcalendar/daygrid';\r\n+import interactionPlugin from '@fullcalendar/interaction';\r\n+import NavBar from '../components/NavBar';\r\n+\r\n+import AddIcon from '@mui/icons-material/Add';\r\n+import EditIcon from '@mui/icons-material/Edit';\r\n+import DeleteIcon from '@mui/icons-material/Delete';\r\n+\r\n+const HOURS = Array.from({ length: 17 }, (_, i) => 8 + i); // 08:00 to 00:00\r\n+\r\n+function formatHour(h) {\r\n+  return h === 24 ? '00:00' : `${h.toString().padStart(2, '0')}:00`;\r\n+}\r\n+\r\n+export default function Dashboard() {\r\n+  const [profile, setProfile] = useState(null);\r\n+  const [events, setEvents] = useState([]);\r\n+  const [selectedDay, setSelectedDay] = useState(null);\r\n+  const [openDayModal, setOpenDayModal] = useState(false);\r\n+\r\n+  const [openEventForm, setOpenEventForm] = useState(false);\r\n+  const [editingHour, setEditingHour] = useState(null);\r\n+  // Added status field with default 'confirmed'\r\n+  const [formData, setFormData] = useState({ name: '', phone: '', type: 'Point', status: 'CONFIRMED' });\r\n+  const [errors, setErrors] = useState({});\r\n+\r\n+  const token = localStorage.getItem('token');\r\n+  const authHeaders = {\r\n+    Authorization: `Bearer ${token}`,\r\n+    'Content-Type': 'application/json',\r\n+  };\r\n+\r\n+  useEffect(() => {\r\n+    if (!token) return;\r\n+\r\n+    fetch('http://localhost:5000/api/admin/profile', { headers: authHeaders })\r\n+      .then(res => (res.ok ? res.json() : Promise.reject()))\r\n+      .then(setProfile)\r\n+      .catch(() => {\r\n+        localStorage.removeItem('token');\r\n+      });\r\n+\r\n+    fetch('http://localhost:5000/api/events', { headers: authHeaders })\r\n+      .then(res => res.json())\r\n+      .then(setEvents)\r\n+      .catch(console.error);\r\n+  }, [token]);\r\n+\r\n+  const isDateBeforeToday = (dateStr) => {\r\n+    if (!dateStr) return false;\r\n+    const selected = new Date(dateStr);\r\n+    const today = new Date();\r\n+    today.setHours(0, 0, 0, 0);\r\n+    return selected < today;\r\n+  };\r\n+\r\n+  const isHourInPast = (dateStr, hour) => {\r\n+    if (!dateStr) return false;\r\n+    const now = new Date();\r\n+    const selected = new Date(dateStr);\r\n+    selected.setHours(hour, 0, 0, 0);\r\n+    return selected < now;\r\n+  };\r\n+\r\n+  const findEventAtHour = (hour) => {\r\n+    if (!selectedDay) return null;\r\n+    const hourStr = hour === 24 ? '00:00' : formatHour(hour);\r\n+    const prefix = `${selectedDay}T${hourStr}`;\r\n+    return events.find(e => e.date.startsWith(prefix));\r\n+  };\r\n+\r\n+  const validate = () => {\r\n+    const errs = {};\r\n+    if (!formData.name.trim()) errs.name = 'Name is required';\r\n+    if (!formData.phone.trim()) errs.phone = 'Phone is required';\r\n+    else if (!/^\\d{10}$/.test(formData.phone)) errs.phone = 'Phone must be 10 digits';\r\n+    if (!['Point', 'Rappel'].includes(formData.type)) errs.type = 'Invalid type';\r\n+    // Add validation for status (must be confirmed or completed)\r\n+    if (!['CONFIRMED', 'COMPLETED'].includes(formData.status)) errs.status = 'Invalid status';\r\n+    setErrors(errs);\r\n+    return Object.keys(errs).length === 0;\r\n+  };\r\n+\r\n+  // Helper: Can status be modified? Event date/time passed by at least 1 hour?\r\n+  const canModifyStatus = () => {\r\n+    if (!selectedDay || editingHour === null) return false;\r\n+    const eventDate = new Date(selectedDay);\r\n+    eventDate.setHours(editingHour, 0, 0, 0);\r\n+    const now = new Date();\r\n+    return now - eventDate >= 60 * 60 * 1000; // 1 hour in ms\r\n+  };\r\n+\r\n+  const handleAddOrUpdate = async () => {\r\n+    if (isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, editingHour)) {\r\n+      alert(\"You can't add or modify events for past date/time.\");\r\n+      return;\r\n+    }\r\n+    if (!validate()) return;\r\n+\r\n+    const hourStr = editingHour === 24 ? '00:00' : formatHour(editingHour);\r\n+    const dateTime = `${selectedDay}T${hourStr}:00`;\r\n+\r\n+    const eventPayload = {\r\n+      title: `${formData.type} - ${formData.name}`,\r\n+      date: dateTime,\r\n+      name: formData.name,\r\n+      phone: formData.phone,\r\n+      type: formData.type,\r\n+      status: formData.status,\r\n+    };\r\n+\r\n+    try {\r\n+      const existingEvent = findEventAtHour(editingHour);\r\n+      if (existingEvent) {\r\n+        const res = await fetch(`http://localhost:5000/api/events/${existingEvent._id}`, {\r\n+          method: 'PUT',\r\n+          headers: authHeaders,\r\n+          body: JSON.stringify(eventPayload),\r\n+        });\r\n+        const updated = await res.json();\r\n+        setEvents(events.map(e => (e._id === updated._id ? updated : e)));\r\n+      } else {\r\n+        const res = await fetch('http://localhost:5000/api/events', {\r\n+          method: 'POST',\r\n+          headers: authHeaders,\r\n+          body: JSON.stringify(eventPayload),\r\n+        });\r\n+        const created = await res.json();\r\n+        setEvents([...events, created]);\r\n+      }\r\n+      setOpenEventForm(false);\r\n+      setEditingHour(null);\r\n+      setFormData({ name: '', phone: '', type: 'Point', status: 'CONFIRMED' });\r\n+      setErrors({});\r\n+    } catch (err) {\r\n+      console.error('Save event failed:', err);\r\n+    }\r\n+  };\r\n+\r\n+  const handleDelete = async (hourToDelete) => {\r\n+    if (isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, hourToDelete)) {\r\n+      alert(\"You can't delete events from past date/time.\");\r\n+      return;\r\n+    }\r\n+    const existingEvent = findEventAtHour(hourToDelete);\r\n+    if (!existingEvent) return;\r\n+\r\n+    try {\r\n+      await fetch(`http://localhost:5000/api/events/${existingEvent._id}`, {\r\n+        method: 'DELETE',\r\n+        headers: authHeaders,\r\n+      });\r\n+      setEvents(events.filter(e => e._id !== existingEvent._id));\r\n+      if (editingHour === hourToDelete) {\r\n+        setOpenEventForm(false);\r\n+        setEditingHour(null);\r\n+        setFormData({ name: '', phone: '', type: 'Point', status: 'CONFIRMED' });\r\n+        setErrors({});\r\n+      }\r\n+    } catch (err) {\r\n+      console.error('Delete event failed:', err);\r\n+    }\r\n+  };\r\n+\r\n+  const startEditing = (hour) => {\r\n+    if (isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, hour)) {\r\n+      alert(\"You can't add or modify events for past date/time.\");\r\n+      return;\r\n+    }\r\n+    const ev = findEventAtHour(hour);\r\n+    if (ev) {\r\n+      setFormData({\r\n+        name: ev.name,\r\n+        phone: ev.phone,\r\n+        type: ev.type,\r\n+        status: ev.status || 'CONFIRMED',\r\n+      });\r\n+    } else {\r\n+      setFormData({ name: '', phone: '', type: 'Point', status: 'CONFIRMED' });\r\n+    }\r\n+    setEditingHour(hour);\r\n+    setErrors({});\r\n+    setOpenEventForm(true);\r\n+  };\r\n+\r\n+  const handleDateClick = (arg) => {\r\n+    const clickedDate = arg.dateStr;\r\n+    const hasEventOnDate = events.some(ev => ev.date.startsWith(clickedDate));\r\n+\r\n+    if (isDateBeforeToday(clickedDate) && !hasEventOnDate) {\r\n+      alert('No events on this past date.');\r\n+      return;\r\n+    }\r\n+\r\n+    setSelectedDay(clickedDate);\r\n+    setOpenDayModal(true);\r\n+    setEditingHour(null);\r\n+    setFormData({ name: '', phone: '', type: 'Point', status: 'CONFIRMED' });\r\n+    setErrors({});\r\n+  };\r\n+\r\n+  return (\r\n+    <>\r\n+      <NavBar\r\n+        email={profile?.email}\r\n+        onLogout={() => {\r\n+          localStorage.removeItem('token');\r\n+          // redirect if needed\r\n+        }}\r\n+      />\r\n+      <Container maxWidth=\"lg\" sx={{ mt: 4 }}>\r\n+        <Box boxShadow={3} p={2} bgcolor=\"white\" borderRadius={2}>\r\n+          <FullCalendar\r\n+            plugins={[dayGridPlugin, interactionPlugin]}\r\n+            initialView=\"dayGridMonth\"\r\n+            selectable={true}\r\n+            events={events}\r\n+            dateClick={handleDateClick}\r\n+          />\r\n+        </Box>\r\n+      </Container>\r\n+\r\n+      <Dialog\r\n+        open={openDayModal}\r\n+        onClose={() => setOpenDayModal(false)}\r\n+        maxWidth=\"lg\"\r\n+        fullWidth\r\n+      >\r\n+        <DialogTitle>Schedule for {selectedDay}</DialogTitle>\r\n+        <DialogContent>\r\n+          <Table>\r\n+            <TableHead>\r\n+              <TableRow>\r\n+                <TableCell>Hour</TableCell>\r\n+                <TableCell>Event Name</TableCell>\r\n+                <TableCell>Customer Name</TableCell>\r\n+                <TableCell>Customer Phone</TableCell>\r\n+                <TableCell>Status</TableCell>\r\n+                <TableCell>Action</TableCell>\r\n+              </TableRow>\r\n+            </TableHead>\r\n+\r\n+            <TableBody>\r\n+              {HOURS.map((hour) => {\r\n+                const ev = findEventAtHour(hour);\r\n+                const isPast = isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, hour);\r\n+\r\n+                return (\r\n+                  <TableRow key={hour}>\r\n+                    <TableCell>{formatHour(hour)}</TableCell>\r\n+                    <TableCell>{ev?.title || ''}</TableCell>\r\n+                    <TableCell>{ev?.name || ''}</TableCell>\r\n+                    <TableCell>{ev?.phone || ''}</TableCell>\r\n+                    <TableCell>{ev?.status || ''}</TableCell>\r\n+                    <TableCell>\r\n+                      {isPast ? (\r\n+                        <>\r\n+                          {ev ? (\r\n+                            <>\r\n+                              <IconButton size=\"small\"  title=\"Modify disabled on past date/time\">\r\n+                                <EditIcon />\r\n+                              </IconButton>\r\n+                              <IconButton size=\"small\" disabled title=\"Delete disabled on past date/time\">\r\n+                                <DeleteIcon />\r\n+                              </IconButton>\r\n+                            </>\r\n+                          ) : (\r\n+                            <IconButton size=\"small\" disabled title=\"Add disabled on past date/time\">\r\n+                              <AddIcon />\r\n+                            </IconButton>\r\n+                          )}\r\n+                        </>\r\n+                      ) : (\r\n+                        <>\r\n+                          <IconButton\r\n+                            color=\"primary\"\r\n+                            size=\"small\"\r\n+                            onClick={() => startEditing(hour)}\r\n+                            title={ev ? 'Modify' : 'Add'}\r\n+                          >\r\n+                            {ev ? <EditIcon /> : <AddIcon />}\r\n+                          </IconButton>\r\n+\r\n+                          {ev && (\r\n+                            <IconButton\r\n+                              color=\"error\"\r\n+                              size=\"small\"\r\n+                              onClick={() => handleDelete(hour)}\r\n+                              title=\"Delete\"\r\n+                            >\r\n+                              <DeleteIcon />\r\n+                            </IconButton>\r\n+                          )}\r\n+                        </>\r\n+                      )}\r\n+                    </TableCell>\r\n+                  </TableRow>\r\n+                );\r\n+              })}\r\n+            </TableBody>\r\n+          </Table>\r\n+        </DialogContent>\r\n+\r\n+        <DialogActions>\r\n+          <Button onClick={() => setOpenDayModal(false)}>Close</Button>\r\n+        </DialogActions>\r\n+      </Dialog>\r\n+\r\n+      <Dialog\r\n+        open={openEventForm}\r\n+        onClose={() => setOpenEventForm(false)}\r\n+        maxWidth=\"sm\"\r\n+        fullWidth\r\n+      >\r\n+        <DialogTitle>\r\n+          {editingHour !== null && findEventAtHour(editingHour)\r\n+            ? 'Modify Event'\r\n+            : 'Add Event'}\r\n+        </DialogTitle>\r\n+        <DialogContent>\r\n+          <Typography variant=\"subtitle1\" gutterBottom>\r\n+            For hour: {editingHour !== null ? formatHour(editingHour) : ''}\r\n+          </Typography>\r\n+\r\n+          <TextField\r\n+            margin=\"dense\"\r\n+            label=\"Customer Name\"\r\n+            fullWidth\r\n+            value={formData.name}\r\n+            onChange={(e) => setFormData({ ...formData, name: e.target.value })}\r\n+            error={!!errors.name}\r\n+            helperText={errors.name}\r\n+          />\r\n+          <TextField\r\n+            margin=\"dense\"\r\n+            label=\"Customer Phone\"\r\n+            fullWidth\r\n+            value={formData.phone}\r\n+            onChange={(e) => setFormData({ ...formData, phone: e.target.value })}\r\n+            error={!!errors.phone}\r\n+            helperText={errors.phone}\r\n+          />\r\n+          <TextField\r\n+            margin=\"dense\"\r\n+            select\r\n+            label=\"Type\"\r\n+            fullWidth\r\n+            value={formData.type}\r\n+            onChange={(e) => setFormData({ ...formData, type: e.target.value })}\r\n+          >\r\n+            <MenuItem value=\"Point\">Point</MenuItem>\r\n+            <MenuItem value=\"Rappel\">Rappel</MenuItem>\r\n+          </TextField>\r\n+\r\n+          {/* Status field only editable if 1 hour passed */}\r\n+          {canModifyStatus() ? (\r\n+            <TextField\r\n+              margin=\"dense\"\r\n+              select\r\n+              label=\"Status\"\r\n+              fullWidth\r\n+              value={formData.status}\r\n+              onChange={(e) => setFormData({ ...formData, status: e.target.value })}\r\n+              error={!!errors.status}\r\n+              helperText={errors.status}\r\n+            >\r\n+              <MenuItem value=\"CONFIRMED\">CONFIRMED</MenuItem>\r\n+              <MenuItem value=\"COMPLETED\">COMPLETED</MenuItem>\r\n+            </TextField>\r\n+          ) : (\r\n+            <Typography\r\n+              variant=\"body2\"\r\n+              color=\"textSecondary\"\r\n+              sx={{ mt: 2, mb: 1 }}\r\n+            >\r\n+              Status can only be modified  one hour after the event time.\r\n+            </Typography>\r\n+          )}\r\n+        </DialogContent>\r\n+\r\n+        <DialogActions>\r\n+          <Button onClick={() => setOpenEventForm(false)}>Cancel</Button>\r\n+          <Button\r\n+            onClick={handleAddOrUpdate}\r\n+            variant=\"contained\"\r\n+            color=\"primary\"\r\n+            disabled={isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, editingHour)}\r\n+          >\r\n+            Save\r\n+          </Button>\r\n+        </DialogActions>\r\n+      </Dialog>\r\n+    </>\r\n+  );\r\n+}\r\n"
                },
                {
                    "date": 1751918279492,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,415 @@\n+import React, { useState, useEffect } from 'react';\r\n+import {\r\n+  Container,\r\n+  Box,\r\n+  Dialog,\r\n+  DialogTitle,\r\n+  DialogContent,\r\n+  DialogActions,\r\n+  Button,\r\n+  TextField,\r\n+  MenuItem,\r\n+  Table,\r\n+  TableHead,\r\n+  TableBody,\r\n+  TableRow,\r\n+  TableCell,\r\n+  Typography,\r\n+  IconButton,\r\n+} from '@mui/material';\r\n+import FullCalendar from '@fullcalendar/react';\r\n+import dayGridPlugin from '@fullcalendar/daygrid';\r\n+import interactionPlugin from '@fullcalendar/interaction';\r\n+import NavBar from '../components/NavBar';\r\n+\r\n+import AddIcon from '@mui/icons-material/Add';\r\n+import EditIcon from '@mui/icons-material/Edit';\r\n+import DeleteIcon from '@mui/icons-material/Delete';\r\n+\r\n+const HOURS = Array.from({ length: 17 }, (_, i) => 8 + i); // 08:00 to 00:00\r\n+\r\n+function formatHour(h) {\r\n+  return h === 24 ? '00:00' : `${h.toString().padStart(2, '0')}:00`;\r\n+}\r\n+\r\n+export default function Dashboard() {\r\n+  const [profile, setProfile] = useState(null);\r\n+  const [events, setEvents] = useState([]);\r\n+  const [selectedDay, setSelectedDay] = useState(null);\r\n+  const [openDayModal, setOpenDayModal] = useState(false);\r\n+\r\n+  const [openEventForm, setOpenEventForm] = useState(false);\r\n+  const [editingHour, setEditingHour] = useState(null);\r\n+  // Added status field with default 'confirmed'\r\n+  const [formData, setFormData] = useState({ name: '', phone: '', type: 'Point', status: 'CONFIRMED' });\r\n+  const [errors, setErrors] = useState({});\r\n+\r\n+  const token = localStorage.getItem('token');\r\n+  const authHeaders = {\r\n+    Authorization: `Bearer ${token}`,\r\n+    'Content-Type': 'application/json',\r\n+  };\r\n+\r\n+  useEffect(() => {\r\n+    if (!token) return;\r\n+\r\n+    fetch('http://localhost:5000/api/admin/profile', { headers: authHeaders })\r\n+      .then(res => (res.ok ? res.json() : Promise.reject()))\r\n+      .then(setProfile)\r\n+      .catch(() => {\r\n+        localStorage.removeItem('token');\r\n+      });\r\n+\r\n+    fetch('http://localhost:5000/api/events', { headers: authHeaders })\r\n+      .then(res => res.json())\r\n+      .then(setEvents)\r\n+      .catch(console.error);\r\n+  }, [token]);\r\n+\r\n+  const isDateBeforeToday = (dateStr) => {\r\n+    if (!dateStr) return false;\r\n+    const selected = new Date(dateStr);\r\n+    const today = new Date();\r\n+    today.setHours(0, 0, 0, 0);\r\n+    return selected < today;\r\n+  };\r\n+\r\n+  const isHourInPast = (dateStr, hour) => {\r\n+    if (!dateStr) return false;\r\n+    const now = new Date();\r\n+    const selected = new Date(dateStr);\r\n+    selected.setHours(hour, 0, 0, 0);\r\n+    return selected < now;\r\n+  };\r\n+\r\n+  const findEventAtHour = (hour) => {\r\n+    if (!selectedDay) return null;\r\n+    const hourStr = hour === 24 ? '00:00' : formatHour(hour);\r\n+    const prefix = `${selectedDay}T${hourStr}`;\r\n+    return events.find(e => e.date.startsWith(prefix));\r\n+  };\r\n+\r\n+  const validate = () => {\r\n+    const errs = {};\r\n+    if (!formData.name.trim()) errs.name = 'Name is required';\r\n+    if (!formData.phone.trim()) errs.phone = 'Phone is required';\r\n+    else if (!/^\\d{10}$/.test(formData.phone)) errs.phone = 'Phone must be 10 digits';\r\n+    if (!['Point', 'Rappel'].includes(formData.type)) errs.type = 'Invalid type';\r\n+    // Add validation for status (must be confirmed or completed)\r\n+    if (!['CONFIRMED', 'COMPLETED'].includes(formData.status)) errs.status = 'Invalid status';\r\n+    setErrors(errs);\r\n+    return Object.keys(errs).length === 0;\r\n+  };\r\n+\r\n+  // Helper: Can status be modified? Event date/time passed by at least 1 hour?\r\n+  const canModifyStatus = () => {\r\n+    if (!selectedDay || editingHour === null) return false;\r\n+    const eventDate = new Date(selectedDay);\r\n+    eventDate.setHours(editingHour, 0, 0, 0);\r\n+    const now = new Date();\r\n+    return now - eventDate >= 60 * 60 * 1000; // 1 hour in ms\r\n+  };\r\n+\r\n+  const handleAddOrUpdate = async () => {\r\n+    if (isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, editingHour)) {\r\n+      alert(\"You can't add or modify events for past date/time.\");\r\n+      return;\r\n+    }\r\n+    if (!validate()) return;\r\n+\r\n+    const hourStr = editingHour === 24 ? '00:00' : formatHour(editingHour);\r\n+    const dateTime = `${selectedDay}T${hourStr}:00`;\r\n+\r\n+    const eventPayload = {\r\n+      title: `${formData.type} - ${formData.name}`,\r\n+      date: dateTime,\r\n+      name: formData.name,\r\n+      phone: formData.phone,\r\n+      type: formData.type,\r\n+      status: formData.status,\r\n+    };\r\n+\r\n+    try {\r\n+      const existingEvent = findEventAtHour(editingHour);\r\n+      if (existingEvent) {\r\n+        const res = await fetch(`http://localhost:5000/api/events/${existingEvent._id}`, {\r\n+          method: 'PUT',\r\n+          headers: authHeaders,\r\n+          body: JSON.stringify(eventPayload),\r\n+        });\r\n+        const updated = await res.json();\r\n+        setEvents(events.map(e => (e._id === updated._id ? updated : e)));\r\n+      } else {\r\n+        const res = await fetch('http://localhost:5000/api/events', {\r\n+          method: 'POST',\r\n+          headers: authHeaders,\r\n+          body: JSON.stringify(eventPayload),\r\n+        });\r\n+        const created = await res.json();\r\n+        setEvents([...events, created]);\r\n+      }\r\n+      setOpenEventForm(false);\r\n+      setEditingHour(null);\r\n+      setFormData({ name: '', phone: '', type: 'Point', status: 'CONFIRMED' });\r\n+      setErrors({});\r\n+    } catch (err) {\r\n+      console.error('Save event failed:', err);\r\n+    }\r\n+  };\r\n+\r\n+  const handleDelete = async (hourToDelete) => {\r\n+    if (isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, hourToDelete)) {\r\n+      alert(\"You can't delete events from past date/time.\");\r\n+      return;\r\n+    }\r\n+    const existingEvent = findEventAtHour(hourToDelete);\r\n+    if (!existingEvent) return;\r\n+\r\n+    try {\r\n+      await fetch(`http://localhost:5000/api/events/${existingEvent._id}`, {\r\n+        method: 'DELETE',\r\n+        headers: authHeaders,\r\n+      });\r\n+      setEvents(events.filter(e => e._id !== existingEvent._id));\r\n+      if (editingHour === hourToDelete) {\r\n+        setOpenEventForm(false);\r\n+        setEditingHour(null);\r\n+        setFormData({ name: '', phone: '', type: 'Point', status: 'CONFIRMED' });\r\n+        setErrors({});\r\n+      }\r\n+    } catch (err) {\r\n+      console.error('Delete event failed:', err);\r\n+    }\r\n+  };\r\n+\r\n+  const startEditing = (hour) => {\r\n+    if (isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, hour)) {\r\n+      alert(\"You can't add or modify events for past date/time.\");\r\n+      return;\r\n+    }\r\n+    const ev = findEventAtHour(hour);\r\n+    if (ev) {\r\n+      setFormData({\r\n+        name: ev.name,\r\n+        phone: ev.phone,\r\n+        type: ev.type,\r\n+        status: ev.status || 'CONFIRMED',\r\n+      });\r\n+    } else {\r\n+      setFormData({ name: '', phone: '', type: 'Point', status: 'CONFIRMED' });\r\n+    }\r\n+    setEditingHour(hour);\r\n+    setErrors({});\r\n+    setOpenEventForm(true);\r\n+  };\r\n+\r\n+  const handleDateClick = (arg) => {\r\n+    const clickedDate = arg.dateStr;\r\n+    const hasEventOnDate = events.some(ev => ev.date.startsWith(clickedDate));\r\n+\r\n+    if (isDateBeforeToday(clickedDate) && !hasEventOnDate) {\r\n+      alert('No events on this past date.');\r\n+      return;\r\n+    }\r\n+\r\n+    setSelectedDay(clickedDate);\r\n+    setOpenDayModal(true);\r\n+    setEditingHour(null);\r\n+    setFormData({ name: '', phone: '', type: 'Point', status: 'CONFIRMED' });\r\n+    setErrors({});\r\n+  };\r\n+\r\n+  return (\r\n+    <>\r\n+      <NavBar\r\n+        email={profile?.email}\r\n+        onLogout={() => {\r\n+          localStorage.removeItem('token');\r\n+          // redirect if needed\r\n+        }}\r\n+      />\r\n+      <Container maxWidth=\"lg\" sx={{ mt: 4 }}>\r\n+        <Box boxShadow={3} p={2} bgcolor=\"white\" borderRadius={2}>\r\n+          <FullCalendar\r\n+            plugins={[dayGridPlugin, interactionPlugin]}\r\n+            initialView=\"dayGridMonth\"\r\n+            selectable={true}\r\n+            events={events}\r\n+            dateClick={handleDateClick}\r\n+          />\r\n+        </Box>\r\n+      </Container>\r\n+\r\n+      <Dialog\r\n+        open={openDayModal}\r\n+        onClose={() => setOpenDayModal(false)}\r\n+        maxWidth=\"lg\"\r\n+        fullWidth\r\n+      >\r\n+        <DialogTitle>Schedule for {selectedDay}</DialogTitle>\r\n+        <DialogContent>\r\n+          <Table>\r\n+            <TableHead>\r\n+              <TableRow>\r\n+                <TableCell>Hour</TableCell>\r\n+                <TableCell>Event Name</TableCell>\r\n+                <TableCell>Customer Name</TableCell>\r\n+                <TableCell>Customer Phone</TableCell>\r\n+                <TableCell>Status</TableCell>\r\n+                <TableCell>Action</TableCell>\r\n+              </TableRow>\r\n+            </TableHead>\r\n+\r\n+            <TableBody>\r\n+              {HOURS.map((hour) => {\r\n+                const ev = findEventAtHour(hour);\r\n+                const isPast = isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, hour);\r\n+\r\n+                return (\r\n+                  <TableRow key={hour}>\r\n+                    <TableCell>{formatHour(hour)}</TableCell>\r\n+                    <TableCell>{ev?.title || ''}</TableCell>\r\n+                    <TableCell>{ev?.name || ''}</TableCell>\r\n+                    <TableCell>{ev?.phone || ''}</TableCell>\r\n+                    <TableCell>{ev?.status || ''}</TableCell>\r\n+                    <TableCell>\r\n+                      {isPast ? (\r\n+                        <>\r\n+                          {ev ? (\r\n+                            <>\r\n+                              <IconButton size=\"small\" disabled title=\"Modify disabled on past date/time\">\r\n+                                <EditIcon />\r\n+                              </IconButton>\r\n+                              <IconButton size=\"small\" disabled title=\"Delete disabled on past date/time\">\r\n+                                <DeleteIcon />\r\n+                              </IconButton>\r\n+                            </>\r\n+                          ) : (\r\n+                            <IconButton size=\"small\" disabled title=\"Add disabled on past date/time\">\r\n+                              <AddIcon />\r\n+                            </IconButton>\r\n+                          )}\r\n+                        </>\r\n+                      ) : (\r\n+                        <>\r\n+                          <IconButton\r\n+                            color=\"primary\"\r\n+                            size=\"small\"\r\n+                            onClick={() => startEditing(hour)}\r\n+                            title={ev ? 'Modify' : 'Add'}\r\n+                          >\r\n+                            {ev ? <EditIcon /> : <AddIcon />}\r\n+                          </IconButton>\r\n+\r\n+                          {ev && (\r\n+                            <IconButton\r\n+                              color=\"error\"\r\n+                              size=\"small\"\r\n+                              onClick={() => handleDelete(hour)}\r\n+                              title=\"Delete\"\r\n+                            >\r\n+                              <DeleteIcon />\r\n+                            </IconButton>\r\n+                          )}\r\n+                        </>\r\n+                      )}\r\n+                    </TableCell>\r\n+                  </TableRow>\r\n+                );\r\n+              })}\r\n+            </TableBody>\r\n+          </Table>\r\n+        </DialogContent>\r\n+\r\n+        <DialogActions>\r\n+          <Button onClick={() => setOpenDayModal(false)}>Close</Button>\r\n+        </DialogActions>\r\n+      </Dialog>\r\n+\r\n+      <Dialog\r\n+        open={openEventForm}\r\n+        onClose={() => setOpenEventForm(false)}\r\n+        maxWidth=\"sm\"\r\n+        fullWidth\r\n+      >\r\n+        <DialogTitle>\r\n+          {editingHour !== null && findEventAtHour(editingHour)\r\n+            ? 'Modify Event'\r\n+            : 'Add Event'}\r\n+        </DialogTitle>\r\n+        <DialogContent>\r\n+          <Typography variant=\"subtitle1\" gutterBottom>\r\n+            For hour: {editingHour !== null ? formatHour(editingHour) : ''}\r\n+          </Typography>\r\n+\r\n+          <TextField\r\n+            margin=\"dense\"\r\n+            label=\"Customer Name\"\r\n+            fullWidth\r\n+            value={formData.name}\r\n+            onChange={(e) => setFormData({ ...formData, name: e.target.value })}\r\n+            error={!!errors.name}\r\n+            helperText={errors.name}\r\n+          />\r\n+          <TextField\r\n+            margin=\"dense\"\r\n+            label=\"Customer Phone\"\r\n+            fullWidth\r\n+            value={formData.phone}\r\n+            onChange={(e) => setFormData({ ...formData, phone: e.target.value })}\r\n+            error={!!errors.phone}\r\n+            helperText={errors.phone}\r\n+          />\r\n+          <TextField\r\n+            margin=\"dense\"\r\n+            select\r\n+            label=\"Type\"\r\n+            fullWidth\r\n+            value={formData.type}\r\n+            onChange={(e) => setFormData({ ...formData, type: e.target.value })}\r\n+          >\r\n+            <MenuItem value=\"Point\">Point</MenuItem>\r\n+            <MenuItem value=\"Rappel\">Rappel</MenuItem>\r\n+          </TextField>\r\n+\r\n+          {/* Status field only editable if 1 hour passed */}\r\n+          {canModifyStatus() ? (\r\n+            <TextField\r\n+              margin=\"dense\"\r\n+              select\r\n+              label=\"Status\"\r\n+              fullWidth\r\n+              value={formData.status}\r\n+              onChange={(e) => setFormData({ ...formData, status: e.target.value })}\r\n+              error={!!errors.status}\r\n+              helperText={errors.status}\r\n+            >\r\n+              <MenuItem value=\"CONFIRMED\">CONFIRMED</MenuItem>\r\n+              <MenuItem value=\"COMPLETED\">COMPLETED</MenuItem>\r\n+            </TextField>\r\n+          ) : (\r\n+            <Typography\r\n+              variant=\"body2\"\r\n+              color=\"textSecondary\"\r\n+              sx={{ mt: 2, mb: 1 }}\r\n+            >\r\n+              Status can only be modified  one hour after the event time.\r\n+            </Typography>\r\n+          )}\r\n+        </DialogContent>\r\n+\r\n+        <DialogActions>\r\n+          <Button onClick={() => setOpenEventForm(false)}>Cancel</Button>\r\n+          <Button\r\n+            onClick={handleAddOrUpdate}\r\n+            variant=\"contained\"\r\n+            color=\"primary\"\r\n+            disabled={isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, editingHour)}\r\n+          >\r\n+            Save\r\n+          </Button>\r\n+        </DialogActions>\r\n+      </Dialog>\r\n+    </>\r\n+  );\r\n+}\r\n"
                },
                {
                    "date": 1751918377318,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,415 @@\n+import React, { useState, useEffect } from 'react';\r\n+import {\r\n+  Container,\r\n+  Box,\r\n+  Dialog,\r\n+  DialogTitle,\r\n+  DialogContent,\r\n+  DialogActions,\r\n+  Button,\r\n+  TextField,\r\n+  MenuItem,\r\n+  Table,\r\n+  TableHead,\r\n+  TableBody,\r\n+  TableRow,\r\n+  TableCell,\r\n+  Typography,\r\n+  IconButton,\r\n+} from '@mui/material';\r\n+import FullCalendar from '@fullcalendar/react';\r\n+import dayGridPlugin from '@fullcalendar/daygrid';\r\n+import interactionPlugin from '@fullcalendar/interaction';\r\n+import NavBar from '../components/NavBar';\r\n+\r\n+import AddIcon from '@mui/icons-material/Add';\r\n+import EditIcon from '@mui/icons-material/Edit';\r\n+import DeleteIcon from '@mui/icons-material/Delete';\r\n+\r\n+const HOURS = Array.from({ length: 17 }, (_, i) => 8 + i); // 08:00 to 00:00\r\n+\r\n+function formatHour(h) {\r\n+  return h === 24 ? '00:00' : `${h.toString().padStart(2, '0')}:00`;\r\n+}\r\n+\r\n+export default function Dashboard() {\r\n+  const [profile, setProfile] = useState(null);\r\n+  const [events, setEvents] = useState([]);\r\n+  const [selectedDay, setSelectedDay] = useState(null);\r\n+  const [openDayModal, setOpenDayModal] = useState(false);\r\n+\r\n+  const [openEventForm, setOpenEventForm] = useState(false);\r\n+  const [editingHour, setEditingHour] = useState(null);\r\n+  // Added status field with default 'confirmed'\r\n+  const [formData, setFormData] = useState({ name: '', phone: '', type: 'Point', status: 'CONFIRMED' });\r\n+  const [errors, setErrors] = useState({});\r\n+\r\n+  const token = localStorage.getItem('token');\r\n+  const authHeaders = {\r\n+    Authorization: `Bearer ${token}`,\r\n+    'Content-Type': 'application/json',\r\n+  };\r\n+\r\n+  useEffect(() => {\r\n+    if (!token) return;\r\n+\r\n+    fetch('http://localhost:5000/api/admin/profile', { headers: authHeaders })\r\n+      .then(res => (res.ok ? res.json() : Promise.reject()))\r\n+      .then(setProfile)\r\n+      .catch(() => {\r\n+        localStorage.removeItem('token');\r\n+      });\r\n+\r\n+    fetch('http://localhost:5000/api/events', { headers: authHeaders })\r\n+      .then(res => res.json())\r\n+      .then(setEvents)\r\n+      .catch(console.error);\r\n+  }, [token]);\r\n+\r\n+  const isDateBeforeToday = (dateStr) => {\r\n+    if (!dateStr) return false;\r\n+    const selected = new Date(dateStr);\r\n+    const today = new Date();\r\n+    today.setHours(0, 0, 0, 0);\r\n+    return selected < today;\r\n+  };\r\n+\r\n+  const isHourInPast = (dateStr, hour) => {\r\n+    if (!dateStr) return false;\r\n+    const now = new Date();\r\n+    const selected = new Date(dateStr);\r\n+    selected.setHours(hour, 0, 0, 0);\r\n+    return selected < now;\r\n+  };\r\n+\r\n+  const findEventAtHour = (hour) => {\r\n+    if (!selectedDay) return null;\r\n+    const hourStr = hour === 24 ? '00:00' : formatHour(hour);\r\n+    const prefix = `${selectedDay}T${hourStr}`;\r\n+    return events.find(e => e.date.startsWith(prefix));\r\n+  };\r\n+\r\n+  const validate = () => {\r\n+    const errs = {};\r\n+    if (!formData.name.trim()) errs.name = 'Name is required';\r\n+    if (!formData.phone.trim()) errs.phone = 'Phone is required';\r\n+    else if (!/^\\d{10}$/.test(formData.phone)) errs.phone = 'Phone must be 10 digits';\r\n+    if (!['Point', 'Rappel'].includes(formData.type)) errs.type = 'Invalid type';\r\n+    // Add validation for status (must be confirmed or completed)\r\n+    if (!['CONFIRMED', 'COMPLETED'].includes(formData.status)) errs.status = 'Invalid status';\r\n+    setErrors(errs);\r\n+    return Object.keys(errs).length === 0;\r\n+  };\r\n+\r\n+  // Helper: Can status be modified? Event date/time passed by at least 1 hour?\r\n+  const canModifyStatus = () => {\r\n+    if (!selectedDay || editingHour === null) return false;\r\n+    const eventDate = new Date(selectedDay);\r\n+    eventDate.setHours(editingHour, 0, 0, 0);\r\n+    const now = new Date();\r\n+    return tr // 1 hour in ms\r\n+  };\r\n+\r\n+  const handleAddOrUpdate = async () => {\r\n+    if (isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, editingHour)) {\r\n+      alert(\"You can't add or modify events for past date/time.\");\r\n+      return;\r\n+    }\r\n+    if (!validate()) return;\r\n+\r\n+    const hourStr = editingHour === 24 ? '00:00' : formatHour(editingHour);\r\n+    const dateTime = `${selectedDay}T${hourStr}:00`;\r\n+\r\n+    const eventPayload = {\r\n+      title: `${formData.type} - ${formData.name}`,\r\n+      date: dateTime,\r\n+      name: formData.name,\r\n+      phone: formData.phone,\r\n+      type: formData.type,\r\n+      status: formData.status,\r\n+    };\r\n+\r\n+    try {\r\n+      const existingEvent = findEventAtHour(editingHour);\r\n+      if (existingEvent) {\r\n+        const res = await fetch(`http://localhost:5000/api/events/${existingEvent._id}`, {\r\n+          method: 'PUT',\r\n+          headers: authHeaders,\r\n+          body: JSON.stringify(eventPayload),\r\n+        });\r\n+        const updated = await res.json();\r\n+        setEvents(events.map(e => (e._id === updated._id ? updated : e)));\r\n+      } else {\r\n+        const res = await fetch('http://localhost:5000/api/events', {\r\n+          method: 'POST',\r\n+          headers: authHeaders,\r\n+          body: JSON.stringify(eventPayload),\r\n+        });\r\n+        const created = await res.json();\r\n+        setEvents([...events, created]);\r\n+      }\r\n+      setOpenEventForm(false);\r\n+      setEditingHour(null);\r\n+      setFormData({ name: '', phone: '', type: 'Point', status: 'CONFIRMED' });\r\n+      setErrors({});\r\n+    } catch (err) {\r\n+      console.error('Save event failed:', err);\r\n+    }\r\n+  };\r\n+\r\n+  const handleDelete = async (hourToDelete) => {\r\n+    if (isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, hourToDelete)) {\r\n+      alert(\"You can't delete events from past date/time.\");\r\n+      return;\r\n+    }\r\n+    const existingEvent = findEventAtHour(hourToDelete);\r\n+    if (!existingEvent) return;\r\n+\r\n+    try {\r\n+      await fetch(`http://localhost:5000/api/events/${existingEvent._id}`, {\r\n+        method: 'DELETE',\r\n+        headers: authHeaders,\r\n+      });\r\n+      setEvents(events.filter(e => e._id !== existingEvent._id));\r\n+      if (editingHour === hourToDelete) {\r\n+        setOpenEventForm(false);\r\n+        setEditingHour(null);\r\n+        setFormData({ name: '', phone: '', type: 'Point', status: 'CONFIRMED' });\r\n+        setErrors({});\r\n+      }\r\n+    } catch (err) {\r\n+      console.error('Delete event failed:', err);\r\n+    }\r\n+  };\r\n+\r\n+  const startEditing = (hour) => {\r\n+    if (isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, hour)) {\r\n+      alert(\"You can't add or modify events for past date/time.\");\r\n+      return;\r\n+    }\r\n+    const ev = findEventAtHour(hour);\r\n+    if (ev) {\r\n+      setFormData({\r\n+        name: ev.name,\r\n+        phone: ev.phone,\r\n+        type: ev.type,\r\n+        status: ev.status || 'CONFIRMED',\r\n+      });\r\n+    } else {\r\n+      setFormData({ name: '', phone: '', type: 'Point', status: 'CONFIRMED' });\r\n+    }\r\n+    setEditingHour(hour);\r\n+    setErrors({});\r\n+    setOpenEventForm(true);\r\n+  };\r\n+\r\n+  const handleDateClick = (arg) => {\r\n+    const clickedDate = arg.dateStr;\r\n+    const hasEventOnDate = events.some(ev => ev.date.startsWith(clickedDate));\r\n+\r\n+    if (isDateBeforeToday(clickedDate) && !hasEventOnDate) {\r\n+      alert('No events on this past date.');\r\n+      return;\r\n+    }\r\n+\r\n+    setSelectedDay(clickedDate);\r\n+    setOpenDayModal(true);\r\n+    setEditingHour(null);\r\n+    setFormData({ name: '', phone: '', type: 'Point', status: 'CONFIRMED' });\r\n+    setErrors({});\r\n+  };\r\n+\r\n+  return (\r\n+    <>\r\n+      <NavBar\r\n+        email={profile?.email}\r\n+        onLogout={() => {\r\n+          localStorage.removeItem('token');\r\n+          // redirect if needed\r\n+        }}\r\n+      />\r\n+      <Container maxWidth=\"lg\" sx={{ mt: 4 }}>\r\n+        <Box boxShadow={3} p={2} bgcolor=\"white\" borderRadius={2}>\r\n+          <FullCalendar\r\n+            plugins={[dayGridPlugin, interactionPlugin]}\r\n+            initialView=\"dayGridMonth\"\r\n+            selectable={true}\r\n+            events={events}\r\n+            dateClick={handleDateClick}\r\n+          />\r\n+        </Box>\r\n+      </Container>\r\n+\r\n+      <Dialog\r\n+        open={openDayModal}\r\n+        onClose={() => setOpenDayModal(false)}\r\n+        maxWidth=\"lg\"\r\n+        fullWidth\r\n+      >\r\n+        <DialogTitle>Schedule for {selectedDay}</DialogTitle>\r\n+        <DialogContent>\r\n+          <Table>\r\n+            <TableHead>\r\n+              <TableRow>\r\n+                <TableCell>Hour</TableCell>\r\n+                <TableCell>Event Name</TableCell>\r\n+                <TableCell>Customer Name</TableCell>\r\n+                <TableCell>Customer Phone</TableCell>\r\n+                <TableCell>Status</TableCell>\r\n+                <TableCell>Action</TableCell>\r\n+              </TableRow>\r\n+            </TableHead>\r\n+\r\n+            <TableBody>\r\n+              {HOURS.map((hour) => {\r\n+                const ev = findEventAtHour(hour);\r\n+                const isPast = isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, hour);\r\n+\r\n+                return (\r\n+                  <TableRow key={hour}>\r\n+                    <TableCell>{formatHour(hour)}</TableCell>\r\n+                    <TableCell>{ev?.title || ''}</TableCell>\r\n+                    <TableCell>{ev?.name || ''}</TableCell>\r\n+                    <TableCell>{ev?.phone || ''}</TableCell>\r\n+                    <TableCell>{ev?.status || ''}</TableCell>\r\n+                    <TableCell>\r\n+                      {isPast ? (\r\n+                        <>\r\n+                          {ev ? (\r\n+                            <>\r\n+                              <IconButton size=\"small\" disabled title=\"Modify disabled on past date/time\">\r\n+                                <EditIcon />\r\n+                              </IconButton>\r\n+                              <IconButton size=\"small\" disabled title=\"Delete disabled on past date/time\">\r\n+                                <DeleteIcon />\r\n+                              </IconButton>\r\n+                            </>\r\n+                          ) : (\r\n+                            <IconButton size=\"small\" disabled title=\"Add disabled on past date/time\">\r\n+                              <AddIcon />\r\n+                            </IconButton>\r\n+                          )}\r\n+                        </>\r\n+                      ) : (\r\n+                        <>\r\n+                          <IconButton\r\n+                            color=\"primary\"\r\n+                            size=\"small\"\r\n+                            onClick={() => startEditing(hour)}\r\n+                            title={ev ? 'Modify' : 'Add'}\r\n+                          >\r\n+                            {ev ? <EditIcon /> : <AddIcon />}\r\n+                          </IconButton>\r\n+\r\n+                          {ev && (\r\n+                            <IconButton\r\n+                              color=\"error\"\r\n+                              size=\"small\"\r\n+                              onClick={() => handleDelete(hour)}\r\n+                              title=\"Delete\"\r\n+                            >\r\n+                              <DeleteIcon />\r\n+                            </IconButton>\r\n+                          )}\r\n+                        </>\r\n+                      )}\r\n+                    </TableCell>\r\n+                  </TableRow>\r\n+                );\r\n+              })}\r\n+            </TableBody>\r\n+          </Table>\r\n+        </DialogContent>\r\n+\r\n+        <DialogActions>\r\n+          <Button onClick={() => setOpenDayModal(false)}>Close</Button>\r\n+        </DialogActions>\r\n+      </Dialog>\r\n+\r\n+      <Dialog\r\n+        open={openEventForm}\r\n+        onClose={() => setOpenEventForm(false)}\r\n+        maxWidth=\"sm\"\r\n+        fullWidth\r\n+      >\r\n+        <DialogTitle>\r\n+          {editingHour !== null && findEventAtHour(editingHour)\r\n+            ? 'Modify Event'\r\n+            : 'Add Event'}\r\n+        </DialogTitle>\r\n+        <DialogContent>\r\n+          <Typography variant=\"subtitle1\" gutterBottom>\r\n+            For hour: {editingHour !== null ? formatHour(editingHour) : ''}\r\n+          </Typography>\r\n+\r\n+          <TextField\r\n+            margin=\"dense\"\r\n+            label=\"Customer Name\"\r\n+            fullWidth\r\n+            value={formData.name}\r\n+            onChange={(e) => setFormData({ ...formData, name: e.target.value })}\r\n+            error={!!errors.name}\r\n+            helperText={errors.name}\r\n+          />\r\n+          <TextField\r\n+            margin=\"dense\"\r\n+            label=\"Customer Phone\"\r\n+            fullWidth\r\n+            value={formData.phone}\r\n+            onChange={(e) => setFormData({ ...formData, phone: e.target.value })}\r\n+            error={!!errors.phone}\r\n+            helperText={errors.phone}\r\n+          />\r\n+          <TextField\r\n+            margin=\"dense\"\r\n+            select\r\n+            label=\"Type\"\r\n+            fullWidth\r\n+            value={formData.type}\r\n+            onChange={(e) => setFormData({ ...formData, type: e.target.value })}\r\n+          >\r\n+            <MenuItem value=\"Point\">Point</MenuItem>\r\n+            <MenuItem value=\"Rappel\">Rappel</MenuItem>\r\n+          </TextField>\r\n+\r\n+          {/* Status field only editable if 1 hour passed */}\r\n+          {canModifyStatus() ? (\r\n+            <TextField\r\n+              margin=\"dense\"\r\n+              select\r\n+              label=\"Status\"\r\n+              fullWidth\r\n+              value={formData.status}\r\n+              onChange={(e) => setFormData({ ...formData, status: e.target.value })}\r\n+              error={!!errors.status}\r\n+              helperText={errors.status}\r\n+            >\r\n+              <MenuItem value=\"CONFIRMED\">CONFIRMED</MenuItem>\r\n+              <MenuItem value=\"COMPLETED\">COMPLETED</MenuItem>\r\n+            </TextField>\r\n+          ) : (\r\n+            <Typography\r\n+              variant=\"body2\"\r\n+              color=\"textSecondary\"\r\n+              sx={{ mt: 2, mb: 1 }}\r\n+            >\r\n+              Status can only be modified  one hour after the event time.\r\n+            </Typography>\r\n+          )}\r\n+        </DialogContent>\r\n+\r\n+        <DialogActions>\r\n+          <Button onClick={() => setOpenEventForm(false)}>Cancel</Button>\r\n+          <Button\r\n+            onClick={handleAddOrUpdate}\r\n+            variant=\"contained\"\r\n+            color=\"primary\"\r\n+            disabled={isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, editingHour)}\r\n+          >\r\n+            Save\r\n+          </Button>\r\n+        </DialogActions>\r\n+      </Dialog>\r\n+    </>\r\n+  );\r\n+}\r\n"
                },
                {
                    "date": 1751918425514,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,415 @@\n+import React, { useState, useEffect } from 'react';\r\n+import {\r\n+  Container,\r\n+  Box,\r\n+  Dialog,\r\n+  DialogTitle,\r\n+  DialogContent,\r\n+  DialogActions,\r\n+  Button,\r\n+  TextField,\r\n+  MenuItem,\r\n+  Table,\r\n+  TableHead,\r\n+  TableBody,\r\n+  TableRow,\r\n+  TableCell,\r\n+  Typography,\r\n+  IconButton,\r\n+} from '@mui/material';\r\n+import FullCalendar from '@fullcalendar/react';\r\n+import dayGridPlugin from '@fullcalendar/daygrid';\r\n+import interactionPlugin from '@fullcalendar/interaction';\r\n+import NavBar from '../components/NavBar';\r\n+\r\n+import AddIcon from '@mui/icons-material/Add';\r\n+import EditIcon from '@mui/icons-material/Edit';\r\n+import DeleteIcon from '@mui/icons-material/Delete';\r\n+\r\n+const HOURS = Array.from({ length: 17 }, (_, i) => 8 + i); // 08:00 to 00:00\r\n+\r\n+function formatHour(h) {\r\n+  return h === 24 ? '00:00' : `${h.toString().padStart(2, '0')}:00`;\r\n+}\r\n+\r\n+export default function Dashboard() {\r\n+  const [profile, setProfile] = useState(null);\r\n+  const [events, setEvents] = useState([]);\r\n+  const [selectedDay, setSelectedDay] = useState(null);\r\n+  const [openDayModal, setOpenDayModal] = useState(false);\r\n+\r\n+  const [openEventForm, setOpenEventForm] = useState(false);\r\n+  const [editingHour, setEditingHour] = useState(null);\r\n+  // Added status field with default 'confirmed'\r\n+  const [formData, setFormData] = useState({ name: '', phone: '', type: 'Point', status: 'CONFIRMED' });\r\n+  const [errors, setErrors] = useState({});\r\n+\r\n+  const token = localStorage.getItem('token');\r\n+  const authHeaders = {\r\n+    Authorization: `Bearer ${token}`,\r\n+    'Content-Type': 'application/json',\r\n+  };\r\n+\r\n+  useEffect(() => {\r\n+    if (!token) return;\r\n+\r\n+    fetch('http://localhost:5000/api/admin/profile', { headers: authHeaders })\r\n+      .then(res => (res.ok ? res.json() : Promise.reject()))\r\n+      .then(setProfile)\r\n+      .catch(() => {\r\n+        localStorage.removeItem('token');\r\n+      });\r\n+\r\n+    fetch('http://localhost:5000/api/events', { headers: authHeaders })\r\n+      .then(res => res.json())\r\n+      .then(setEvents)\r\n+      .catch(console.error);\r\n+  }, [token]);\r\n+\r\n+  const isDateBeforeToday = (dateStr) => {\r\n+    if (!dateStr) return false;\r\n+    const selected = new Date(dateStr);\r\n+    const today = new Date();\r\n+    today.setHours(0, 0, 0, 0);\r\n+    return selected < today;\r\n+  };\r\n+\r\n+  const isHourInPast = (dateStr, hour) => {\r\n+    if (!dateStr) return false;\r\n+    const now = new Date();\r\n+    const selected = new Date(dateStr);\r\n+    selected.setHours(hour, 0, 0, 0);\r\n+    return selected < now;\r\n+  };\r\n+\r\n+  const findEventAtHour = (hour) => {\r\n+    if (!selectedDay) return null;\r\n+    const hourStr = hour === 24 ? '00:00' : formatHour(hour);\r\n+    const prefix = `${selectedDay}T${hourStr}`;\r\n+    return events.find(e => e.date.startsWith(prefix));\r\n+  };\r\n+\r\n+  const validate = () => {\r\n+    const errs = {};\r\n+    if (!formData.name.trim()) errs.name = 'Name is required';\r\n+    if (!formData.phone.trim()) errs.phone = 'Phone is required';\r\n+    else if (!/^\\d{10}$/.test(formData.phone)) errs.phone = 'Phone must be 10 digits';\r\n+    if (!['Point', 'Rappel'].includes(formData.type)) errs.type = 'Invalid type';\r\n+    // Add validation for status (must be confirmed or completed)\r\n+    if (!['CONFIRMED', 'COMPLETED'].includes(formData.status)) errs.status = 'Invalid status';\r\n+    setErrors(errs);\r\n+    return Object.keys(errs).length === 0;\r\n+  };\r\n+\r\n+  // Helper: Can status be modified? Event date/time passed by at least 1 hour?\r\n+  const canModifyStatus = () => {\r\n+    if (!selectedDay || editingHour === null) return false;\r\n+    const eventDate = new Date(selectedDay);\r\n+    eventDate.setHours(editingHour, 0, 0, 0);\r\n+    const now = new Date();\r\n+    return tr // 1 hour in ms\r\n+  };\r\n+\r\n+  const handleAddOrUpdate = async () => {\r\n+    if (isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, editingHour)) {\r\n+      alert(\"You can't add or modify events for past date/time.\");\r\n+      return;\r\n+    }\r\n+    if (!validate()) return;\r\n+\r\n+    const hourStr = editingHour === 24 ? '00:00' : formatHour(editingHour);\r\n+    const dateTime = `${selectedDay}T${hourStr}:00`;\r\n+\r\n+    const eventPayload = {\r\n+      title: `${formData.type} - ${formData.name}`,\r\n+      date: dateTime,\r\n+      name: formData.name,\r\n+      phone: formData.phone,\r\n+      type: formData.type,\r\n+      status: formData.status,\r\n+    };\r\n+\r\n+    try {\r\n+      const existingEvent = findEventAtHour(editingHour);\r\n+      if (existingEvent) {\r\n+        const res = await fetch(`http://localhost:5000/api/events/${existingEvent._id}`, {\r\n+          method: 'PUT',\r\n+          headers: authHeaders,\r\n+          body: JSON.stringify(eventPayload),\r\n+        });\r\n+        const updated = await res.json();\r\n+        setEvents(events.map(e => (e._id === updated._id ? updated : e)));\r\n+      } else {\r\n+        const res = await fetch('http://localhost:5000/api/events', {\r\n+          method: 'POST',\r\n+          headers: authHeaders,\r\n+          body: JSON.stringify(eventPayload),\r\n+        });\r\n+        const created = await res.json();\r\n+        setEvents([...events, created]);\r\n+      }\r\n+      setOpenEventForm(false);\r\n+      setEditingHour(null);\r\n+      setFormData({ name: '', phone: '', type: 'Point', status: 'CONFIRMED' });\r\n+      setErrors({});\r\n+    } catch (err) {\r\n+      console.error('Save event failed:', err);\r\n+    }\r\n+  };\r\n+\r\n+  const handleDelete = async (hourToDelete) => {\r\n+    if (isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, hourToDelete)) {\r\n+      alert(\"You can't delete events from past date/time.\");\r\n+      return;\r\n+    }\r\n+    const existingEvent = findEventAtHour(hourToDelete);\r\n+    if (!existingEvent) return;\r\n+\r\n+    try {\r\n+      await fetch(`http://localhost:5000/api/events/${existingEvent._id}`, {\r\n+        method: 'DELETE',\r\n+        headers: authHeaders,\r\n+      });\r\n+      setEvents(events.filter(e => e._id !== existingEvent._id));\r\n+      if (editingHour === hourToDelete) {\r\n+        setOpenEventForm(false);\r\n+        setEditingHour(null);\r\n+        setFormData({ name: '', phone: '', type: 'Point', status: 'CONFIRMED' });\r\n+        setErrors({});\r\n+      }\r\n+    } catch (err) {\r\n+      console.error('Delete event failed:', err);\r\n+    }\r\n+  };\r\n+\r\n+  const startEditing = (hour) => {\r\n+    if (isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, hour)) {\r\n+      alert(\"You can't add or modify events for past date/time.\");\r\n+      return;\r\n+    }\r\n+    const ev = findEventAtHour(hour);\r\n+    if (ev) {\r\n+      setFormData({\r\n+        name: ev.name,\r\n+        phone: ev.phone,\r\n+        type: ev.type,\r\n+        status: ev.status || 'CONFIRMED',\r\n+      });\r\n+    } else {\r\n+      setFormData({ name: '', phone: '', type: 'Point', status: 'CONFIRMED' });\r\n+    }\r\n+    setEditingHour(hour);\r\n+    setErrors({});\r\n+    setOpenEventForm(true);\r\n+  };\r\n+\r\n+  const handleDateClick = (arg) => {\r\n+    const clickedDate = arg.dateStr;\r\n+    const hasEventOnDate = events.some(ev => ev.date.startsWith(clickedDate));\r\n+\r\n+    if (isDateBeforeToday(clickedDate) && !hasEventOnDate) {\r\n+      alert('No events on this past date.');\r\n+      return;\r\n+    }\r\n+\r\n+    setSelectedDay(clickedDate);\r\n+    setOpenDayModal(true);\r\n+    setEditingHour(null);\r\n+    setFormData({ name: '', phone: '', type: 'Point', status: 'CONFIRMED' });\r\n+    setErrors({});\r\n+  };\r\n+\r\n+  return (\r\n+    <>\r\n+      <NavBar\r\n+        email={profile?.email}\r\n+        onLogout={() => {\r\n+          localStorage.removeItem('token');\r\n+          // redirect if needed\r\n+        }}\r\n+      />\r\n+      <Container maxWidth=\"lg\" sx={{ mt: 4 }}>\r\n+        <Box boxShadow={3} p={2} bgcolor=\"white\" borderRadius={2}>\r\n+          <FullCalendar\r\n+            plugins={[dayGridPlugin, interactionPlugin]}\r\n+            initialView=\"dayGridMonth\"\r\n+            selectable={true}\r\n+            events={events}\r\n+            dateClick={handleDateClick}\r\n+          />\r\n+        </Box>\r\n+      </Container>\r\n+\r\n+      <Dialog\r\n+        open={openDayModal}\r\n+        onClose={() => setOpenDayModal(false)}\r\n+        maxWidth=\"lg\"\r\n+        fullWidth\r\n+      >\r\n+        <DialogTitle>Schedule for {selectedDay}</DialogTitle>\r\n+        <DialogContent>\r\n+          <Table>\r\n+            <TableHead>\r\n+              <TableRow>\r\n+                <TableCell>Hour</TableCell>\r\n+                <TableCell>Event Name</TableCell>\r\n+                <TableCell>Customer Name</TableCell>\r\n+                <TableCell>Customer Phone</TableCell>\r\n+                <TableCell>Status</TableCell>\r\n+                <TableCell>Action</TableCell>\r\n+              </TableRow>\r\n+            </TableHead>\r\n+\r\n+            <TableBody>\r\n+              {HOURS.map((hour) => {\r\n+                const ev = findEventAtHour(hour);\r\n+                const isPast = isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, hour);\r\n+\r\n+                return (\r\n+                  <TableRow key={hour}>\r\n+                    <TableCell>{formatHour(hour)}</TableCell>\r\n+                    <TableCell>{ev?.title || ''}</TableCell>\r\n+                    <TableCell>{ev?.name || ''}</TableCell>\r\n+                    <TableCell>{ev?.phone || ''}</TableCell>\r\n+                    <TableCell>{ev?.status || ''}</TableCell>\r\n+                    <TableCell>\r\n+                      {isPast ? (\r\n+                        <>\r\n+                          {ev ? (\r\n+                            <>\r\n+                              <IconButton size=\"small\" disabled title=\"Modify disabled on past date/time\">\r\n+                                <EditIcon />\r\n+                              </IconButton>\r\n+                              <IconButton size=\"small\" disabled title=\"Delete disabled on past date/time\">\r\n+                                <DeleteIcon />\r\n+                              </IconButton>\r\n+                            </>\r\n+                          ) : (\r\n+                            <IconButton size=\"small\" disabled title=\"Add disabled on past date/time\">\r\n+                              <AddIcon />\r\n+                            </IconButton>\r\n+                          )}\r\n+                        </>\r\n+                      ) : (\r\n+                        <>\r\n+                          <IconButton\r\n+                            color=\"primary\"\r\n+                            size=\"small\"\r\n+                            onClick={() => startEditing(hour)}\r\n+                            title={ev ? 'Modify' : 'Add'}\r\n+                          >\r\n+                            {ev ? <EditIcon /> : <AddIcon />}\r\n+                          </IconButton>\r\n+\r\n+                          {ev && (\r\n+                            <IconButton\r\n+                              color=\"error\"\r\n+                              size=\"small\"\r\n+                              onClick={() => handleDelete(hour)}\r\n+                              title=\"Delete\"\r\n+                            >\r\n+                              <DeleteIcon />\r\n+                            </IconButton>\r\n+                          )}\r\n+                        </>\r\n+                      )}\r\n+                    </TableCell>\r\n+                  </TableRow>\r\n+                );\r\n+              })}\r\n+            </TableBody>\r\n+          </Table>\r\n+        </DialogContent>\r\n+\r\n+        <DialogActions>\r\n+          <Button onClick={() => setOpenDayModal(false)}>Close</Button>\r\n+        </DialogActions>\r\n+      </Dialog>\r\n+\r\n+      <Dialog\r\n+        open={openEventForm}\r\n+        onClose={() => setOpenEventForm(false)}\r\n+        maxWidth=\"sm\"\r\n+        fullWidth\r\n+      >\r\n+        <DialogTitle>\r\n+          {editingHour !== null && findEventAtHour(editingHour)\r\n+            ? 'Modify Event'\r\n+            : 'Add Event'}\r\n+        </DialogTitle>\r\n+        <DialogContent>\r\n+          <Typography variant=\"subtitle1\" gutterBottom>\r\n+            For hour: {editingHour !== null ? formatHour(editingHour) : ''}\r\n+          </Typography>\r\n+\r\n+          <TextField\r\n+            margin=\"dense\"\r\n+            label=\"Customer Name\"\r\n+            fullWidth\r\n+            value={formData.name}\r\n+            onChange={(e) => setFormData({ ...formData, name: e.target.value })}\r\n+            error={!!errors.name}\r\n+            helperText={errors.name}\r\n+          />\r\n+          <TextField\r\n+            margin=\"dense\"\r\n+            label=\"Customer Phone\"\r\n+            fullWidth\r\n+            value={formData.phone}\r\n+            onChange={(e) => setFormData({ ...formData, phone: e.target.value })}\r\n+            error={!!errors.phone}\r\n+            helperText={errors.phone}\r\n+          />\r\n+          <TextField\r\n+            margin=\"dense\"\r\n+            select\r\n+            label=\"Type\"\r\n+            fullWidth\r\n+            value={formData.type}\r\n+            onChange={(e) => setFormData({ ...formData, type: e.target.value })}\r\n+          >\r\n+            <MenuItem value=\"Point\">Point</MenuItem>\r\n+            <MenuItem value=\"Rappel\">Rappel</MenuItem>\r\n+          </TextField>\r\n+\r\n+          {/* Status field only editable if 1 hour passed */}\r\n+          {canModifyStatus() ? (\r\n+            <TextField\r\n+              margin=\"dense\"\r\n+              select\r\n+              label=\"Status\"\r\n+              fullWidth\r\n+              value={formData.status}\r\n+              onChange={(e) => setFormData({ ...formData, status: e.target.value })}\r\n+              error={!!errors.status}\r\n+              helperText={errors.status}\r\n+            >\r\n+              <MenuItem value=\"CONFIRMED\">CONFIRMED</MenuItem>\r\n+              <MenuItem value=\"COMPLETED\">COMPLETED</MenuItem>\r\n+            </TextField>\r\n+          ) : (\r\n+            <Typography\r\n+              variant=\"body2\"\r\n+              color=\"textSecondary\"\r\n+              sx={{ mt: 2, mb: 1 }}\r\n+            >\r\n+              Status can only be modified  one hour after the event time.\r\n+            </Typography>\r\n+          )}\r\n+        </DialogContent>\r\n+\r\n+        <DialogActions>\r\n+          <Button onClick={() => setOpenEventForm(false)}>Cancel</Button>\r\n+          <Button\r\n+            onClick={handleAddOrUpdate}\r\n+            variant=\"contained\"\r\n+            color=\"primary\"\r\n+            disabled={isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, editingHour)}\r\n+          >\r\n+            Save\r\n+          </Button>\r\n+        </DialogActions>\r\n+      </Dialog>\r\n+    </>\r\n+  );\r\n+}\r\n"
                },
                {
                    "date": 1752517058099,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -106,838 +106,8 @@\n     if (!selectedDay || editingHour === null) return false;\r\n     const eventDate = new Date(selectedDay);\r\n     eventDate.setHours(editingHour, 0, 0, 0);\r\n     const now = new Date();\r\n-    return tr // 1 hour in ms\r\n-  };\r\n-\r\n-  const handleAddOrUpdate = async () => {\r\n-    if (isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, editingHour)) {\r\n-      alert(\"You can't add or modify events for past date/time.\");\r\n-      return;\r\n-    }\r\n-    if (!validate()) return;\r\n-\r\n-    const hourStr = editingHour === 24 ? '00:00' : formatHour(editingHour);\r\n-    const dateTime = `${selectedDay}T${hourStr}:00`;\r\n-\r\n-    const eventPayload = {\r\n-      title: `${formData.type} - ${formData.name}`,\r\n-      date: dateTime,\r\n-      name: formData.name,\r\n-      phone: formData.phone,\r\n-      type: formData.type,\r\n-      status: formData.status,\r\n-    };\r\n-\r\n-    try {\r\n-      const existingEvent = findEventAtHour(editingHour);\r\n-      if (existingEvent) {\r\n-        const res = await fetch(`http://localhost:5000/api/events/${existingEvent._id}`, {\r\n-          method: 'PUT',\r\n-          headers: authHeaders,\r\n-          body: JSON.stringify(eventPayload),\r\n-        });\r\n-        const updated = await res.json();\r\n-        setEvents(events.map(e => (e._id === updated._id ? updated : e)));\r\n-      } else {\r\n-        const res = await fetch('http://localhost:5000/api/events', {\r\n-          method: 'POST',\r\n-          headers: authHeaders,\r\n-          body: JSON.stringify(eventPayload),\r\n-        });\r\n-        const created = await res.json();\r\n-        setEvents([...events, created]);\r\n-      }\r\n-      setOpenEventForm(false);\r\n-      setEditingHour(null);\r\n-      setFormData({ name: '', phone: '', type: 'Point', status: 'CONFIRMED' });\r\n-      setErrors({});\r\n-    } catch (err) {\r\n-      console.error('Save event failed:', err);\r\n-    }\r\n-  };\r\n-\r\n-  const handleDelete = async (hourToDelete) => {\r\n-    if (isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, hourToDelete)) {\r\n-      alert(\"You can't delete events from past date/time.\");\r\n-      return;\r\n-    }\r\n-    const existingEvent = findEventAtHour(hourToDelete);\r\n-    if (!existingEvent) return;\r\n-\r\n-    try {\r\n-      await fetch(`http://localhost:5000/api/events/${existingEvent._id}`, {\r\n-        method: 'DELETE',\r\n-        headers: authHeaders,\r\n-      });\r\n-      setEvents(events.filter(e => e._id !== existingEvent._id));\r\n-      if (editingHour === hourToDelete) {\r\n-        setOpenEventForm(false);\r\n-        setEditingHour(null);\r\n-        setFormData({ name: '', phone: '', type: 'Point', status: 'CONFIRMED' });\r\n-        setErrors({});\r\n-      }\r\n-    } catch (err) {\r\n-      console.error('Delete event failed:', err);\r\n-    }\r\n-  };\r\n-\r\n-  const startEditing = (hour) => {\r\n-    if (isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, hour)) {\r\n-      alert(\"You can't add or modify events for past date/time.\");\r\n-      return;\r\n-    }\r\n-    const ev = findEventAtHour(hour);\r\n-    if (ev) {\r\n-      setFormData({\r\n-        name: ev.name,\r\n-        phone: ev.phone,\r\n-        type: ev.type,\r\n-        status: ev.status || 'CONFIRMED',\r\n-      });\r\n-    } else {\r\n-      setFormData({ name: '', phone: '', type: 'Point', status: 'CONFIRMED' });\r\n-    }\r\n-    setEditingHour(hour);\r\n-    setErrors({});\r\n-    setOpenEventForm(true);\r\n-  };\r\n-\r\n-  const handleDateClick = (arg) => {\r\n-    const clickedDate = arg.dateStr;\r\n-    const hasEventOnDate = events.some(ev => ev.date.startsWith(clickedDate));\r\n-\r\n-    if (isDateBeforeToday(clickedDate) && !hasEventOnDate) {\r\n-      alert('No events on this past date.');\r\n-      return;\r\n-    }\r\n-\r\n-    setSelectedDay(clickedDate);\r\n-    setOpenDayModal(true);\r\n-    setEditingHour(null);\r\n-    setFormData({ name: '', phone: '', type: 'Point', status: 'CONFIRMED' });\r\n-    setErrors({});\r\n-  };\r\n-\r\n-  return (\r\n-    <>\r\n-      <NavBar\r\n-        email={profile?.email}\r\n-        onLogout={() => {\r\n-          localStorage.removeItem('token');\r\n-          // redirect if needed\r\n-        }}\r\n-      />\r\n-      <Container maxWidth=\"lg\" sx={{ mt: 4 }}>\r\n-        <Box boxShadow={3} p={2} bgcolor=\"white\" borderRadius={2}>\r\n-          <FullCalendar\r\n-            plugins={[dayGridPlugin, interactionPlugin]}\r\n-            initialView=\"dayGridMonth\"\r\n-            selectable={true}\r\n-            events={events}\r\n-            dateClick={handleDateClick}\r\n-          />\r\n-        </Box>\r\n-      </Container>\r\n-\r\n-      <Dialog\r\n-        open={openDayModal}\r\n-        onClose={() => setOpenDayModal(false)}\r\n-        maxWidth=\"lg\"\r\n-        fullWidth\r\n-      >\r\n-        <DialogTitle>Schedule for {selectedDay}</DialogTitle>\r\n-        <DialogContent>\r\n-          <Table>\r\n-            <TableHead>\r\n-              <TableRow>\r\n-                <TableCell>Hour</TableCell>\r\n-                <TableCell>Event Name</TableCell>\r\n-                <TableCell>Customer Name</TableCell>\r\n-                <TableCell>Customer Phone</TableCell>\r\n-                <TableCell>Status</TableCell>\r\n-                <TableCell>Action</TableCell>\r\n-              </TableRow>\r\n-            </TableHead>\r\n-\r\n-            <TableBody>\r\n-              {HOURS.map((hour) => {\r\n-                const ev = findEventAtHour(hour);\r\n-                const isPast = isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, hour);\r\n-\r\n-                return (\r\n-                  <TableRow key={hour}>\r\n-                    <TableCell>{formatHour(hour)}</TableCell>\r\n-                    <TableCell>{ev?.title || ''}</TableCell>\r\n-                    <TableCell>{ev?.name || ''}</TableCell>\r\n-                    <TableCell>{ev?.phone || ''}</TableCell>\r\n-                    <TableCell>{ev?.status || ''}</TableCell>\r\n-                    <TableCell>\r\n-                      {isPast ? (\r\n-                        <>\r\n-                          {ev ? (\r\n-                            <>\r\n-                              <IconButton size=\"small\" disabled title=\"Modify disabled on past date/time\">\r\n-                                <EditIcon />\r\n-                              </IconButton>\r\n-                              <IconButton size=\"small\" disabled title=\"Delete disabled on past date/time\">\r\n-                                <DeleteIcon />\r\n-                              </IconButton>\r\n-                            </>\r\n-                          ) : (\r\n-                            <IconButton size=\"small\" disabled title=\"Add disabled on past date/time\">\r\n-                              <AddIcon />\r\n-                            </IconButton>\r\n-                          )}\r\n-                        </>\r\n-                      ) : (\r\n-                        <>\r\n-                          <IconButton\r\n-                            color=\"primary\"\r\n-                            size=\"small\"\r\n-                            onClick={() => startEditing(hour)}\r\n-                            title={ev ? 'Modify' : 'Add'}\r\n-                          >\r\n-                            {ev ? <EditIcon /> : <AddIcon />}\r\n-                          </IconButton>\r\n-\r\n-                          {ev && (\r\n-                            <IconButton\r\n-                              color=\"error\"\r\n-                              size=\"small\"\r\n-                              onClick={() => handleDelete(hour)}\r\n-                              title=\"Delete\"\r\n-                            >\r\n-                              <DeleteIcon />\r\n-                            </IconButton>\r\n-                          )}\r\n-                        </>\r\n-                      )}\r\n-                    </TableCell>\r\n-                  </TableRow>\r\n-                );\r\n-              })}\r\n-            </TableBody>\r\n-          </Table>\r\n-        </DialogContent>\r\n-\r\n-        <DialogActions>\r\n-          <Button onClick={() => setOpenDayModal(false)}>Close</Button>\r\n-        </DialogActions>\r\n-      </Dialog>\r\n-\r\n-      <Dialog\r\n-        open={openEventForm}\r\n-        onClose={() => setOpenEventForm(false)}\r\n-        maxWidth=\"sm\"\r\n-        fullWidth\r\n-      >\r\n-        <DialogTitle>\r\n-          {editingHour !== null && findEventAtHour(editingHour)\r\n-            ? 'Modify Event'\r\n-            : 'Add Event'}\r\n-        </DialogTitle>\r\n-        <DialogContent>\r\n-          <Typography variant=\"subtitle1\" gutterBottom>\r\n-            For hour: {editingHour !== null ? formatHour(editingHour) : ''}\r\n-          </Typography>\r\n-\r\n-          <TextField\r\n-            margin=\"dense\"\r\n-            label=\"Customer Name\"\r\n-            fullWidth\r\n-            value={formData.name}\r\n-            onChange={(e) => setFormData({ ...formData, name: e.target.value })}\r\n-            error={!!errors.name}\r\n-            helperText={errors.name}\r\n-          />\r\n-          <TextField\r\n-            margin=\"dense\"\r\n-            label=\"Customer Phone\"\r\n-            fullWidth\r\n-            value={formData.phone}\r\n-            onChange={(e) => setFormData({ ...formData, phone: e.target.value })}\r\n-            error={!!errors.phone}\r\n-            helperText={errors.phone}\r\n-          />\r\n-          <TextField\r\n-            margin=\"dense\"\r\n-            select\r\n-            label=\"Type\"\r\n-            fullWidth\r\n-            value={formData.type}\r\n-            onChange={(e) => setFormData({ ...formData, type: e.target.value })}\r\n-          >\r\n-            <MenuItem value=\"Point\">Point</MenuItem>\r\n-            <MenuItem value=\"Rappel\">Rappel</MenuItem>\r\n-          </TextField>\r\n-\r\n-          {/* Status field only editable if 1 hour passed */}\r\n-          {canModifyStatus() ? (\r\n-            <TextField\r\n-              margin=\"dense\"\r\n-              select\r\n-              label=\"Status\"\r\n-              fullWidth\r\n-              value={formData.status}\r\n-              onChange={(e) => setFormData({ ...formData, status: e.target.value })}\r\n-              error={!!errors.status}\r\n-              helperText={errors.status}\r\n-            >\r\n-              <MenuItem value=\"CONFIRMED\">CONFIRMED</MenuItem>\r\n-              <MenuItem value=\"COMPLETED\">COMPLETED</MenuItem>\r\n-            </TextField>\r\n-          ) : (\r\n-            <Typography\r\n-              variant=\"body2\"\r\n-              color=\"textSecondary\"\r\n-              sx={{ mt: 2, mb: 1 }}\r\n-            >\r\n-              Status can only be modified  one hour after the event time.\r\n-            </Typography>\r\n-          )}\r\n-        </DialogContent>\r\n-\r\n-        <DialogActions>\r\n-          <Button onClick={() => setOpenEventForm(false)}>Cancel</Button>\r\n-          <Button\r\n-            onClick={handleAddOrUpdate}\r\n-            variant=\"contained\"\r\n-            color=\"primary\"\r\n-            disabled={isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, editingHour)}\r\n-          >\r\n-            Save\r\n-          </Button>\r\n-        </DialogActions>\r\n-      </Dialog>\r\n-    </>\r\n-  );\r\n-}\r\n-import React, { useState, useEffect } from 'react';\r\n-import {\r\n-  Container,\r\n-  Box,\r\n-  Dialog,\r\n-  DialogTitle,\r\n-  DialogContent,\r\n-  DialogActions,\r\n-  Button,\r\n-  TextField,\r\n-  MenuItem,\r\n-  Table,\r\n-  TableHead,\r\n-  TableBody,\r\n-  TableRow,\r\n-  TableCell,\r\n-  Typography,\r\n-  IconButton,\r\n-} from '@mui/material';\r\n-import FullCalendar from '@fullcalendar/react';\r\n-import dayGridPlugin from '@fullcalendar/daygrid';\r\n-import interactionPlugin from '@fullcalendar/interaction';\r\n-import NavBar from '../components/NavBar';\r\n-\r\n-import AddIcon from '@mui/icons-material/Add';\r\n-import EditIcon from '@mui/icons-material/Edit';\r\n-import DeleteIcon from '@mui/icons-material/Delete';\r\n-\r\n-const HOURS = Array.from({ length: 17 }, (_, i) => 8 + i); // 08:00 to 00:00\r\n-\r\n-function formatHour(h) {\r\n-  return h === 24 ? '00:00' : `${h.toString().padStart(2, '0')}:00`;\r\n-}\r\n-\r\n-export default function Dashboard() {\r\n-  const [profile, setProfile] = useState(null);\r\n-  const [events, setEvents] = useState([]);\r\n-  const [selectedDay, setSelectedDay] = useState(null);\r\n-  const [openDayModal, setOpenDayModal] = useState(false);\r\n-\r\n-  const [openEventForm, setOpenEventForm] = useState(false);\r\n-  const [editingHour, setEditingHour] = useState(null);\r\n-  // Added status field with default 'confirmed'\r\n-  const [formData, setFormData] = useState({ name: '', phone: '', type: 'Point', status: 'CONFIRMED' });\r\n-  const [errors, setErrors] = useState({});\r\n-\r\n-  const token = localStorage.getItem('token');\r\n-  const authHeaders = {\r\n-    Authorization: `Bearer ${token}`,\r\n-    'Content-Type': 'application/json',\r\n-  };\r\n-\r\n-  useEffect(() => {\r\n-    if (!token) return;\r\n-\r\n-    fetch('http://localhost:5000/api/admin/profile', { headers: authHeaders })\r\n-      .then(res => (res.ok ? res.json() : Promise.reject()))\r\n-      .then(setProfile)\r\n-      .catch(() => {\r\n-        localStorage.removeItem('token');\r\n-      });\r\n-\r\n-    fetch('http://localhost:5000/api/events', { headers: authHeaders })\r\n-      .then(res => res.json())\r\n-      .then(setEvents)\r\n-      .catch(console.error);\r\n-  }, [token]);\r\n-\r\n-  const isDateBeforeToday = (dateStr) => {\r\n-    if (!dateStr) return false;\r\n-    const selected = new Date(dateStr);\r\n-    const today = new Date();\r\n-    today.setHours(0, 0, 0, 0);\r\n-    return selected < today;\r\n-  };\r\n-\r\n-  const isHourInPast = (dateStr, hour) => {\r\n-    if (!dateStr) return false;\r\n-    const now = new Date();\r\n-    const selected = new Date(dateStr);\r\n-    selected.setHours(hour, 0, 0, 0);\r\n-    return selected < now;\r\n-  };\r\n-\r\n-  const findEventAtHour = (hour) => {\r\n-    if (!selectedDay) return null;\r\n-    const hourStr = hour === 24 ? '00:00' : formatHour(hour);\r\n-    const prefix = `${selectedDay}T${hourStr}`;\r\n-    return events.find(e => e.date.startsWith(prefix));\r\n-  };\r\n-\r\n-  const validate = () => {\r\n-    const errs = {};\r\n-    if (!formData.name.trim()) errs.name = 'Name is required';\r\n-    if (!formData.phone.trim()) errs.phone = 'Phone is required';\r\n-    else if (!/^\\d{10}$/.test(formData.phone)) errs.phone = 'Phone must be 10 digits';\r\n-    if (!['Point', 'Rappel'].includes(formData.type)) errs.type = 'Invalid type';\r\n-    // Add validation for status (must be confirmed or completed)\r\n-    if (!['CONFIRMED', 'COMPLETED'].includes(formData.status)) errs.status = 'Invalid status';\r\n-    setErrors(errs);\r\n-    return Object.keys(errs).length === 0;\r\n-  };\r\n-\r\n-  // Helper: Can status be modified? Event date/time passed by at least 1 hour?\r\n-  const canModifyStatus = () => {\r\n-    if (!selectedDay || editingHour === null) return false;\r\n-    const eventDate = new Date(selectedDay);\r\n-    eventDate.setHours(editingHour, 0, 0, 0);\r\n-    const now = new Date();\r\n-    return tr // 1 hour in ms\r\n-  };\r\n-\r\n-  const handleAddOrUpdate = async () => {\r\n-    if (isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, editingHour)) {\r\n-      alert(\"You can't add or modify events for past date/time.\");\r\n-      return;\r\n-    }\r\n-    if (!validate()) return;\r\n-\r\n-    const hourStr = editingHour === 24 ? '00:00' : formatHour(editingHour);\r\n-    const dateTime = `${selectedDay}T${hourStr}:00`;\r\n-\r\n-    const eventPayload = {\r\n-      title: `${formData.type} - ${formData.name}`,\r\n-      date: dateTime,\r\n-      name: formData.name,\r\n-      phone: formData.phone,\r\n-      type: formData.type,\r\n-      status: formData.status,\r\n-    };\r\n-\r\n-    try {\r\n-      const existingEvent = findEventAtHour(editingHour);\r\n-      if (existingEvent) {\r\n-        const res = await fetch(`http://localhost:5000/api/events/${existingEvent._id}`, {\r\n-          method: 'PUT',\r\n-          headers: authHeaders,\r\n-          body: JSON.stringify(eventPayload),\r\n-        });\r\n-        const updated = await res.json();\r\n-        setEvents(events.map(e => (e._id === updated._id ? updated : e)));\r\n-      } else {\r\n-        const res = await fetch('http://localhost:5000/api/events', {\r\n-          method: 'POST',\r\n-          headers: authHeaders,\r\n-          body: JSON.stringify(eventPayload),\r\n-        });\r\n-        const created = await res.json();\r\n-        setEvents([...events, created]);\r\n-      }\r\n-      setOpenEventForm(false);\r\n-      setEditingHour(null);\r\n-      setFormData({ name: '', phone: '', type: 'Point', status: 'CONFIRMED' });\r\n-      setErrors({});\r\n-    } catch (err) {\r\n-      console.error('Save event failed:', err);\r\n-    }\r\n-  };\r\n-\r\n-  const handleDelete = async (hourToDelete) => {\r\n-    if (isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, hourToDelete)) {\r\n-      alert(\"You can't delete events from past date/time.\");\r\n-      return;\r\n-    }\r\n-    const existingEvent = findEventAtHour(hourToDelete);\r\n-    if (!existingEvent) return;\r\n-\r\n-    try {\r\n-      await fetch(`http://localhost:5000/api/events/${existingEvent._id}`, {\r\n-        method: 'DELETE',\r\n-        headers: authHeaders,\r\n-      });\r\n-      setEvents(events.filter(e => e._id !== existingEvent._id));\r\n-      if (editingHour === hourToDelete) {\r\n-        setOpenEventForm(false);\r\n-        setEditingHour(null);\r\n-        setFormData({ name: '', phone: '', type: 'Point', status: 'CONFIRMED' });\r\n-        setErrors({});\r\n-      }\r\n-    } catch (err) {\r\n-      console.error('Delete event failed:', err);\r\n-    }\r\n-  };\r\n-\r\n-  const startEditing = (hour) => {\r\n-    if (isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, hour)) {\r\n-      alert(\"You can't add or modify events for past date/time.\");\r\n-      return;\r\n-    }\r\n-    const ev = findEventAtHour(hour);\r\n-    if (ev) {\r\n-      setFormData({\r\n-        name: ev.name,\r\n-        phone: ev.phone,\r\n-        type: ev.type,\r\n-        status: ev.status || 'CONFIRMED',\r\n-      });\r\n-    } else {\r\n-      setFormData({ name: '', phone: '', type: 'Point', status: 'CONFIRMED' });\r\n-    }\r\n-    setEditingHour(hour);\r\n-    setErrors({});\r\n-    setOpenEventForm(true);\r\n-  };\r\n-\r\n-  const handleDateClick = (arg) => {\r\n-    const clickedDate = arg.dateStr;\r\n-    const hasEventOnDate = events.some(ev => ev.date.startsWith(clickedDate));\r\n-\r\n-    if (isDateBeforeToday(clickedDate) && !hasEventOnDate) {\r\n-      alert('No events on this past date.');\r\n-      return;\r\n-    }\r\n-\r\n-    setSelectedDay(clickedDate);\r\n-    setOpenDayModal(true);\r\n-    setEditingHour(null);\r\n-    setFormData({ name: '', phone: '', type: 'Point', status: 'CONFIRMED' });\r\n-    setErrors({});\r\n-  };\r\n-\r\n-  return (\r\n-    <>\r\n-      <NavBar\r\n-        email={profile?.email}\r\n-        onLogout={() => {\r\n-          localStorage.removeItem('token');\r\n-          // redirect if needed\r\n-        }}\r\n-      />\r\n-      <Container maxWidth=\"lg\" sx={{ mt: 4 }}>\r\n-        <Box boxShadow={3} p={2} bgcolor=\"white\" borderRadius={2}>\r\n-          <FullCalendar\r\n-            plugins={[dayGridPlugin, interactionPlugin]}\r\n-            initialView=\"dayGridMonth\"\r\n-            selectable={true}\r\n-            events={events}\r\n-            dateClick={handleDateClick}\r\n-          />\r\n-        </Box>\r\n-      </Container>\r\n-\r\n-      <Dialog\r\n-        open={openDayModal}\r\n-        onClose={() => setOpenDayModal(false)}\r\n-        maxWidth=\"lg\"\r\n-        fullWidth\r\n-      >\r\n-        <DialogTitle>Schedule for {selectedDay}</DialogTitle>\r\n-        <DialogContent>\r\n-          <Table>\r\n-            <TableHead>\r\n-              <TableRow>\r\n-                <TableCell>Hour</TableCell>\r\n-                <TableCell>Event Name</TableCell>\r\n-                <TableCell>Customer Name</TableCell>\r\n-                <TableCell>Customer Phone</TableCell>\r\n-                <TableCell>Status</TableCell>\r\n-                <TableCell>Action</TableCell>\r\n-              </TableRow>\r\n-            </TableHead>\r\n-\r\n-            <TableBody>\r\n-              {HOURS.map((hour) => {\r\n-                const ev = findEventAtHour(hour);\r\n-                const isPast = isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, hour);\r\n-\r\n-                return (\r\n-                  <TableRow key={hour}>\r\n-                    <TableCell>{formatHour(hour)}</TableCell>\r\n-                    <TableCell>{ev?.title || ''}</TableCell>\r\n-                    <TableCell>{ev?.name || ''}</TableCell>\r\n-                    <TableCell>{ev?.phone || ''}</TableCell>\r\n-                    <TableCell>{ev?.status || ''}</TableCell>\r\n-                    <TableCell>\r\n-                      {isPast ? (\r\n-                        <>\r\n-                          {ev ? (\r\n-                            <>\r\n-                              <IconButton size=\"small\" disabled title=\"Modify disabled on past date/time\">\r\n-                                <EditIcon />\r\n-                              </IconButton>\r\n-                              <IconButton size=\"small\" disabled title=\"Delete disabled on past date/time\">\r\n-                                <DeleteIcon />\r\n-                              </IconButton>\r\n-                            </>\r\n-                          ) : (\r\n-                            <IconButton size=\"small\" disabled title=\"Add disabled on past date/time\">\r\n-                              <AddIcon />\r\n-                            </IconButton>\r\n-                          )}\r\n-                        </>\r\n-                      ) : (\r\n-                        <>\r\n-                          <IconButton\r\n-                            color=\"primary\"\r\n-                            size=\"small\"\r\n-                            onClick={() => startEditing(hour)}\r\n-                            title={ev ? 'Modify' : 'Add'}\r\n-                          >\r\n-                            {ev ? <EditIcon /> : <AddIcon />}\r\n-                          </IconButton>\r\n-\r\n-                          {ev && (\r\n-                            <IconButton\r\n-                              color=\"error\"\r\n-                              size=\"small\"\r\n-                              onClick={() => handleDelete(hour)}\r\n-                              title=\"Delete\"\r\n-                            >\r\n-                              <DeleteIcon />\r\n-                            </IconButton>\r\n-                          )}\r\n-                        </>\r\n-                      )}\r\n-                    </TableCell>\r\n-                  </TableRow>\r\n-                );\r\n-              })}\r\n-            </TableBody>\r\n-          </Table>\r\n-        </DialogContent>\r\n-\r\n-        <DialogActions>\r\n-          <Button onClick={() => setOpenDayModal(false)}>Close</Button>\r\n-        </DialogActions>\r\n-      </Dialog>\r\n-\r\n-      <Dialog\r\n-        open={openEventForm}\r\n-        onClose={() => setOpenEventForm(false)}\r\n-        maxWidth=\"sm\"\r\n-        fullWidth\r\n-      >\r\n-        <DialogTitle>\r\n-          {editingHour !== null && findEventAtHour(editingHour)\r\n-            ? 'Modify Event'\r\n-            : 'Add Event'}\r\n-        </DialogTitle>\r\n-        <DialogContent>\r\n-          <Typography variant=\"subtitle1\" gutterBottom>\r\n-            For hour: {editingHour !== null ? formatHour(editingHour) : ''}\r\n-          </Typography>\r\n-\r\n-          <TextField\r\n-            margin=\"dense\"\r\n-            label=\"Customer Name\"\r\n-            fullWidth\r\n-            value={formData.name}\r\n-            onChange={(e) => setFormData({ ...formData, name: e.target.value })}\r\n-            error={!!errors.name}\r\n-            helperText={errors.name}\r\n-          />\r\n-          <TextField\r\n-            margin=\"dense\"\r\n-            label=\"Customer Phone\"\r\n-            fullWidth\r\n-            value={formData.phone}\r\n-            onChange={(e) => setFormData({ ...formData, phone: e.target.value })}\r\n-            error={!!errors.phone}\r\n-            helperText={errors.phone}\r\n-          />\r\n-          <TextField\r\n-            margin=\"dense\"\r\n-            select\r\n-            label=\"Type\"\r\n-            fullWidth\r\n-            value={formData.type}\r\n-            onChange={(e) => setFormData({ ...formData, type: e.target.value })}\r\n-          >\r\n-            <MenuItem value=\"Point\">Point</MenuItem>\r\n-            <MenuItem value=\"Rappel\">Rappel</MenuItem>\r\n-          </TextField>\r\n-\r\n-          {/* Status field only editable if 1 hour passed */}\r\n-          {canModifyStatus() ? (\r\n-            <TextField\r\n-              margin=\"dense\"\r\n-              select\r\n-              label=\"Status\"\r\n-              fullWidth\r\n-              value={formData.status}\r\n-              onChange={(e) => setFormData({ ...formData, status: e.target.value })}\r\n-              error={!!errors.status}\r\n-              helperText={errors.status}\r\n-            >\r\n-              <MenuItem value=\"CONFIRMED\">CONFIRMED</MenuItem>\r\n-              <MenuItem value=\"COMPLETED\">COMPLETED</MenuItem>\r\n-            </TextField>\r\n-          ) : (\r\n-            <Typography\r\n-              variant=\"body2\"\r\n-              color=\"textSecondary\"\r\n-              sx={{ mt: 2, mb: 1 }}\r\n-            >\r\n-              Status can only be modified  one hour after the event time.\r\n-            </Typography>\r\n-          )}\r\n-        </DialogContent>\r\n-\r\n-        <DialogActions>\r\n-          <Button onClick={() => setOpenEventForm(false)}>Cancel</Button>\r\n-          <Button\r\n-            onClick={handleAddOrUpdate}\r\n-            variant=\"contained\"\r\n-            color=\"primary\"\r\n-            disabled={isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, editingHour)}\r\n-          >\r\n-            Save\r\n-          </Button>\r\n-        </DialogActions>\r\n-      </Dialog>\r\n-    </>\r\n-  );\r\n-}\r\n-import React, { useState, useEffect } from 'react';\r\n-import {\r\n-  Container,\r\n-  Box,\r\n-  Dialog,\r\n-  DialogTitle,\r\n-  DialogContent,\r\n-  DialogActions,\r\n-  Button,\r\n-  TextField,\r\n-  MenuItem,\r\n-  Table,\r\n-  TableHead,\r\n-  TableBody,\r\n-  TableRow,\r\n-  TableCell,\r\n-  Typography,\r\n-  IconButton,\r\n-} from '@mui/material';\r\n-import FullCalendar from '@fullcalendar/react';\r\n-import dayGridPlugin from '@fullcalendar/daygrid';\r\n-import interactionPlugin from '@fullcalendar/interaction';\r\n-import NavBar from '../components/NavBar';\r\n-\r\n-import AddIcon from '@mui/icons-material/Add';\r\n-import EditIcon from '@mui/icons-material/Edit';\r\n-import DeleteIcon from '@mui/icons-material/Delete';\r\n-\r\n-const HOURS = Array.from({ length: 17 }, (_, i) => 8 + i); // 08:00 to 00:00\r\n-\r\n-function formatHour(h) {\r\n-  return h === 24 ? '00:00' : `${h.toString().padStart(2, '0')}:00`;\r\n-}\r\n-\r\n-export default function Dashboard() {\r\n-  const [profile, setProfile] = useState(null);\r\n-  const [events, setEvents] = useState([]);\r\n-  const [selectedDay, setSelectedDay] = useState(null);\r\n-  const [openDayModal, setOpenDayModal] = useState(false);\r\n-\r\n-  const [openEventForm, setOpenEventForm] = useState(false);\r\n-  const [editingHour, setEditingHour] = useState(null);\r\n-  // Added status field with default 'confirmed'\r\n-  const [formData, setFormData] = useState({ name: '', phone: '', type: 'Point', status: 'CONFIRMED' });\r\n-  const [errors, setErrors] = useState({});\r\n-\r\n-  const token = localStorage.getItem('token');\r\n-  const authHeaders = {\r\n-    Authorization: `Bearer ${token}`,\r\n-    'Content-Type': 'application/json',\r\n-  };\r\n-\r\n-  useEffect(() => {\r\n-    if (!token) return;\r\n-\r\n-    fetch('http://localhost:5000/api/admin/profile', { headers: authHeaders })\r\n-      .then(res => (res.ok ? res.json() : Promise.reject()))\r\n-      .then(setProfile)\r\n-      .catch(() => {\r\n-        localStorage.removeItem('token');\r\n-      });\r\n-\r\n-    fetch('http://localhost:5000/api/events', { headers: authHeaders })\r\n-      .then(res => res.json())\r\n-      .then(setEvents)\r\n-      .catch(console.error);\r\n-  }, [token]);\r\n-\r\n-  const isDateBeforeToday = (dateStr) => {\r\n-    if (!dateStr) return false;\r\n-    const selected = new Date(dateStr);\r\n-    const today = new Date();\r\n-    today.setHours(0, 0, 0, 0);\r\n-    return selected < today;\r\n-  };\r\n-\r\n-  const isHourInPast = (dateStr, hour) => {\r\n-    if (!dateStr) return false;\r\n-    const now = new Date();\r\n-    const selected = new Date(dateStr);\r\n-    selected.setHours(hour, 0, 0, 0);\r\n-    return selected < now;\r\n-  };\r\n-\r\n-  const findEventAtHour = (hour) => {\r\n-    if (!selectedDay) return null;\r\n-    const hourStr = hour === 24 ? '00:00' : formatHour(hour);\r\n-    const prefix = `${selectedDay}T${hourStr}`;\r\n-    return events.find(e => e.date.startsWith(prefix));\r\n-  };\r\n-\r\n-  const validate = () => {\r\n-    const errs = {};\r\n-    if (!formData.name.trim()) errs.name = 'Name is required';\r\n-    if (!formData.phone.trim()) errs.phone = 'Phone is required';\r\n-    else if (!/^\\d{10}$/.test(formData.phone)) errs.phone = 'Phone must be 10 digits';\r\n-    if (!['Point', 'Rappel'].includes(formData.type)) errs.type = 'Invalid type';\r\n-    // Add validation for status (must be confirmed or completed)\r\n-    if (!['CONFIRMED', 'COMPLETED'].includes(formData.status)) errs.status = 'Invalid status';\r\n-    setErrors(errs);\r\n-    return Object.keys(errs).length === 0;\r\n-  };\r\n-\r\n-  // Helper: Can status be modified? Event date/time passed by at least 1 hour?\r\n-  const canModifyStatus = () => {\r\n-    if (!selectedDay || editingHour === null) return false;\r\n-    const eventDate = new Date(selectedDay);\r\n-    eventDate.setHours(editingHour, 0, 0, 0);\r\n-    const now = new Date();\r\n     return now - eventDate >= 60 * 60 * 1000; // 1 hour in ms\r\n   };\r\n \r\n   const handleAddOrUpdate = async () => {\r\n@@ -1054,9 +224,9 @@\n       <NavBar\r\n         email={profile?.email}\r\n         onLogout={() => {\r\n           localStorage.removeItem('token');\r\n-          // redirect if needed\r\n+          red\r\n         }}\r\n       />\r\n       <Container maxWidth=\"lg\" sx={{ mt: 4 }}>\r\n         <Box boxShadow={3} p={2} bgcolor=\"white\" borderRadius={2}>\r\n@@ -1242,5679 +412,4 @@\n       </Dialog>\r\n     </>\r\n   );\r\n }\r\n-import React, { useState, useEffect } from 'react';\r\n-import {\r\n-  Container,\r\n-  Box,\r\n-  Dialog,\r\n-  DialogTitle,\r\n-  DialogContent,\r\n-  DialogActions,\r\n-  Button,\r\n-  TextField,\r\n-  MenuItem,\r\n-  Table,\r\n-  TableHead,\r\n-  TableBody,\r\n-  TableRow,\r\n-  TableCell,\r\n-  Typography,\r\n-  IconButton,\r\n-} from '@mui/material';\r\n-import FullCalendar from '@fullcalendar/react';\r\n-import dayGridPlugin from '@fullcalendar/daygrid';\r\n-import interactionPlugin from '@fullcalendar/interaction';\r\n-import NavBar from '../components/NavBar';\r\n-\r\n-import AddIcon from '@mui/icons-material/Add';\r\n-import EditIcon from '@mui/icons-material/Edit';\r\n-import DeleteIcon from '@mui/icons-material/Delete';\r\n-\r\n-const HOURS = Array.from({ length: 17 }, (_, i) => 8 + i); // 08:00 to 00:00\r\n-\r\n-function formatHour(h) {\r\n-  return h === 24 ? '00:00' : `${h.toString().padStart(2, '0')}:00`;\r\n-}\r\n-\r\n-export default function Dashboard() {\r\n-  const [profile, setProfile] = useState(null);\r\n-  const [events, setEvents] = useState([]);\r\n-  const [selectedDay, setSelectedDay] = useState(null);\r\n-  const [openDayModal, setOpenDayModal] = useState(false);\r\n-\r\n-  const [openEventForm, setOpenEventForm] = useState(false);\r\n-  const [editingHour, setEditingHour] = useState(null);\r\n-  // Added status field with default 'confirmed'\r\n-  const [formData, setFormData] = useState({ name: '', phone: '', type: 'Point', status: 'CONFIRMED' });\r\n-  const [errors, setErrors] = useState({});\r\n-\r\n-  const token = localStorage.getItem('token');\r\n-  const authHeaders = {\r\n-    Authorization: `Bearer ${token}`,\r\n-    'Content-Type': 'application/json',\r\n-  };\r\n-\r\n-  useEffect(() => {\r\n-    if (!token) return;\r\n-\r\n-    fetch('http://localhost:5000/api/admin/profile', { headers: authHeaders })\r\n-      .then(res => (res.ok ? res.json() : Promise.reject()))\r\n-      .then(setProfile)\r\n-      .catch(() => {\r\n-        localStorage.removeItem('token');\r\n-      });\r\n-\r\n-    fetch('http://localhost:5000/api/events', { headers: authHeaders })\r\n-      .then(res => res.json())\r\n-      .then(setEvents)\r\n-      .catch(console.error);\r\n-  }, [token]);\r\n-\r\n-  const isDateBeforeToday = (dateStr) => {\r\n-    if (!dateStr) return false;\r\n-    const selected = new Date(dateStr);\r\n-    const today = new Date();\r\n-    today.setHours(0, 0, 0, 0);\r\n-    return selected < today;\r\n-  };\r\n-\r\n-  const isHourInPast = (dateStr, hour) => {\r\n-    if (!dateStr) return false;\r\n-    const now = new Date();\r\n-    const selected = new Date(dateStr);\r\n-    selected.setHours(hour, 0, 0, 0);\r\n-    return selected < now;\r\n-  };\r\n-\r\n-  const findEventAtHour = (hour) => {\r\n-    if (!selectedDay) return null;\r\n-    const hourStr = hour === 24 ? '00:00' : formatHour(hour);\r\n-    const prefix = `${selectedDay}T${hourStr}`;\r\n-    return events.find(e => e.date.startsWith(prefix));\r\n-  };\r\n-\r\n-  const validate = () => {\r\n-    const errs = {};\r\n-    if (!formData.name.trim()) errs.name = 'Name is required';\r\n-    if (!formData.phone.trim()) errs.phone = 'Phone is required';\r\n-    else if (!/^\\d{10}$/.test(formData.phone)) errs.phone = 'Phone must be 10 digits';\r\n-    if (!['Point', 'Rappel'].includes(formData.type)) errs.type = 'Invalid type';\r\n-    // Add validation for status (must be confirmed or completed)\r\n-    if (!['CONFIRMED', 'COMPLETED'].includes(formData.status)) errs.status = 'Invalid status';\r\n-    setErrors(errs);\r\n-    return Object.keys(errs).length === 0;\r\n-  };\r\n-\r\n-  // Helper: Can status be modified? Event date/time passed by at least 1 hour?\r\n-  const canModifyStatus = () => {\r\n-    if (!selectedDay || editingHour === null) return false;\r\n-    const eventDate = new Date(selectedDay);\r\n-    eventDate.setHours(editingHour, 0, 0, 0);\r\n-    const now = new Date();\r\n-    return now - eventDate >= 60 * 60 * 1000; // 1 hour in ms\r\n-  };\r\n-\r\n-  const handleAddOrUpdate = async () => {\r\n-    if (isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, editingHour)) {\r\n-      alert(\"You can't add or modify events for past date/time.\");\r\n-      return;\r\n-    }\r\n-    if (!validate()) return;\r\n-\r\n-    const hourStr = editingHour === 24 ? '00:00' : formatHour(editingHour);\r\n-    const dateTime = `${selectedDay}T${hourStr}:00`;\r\n-\r\n-    const eventPayload = {\r\n-      title: `${formData.type} - ${formData.name}`,\r\n-      date: dateTime,\r\n-      name: formData.name,\r\n-      phone: formData.phone,\r\n-      type: formData.type,\r\n-      status: formData.status,\r\n-    };\r\n-\r\n-    try {\r\n-      const existingEvent = findEventAtHour(editingHour);\r\n-      if (existingEvent) {\r\n-        const res = await fetch(`http://localhost:5000/api/events/${existingEvent._id}`, {\r\n-          method: 'PUT',\r\n-          headers: authHeaders,\r\n-          body: JSON.stringify(eventPayload),\r\n-        });\r\n-        const updated = await res.json();\r\n-        setEvents(events.map(e => (e._id === updated._id ? updated : e)));\r\n-      } else {\r\n-        const res = await fetch('http://localhost:5000/api/events', {\r\n-          method: 'POST',\r\n-          headers: authHeaders,\r\n-          body: JSON.stringify(eventPayload),\r\n-        });\r\n-        const created = await res.json();\r\n-        setEvents([...events, created]);\r\n-      }\r\n-      setOpenEventForm(false);\r\n-      setEditingHour(null);\r\n-      setFormData({ name: '', phone: '', type: 'Point', status: 'CONFIRMED' });\r\n-      setErrors({});\r\n-    } catch (err) {\r\n-      console.error('Save event failed:', err);\r\n-    }\r\n-  };\r\n-\r\n-  const handleDelete = async (hourToDelete) => {\r\n-    if (isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, hourToDelete)) {\r\n-      alert(\"You can't delete events from past date/time.\");\r\n-      return;\r\n-    }\r\n-    const existingEvent = findEventAtHour(hourToDelete);\r\n-    if (!existingEvent) return;\r\n-\r\n-    try {\r\n-      await fetch(`http://localhost:5000/api/events/${existingEvent._id}`, {\r\n-        method: 'DELETE',\r\n-        headers: authHeaders,\r\n-      });\r\n-      setEvents(events.filter(e => e._id !== existingEvent._id));\r\n-      if (editingHour === hourToDelete) {\r\n-        setOpenEventForm(false);\r\n-        setEditingHour(null);\r\n-        setFormData({ name: '', phone: '', type: 'Point', status: 'CONFIRMED' });\r\n-        setErrors({});\r\n-      }\r\n-    } catch (err) {\r\n-      console.error('Delete event failed:', err);\r\n-    }\r\n-  };\r\n-\r\n-  const startEditing = (hour) => {\r\n-    if (isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, hour)) {\r\n-      alert(\"You can't add or modify events for past date/time.\");\r\n-      return;\r\n-    }\r\n-    const ev = findEventAtHour(hour);\r\n-    if (ev) {\r\n-      setFormData({\r\n-        name: ev.name,\r\n-        phone: ev.phone,\r\n-        type: ev.type,\r\n-        status: ev.status || 'CONFIRMED',\r\n-      });\r\n-    } else {\r\n-      setFormData({ name: '', phone: '', type: 'Point', status: 'CONFIRMED' });\r\n-    }\r\n-    setEditingHour(hour);\r\n-    setErrors({});\r\n-    setOpenEventForm(true);\r\n-  };\r\n-\r\n-  const handleDateClick = (arg) => {\r\n-    const clickedDate = arg.dateStr;\r\n-    const hasEventOnDate = events.some(ev => ev.date.startsWith(clickedDate));\r\n-\r\n-    if (isDateBeforeToday(clickedDate) && !hasEventOnDate) {\r\n-      alert('No events on this past date.');\r\n-      return;\r\n-    }\r\n-\r\n-    setSelectedDay(clickedDate);\r\n-    setOpenDayModal(true);\r\n-    setEditingHour(null);\r\n-    setFormData({ name: '', phone: '', type: 'Point', status: 'CONFIRMED' });\r\n-    setErrors({});\r\n-  };\r\n-\r\n-  return (\r\n-    <>\r\n-      <NavBar\r\n-        email={profile?.email}\r\n-        onLogout={() => {\r\n-          localStorage.removeItem('token');\r\n-          // redirect if needed\r\n-        }}\r\n-      />\r\n-      <Container maxWidth=\"lg\" sx={{ mt: 4 }}>\r\n-        <Box boxShadow={3} p={2} bgcolor=\"white\" borderRadius={2}>\r\n-          <FullCalendar\r\n-            plugins={[dayGridPlugin, interactionPlugin]}\r\n-            initialView=\"dayGridMonth\"\r\n-            selectable={true}\r\n-            events={events}\r\n-            dateClick={handleDateClick}\r\n-          />\r\n-        </Box>\r\n-      </Container>\r\n-\r\n-      <Dialog\r\n-        open={openDayModal}\r\n-        onClose={() => setOpenDayModal(false)}\r\n-        maxWidth=\"lg\"\r\n-        fullWidth\r\n-      >\r\n-        <DialogTitle>Schedule for {selectedDay}</DialogTitle>\r\n-        <DialogContent>\r\n-          <Table>\r\n-            <TableHead>\r\n-              <TableRow>\r\n-                <TableCell>Hour</TableCell>\r\n-                <TableCell>Event Name</TableCell>\r\n-                <TableCell>Customer Name</TableCell>\r\n-                <TableCell>Customer Phone</TableCell>\r\n-                <TableCell>Status</TableCell>\r\n-                <TableCell>Action</TableCell>\r\n-              </TableRow>\r\n-            </TableHead>\r\n-\r\n-            <TableBody>\r\n-              {HOURS.map((hour) => {\r\n-                const ev = findEventAtHour(hour);\r\n-                const isPast = isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, hour);\r\n-\r\n-                return (\r\n-                  <TableRow key={hour}>\r\n-                    <TableCell>{formatHour(hour)}</TableCell>\r\n-                    <TableCell>{ev?.title || ''}</TableCell>\r\n-                    <TableCell>{ev?.name || ''}</TableCell>\r\n-                    <TableCell>{ev?.phone || ''}</TableCell>\r\n-                    <TableCell>{ev?.status || ''}</TableCell>\r\n-                    <TableCell>\r\n-                      {isPast ? (\r\n-                        <>\r\n-                          {ev ? (\r\n-                            <>\r\n-                              <IconButton size=\"small\"  title=\"Modify disabled on past date/time\">\r\n-                                <EditIcon />\r\n-                              </IconButton>\r\n-                              <IconButton size=\"small\" disabled title=\"Delete disabled on past date/time\">\r\n-                                <DeleteIcon />\r\n-                              </IconButton>\r\n-                            </>\r\n-                          ) : (\r\n-                            <IconButton size=\"small\" disabled title=\"Add disabled on past date/time\">\r\n-                              <AddIcon />\r\n-                            </IconButton>\r\n-                          )}\r\n-                        </>\r\n-                      ) : (\r\n-                        <>\r\n-                          <IconButton\r\n-                            color=\"primary\"\r\n-                            size=\"small\"\r\n-                            onClick={() => startEditing(hour)}\r\n-                            title={ev ? 'Modify' : 'Add'}\r\n-                          >\r\n-                            {ev ? <EditIcon /> : <AddIcon />}\r\n-                          </IconButton>\r\n-\r\n-                          {ev && (\r\n-                            <IconButton\r\n-                              color=\"error\"\r\n-                              size=\"small\"\r\n-                              onClick={() => handleDelete(hour)}\r\n-                              title=\"Delete\"\r\n-                            >\r\n-                              <DeleteIcon />\r\n-                            </IconButton>\r\n-                          )}\r\n-                        </>\r\n-                      )}\r\n-                    </TableCell>\r\n-                  </TableRow>\r\n-                );\r\n-              })}\r\n-            </TableBody>\r\n-          </Table>\r\n-        </DialogContent>\r\n-\r\n-        <DialogActions>\r\n-          <Button onClick={() => setOpenDayModal(false)}>Close</Button>\r\n-        </DialogActions>\r\n-      </Dialog>\r\n-\r\n-      <Dialog\r\n-        open={openEventForm}\r\n-        onClose={() => setOpenEventForm(false)}\r\n-        maxWidth=\"sm\"\r\n-        fullWidth\r\n-      >\r\n-        <DialogTitle>\r\n-          {editingHour !== null && findEventAtHour(editingHour)\r\n-            ? 'Modify Event'\r\n-            : 'Add Event'}\r\n-        </DialogTitle>\r\n-        <DialogContent>\r\n-          <Typography variant=\"subtitle1\" gutterBottom>\r\n-            For hour: {editingHour !== null ? formatHour(editingHour) : ''}\r\n-          </Typography>\r\n-\r\n-          <TextField\r\n-            margin=\"dense\"\r\n-            label=\"Customer Name\"\r\n-            fullWidth\r\n-            value={formData.name}\r\n-            onChange={(e) => setFormData({ ...formData, name: e.target.value })}\r\n-            error={!!errors.name}\r\n-            helperText={errors.name}\r\n-          />\r\n-          <TextField\r\n-            margin=\"dense\"\r\n-            label=\"Customer Phone\"\r\n-            fullWidth\r\n-            value={formData.phone}\r\n-            onChange={(e) => setFormData({ ...formData, phone: e.target.value })}\r\n-            error={!!errors.phone}\r\n-            helperText={errors.phone}\r\n-          />\r\n-          <TextField\r\n-            margin=\"dense\"\r\n-            select\r\n-            label=\"Type\"\r\n-            fullWidth\r\n-            value={formData.type}\r\n-            onChange={(e) => setFormData({ ...formData, type: e.target.value })}\r\n-          >\r\n-            <MenuItem value=\"Point\">Point</MenuItem>\r\n-            <MenuItem value=\"Rappel\">Rappel</MenuItem>\r\n-          </TextField>\r\n-\r\n-          {/* Status field only editable if 1 hour passed */}\r\n-          {canModifyStatus() ? (\r\n-            <TextField\r\n-              margin=\"dense\"\r\n-              select\r\n-              label=\"Status\"\r\n-              fullWidth\r\n-              value={formData.status}\r\n-              onChange={(e) => setFormData({ ...formData, status: e.target.value })}\r\n-              error={!!errors.status}\r\n-              helperText={errors.status}\r\n-            >\r\n-              <MenuItem value=\"CONFIRMED\">CONFIRMED</MenuItem>\r\n-              <MenuItem value=\"COMPLETED\">COMPLETED</MenuItem>\r\n-            </TextField>\r\n-          ) : (\r\n-            <Typography\r\n-              variant=\"body2\"\r\n-              color=\"textSecondary\"\r\n-              sx={{ mt: 2, mb: 1 }}\r\n-            >\r\n-              Status can only be modified  one hour after the event time.\r\n-            </Typography>\r\n-          )}\r\n-        </DialogContent>\r\n-\r\n-        <DialogActions>\r\n-          <Button onClick={() => setOpenEventForm(false)}>Cancel</Button>\r\n-          <Button\r\n-            onClick={handleAddOrUpdate}\r\n-            variant=\"contained\"\r\n-            color=\"primary\"\r\n-            disabled={isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, editingHour)}\r\n-          >\r\n-            Save\r\n-          </Button>\r\n-        </DialogActions>\r\n-      </Dialog>\r\n-    </>\r\n-  );\r\n-}\r\n-import React, { useState, useEffect } from 'react';\r\n-import {\r\n-  Container,\r\n-  Box,\r\n-  Dialog,\r\n-  DialogTitle,\r\n-  DialogContent,\r\n-  DialogActions,\r\n-  Button,\r\n-  TextField,\r\n-  MenuItem,\r\n-  Table,\r\n-  TableHead,\r\n-  TableBody,\r\n-  TableRow,\r\n-  TableCell,\r\n-  Typography,\r\n-  IconButton,\r\n-} from '@mui/material';\r\n-import FullCalendar from '@fullcalendar/react';\r\n-import dayGridPlugin from '@fullcalendar/daygrid';\r\n-import interactionPlugin from '@fullcalendar/interaction';\r\n-import NavBar from '../components/NavBar';\r\n-\r\n-import AddIcon from '@mui/icons-material/Add';\r\n-import EditIcon from '@mui/icons-material/Edit';\r\n-import DeleteIcon from '@mui/icons-material/Delete';\r\n-\r\n-const HOURS = Array.from({ length: 17 }, (_, i) => 8 + i); // 08:00 to 00:00\r\n-\r\n-function formatHour(h) {\r\n-  return h === 24 ? '00:00' : `${h.toString().padStart(2, '0')}:00`;\r\n-}\r\n-\r\n-export default function Dashboard() {\r\n-  const [profile, setProfile] = useState(null);\r\n-  const [events, setEvents] = useState([]);\r\n-  const [selectedDay, setSelectedDay] = useState(null);\r\n-  const [openDayModal, setOpenDayModal] = useState(false);\r\n-\r\n-  const [openEventForm, setOpenEventForm] = useState(false);\r\n-  const [editingHour, setEditingHour] = useState(null);\r\n-  // Added status field with default 'confirmed'\r\n-  const [formData, setFormData] = useState({ name: '', phone: '', type: 'Point', status: 'CONFIRMED' });\r\n-  const [errors, setErrors] = useState({});\r\n-\r\n-  const token = localStorage.getItem('token');\r\n-  const authHeaders = {\r\n-    Authorization: `Bearer ${token}`,\r\n-    'Content-Type': 'application/json',\r\n-  };\r\n-\r\n-  useEffect(() => {\r\n-    if (!token) return;\r\n-\r\n-    fetch('http://localhost:5000/api/admin/profile', { headers: authHeaders })\r\n-      .then(res => (res.ok ? res.json() : Promise.reject()))\r\n-      .then(setProfile)\r\n-      .catch(() => {\r\n-        localStorage.removeItem('token');\r\n-      });\r\n-\r\n-    fetch('http://localhost:5000/api/events', { headers: authHeaders })\r\n-      .then(res => res.json())\r\n-      .then(setEvents)\r\n-      .catch(console.error);\r\n-  }, [token]);\r\n-\r\n-  const isDateBeforeToday = (dateStr) => {\r\n-    if (!dateStr) return false;\r\n-    const selected = new Date(dateStr);\r\n-    const today = new Date();\r\n-    today.setHours(0, 0, 0, 0);\r\n-    return selected < today;\r\n-  };\r\n-\r\n-  const isHourInPast = (dateStr, hour) => {\r\n-    if (!dateStr) return false;\r\n-    const now = new Date();\r\n-    const selected = new Date(dateStr);\r\n-    selected.setHours(hour, 0, 0, 0);\r\n-    return selected < now;\r\n-  };\r\n-\r\n-  const findEventAtHour = (hour) => {\r\n-    if (!selectedDay) return null;\r\n-    const hourStr = hour === 24 ? '00:00' : formatHour(hour);\r\n-    const prefix = `${selectedDay}T${hourStr}`;\r\n-    return events.find(e => e.date.startsWith(prefix));\r\n-  };\r\n-\r\n-  const validate = () => {\r\n-    const errs = {};\r\n-    if (!formData.name.trim()) errs.name = 'Name is required';\r\n-    if (!formData.phone.trim()) errs.phone = 'Phone is required';\r\n-    else if (!/^\\d{10}$/.test(formData.phone)) errs.phone = 'Phone must be 10 digits';\r\n-    if (!['Point', 'Rappel'].includes(formData.type)) errs.type = 'Invalid type';\r\n-    // Add validation for status (must be confirmed or completed)\r\n-    if (!['CONFIRMED', 'COMPLETED'].includes(formData.status)) errs.status = 'Invalid status';\r\n-    setErrors(errs);\r\n-    return Object.keys(errs).length === 0;\r\n-  };\r\n-\r\n-  // Helper: Can status be modified? Event date/time passed by at least 1 hour?\r\n-  const canModifyStatus = () => {\r\n-    if (!selectedDay || editingHour === null) return false;\r\n-    const eventDate = new Date(selectedDay);\r\n-    eventDate.setHours(editingHour, 0, 0, 0);\r\n-    const now = new Date();\r\n-    return now - eventDate >= 60 * 60 * 1000; // 1 hour in ms\r\n-  };\r\n-\r\n-  const handleAddOrUpdate = async () => {\r\n-    if (isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, editingHour)) {\r\n-      alert(\"You can't add or modify events for past date/time.\");\r\n-      return;\r\n-    }\r\n-    if (!validate()) return;\r\n-\r\n-    const hourStr = editingHour === 24 ? '00:00' : formatHour(editingHour);\r\n-    const dateTime = `${selectedDay}T${hourStr}:00`;\r\n-\r\n-    const eventPayload = {\r\n-      title: `${formData.type} - ${formData.name}`,\r\n-      date: dateTime,\r\n-      name: formData.name,\r\n-      phone: formData.phone,\r\n-      type: formData.type,\r\n-      status: formData.status,\r\n-    };\r\n-\r\n-    try {\r\n-      const existingEvent = findEventAtHour(editingHour);\r\n-      if (existingEvent) {\r\n-        const res = await fetch(`http://localhost:5000/api/events/${existingEvent._id}`, {\r\n-          method: 'PUT',\r\n-          headers: authHeaders,\r\n-          body: JSON.stringify(eventPayload),\r\n-        });\r\n-        const updated = await res.json();\r\n-        setEvents(events.map(e => (e._id === updated._id ? updated : e)));\r\n-      } else {\r\n-        const res = await fetch('http://localhost:5000/api/events', {\r\n-          method: 'POST',\r\n-          headers: authHeaders,\r\n-          body: JSON.stringify(eventPayload),\r\n-        });\r\n-        const created = await res.json();\r\n-        setEvents([...events, created]);\r\n-      }\r\n-      setOpenEventForm(false);\r\n-      setEditingHour(null);\r\n-      setFormData({ name: '', phone: '', type: 'Point', status: 'CONFIRMED' });\r\n-      setErrors({});\r\n-    } catch (err) {\r\n-      console.error('Save event failed:', err);\r\n-    }\r\n-  };\r\n-\r\n-  const handleDelete = async (hourToDelete) => {\r\n-    if (isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, hourToDelete)) {\r\n-      alert(\"You can't delete events from past date/time.\");\r\n-      return;\r\n-    }\r\n-    const existingEvent = findEventAtHour(hourToDelete);\r\n-    if (!existingEvent) return;\r\n-\r\n-    try {\r\n-      await fetch(`http://localhost:5000/api/events/${existingEvent._id}`, {\r\n-        method: 'DELETE',\r\n-        headers: authHeaders,\r\n-      });\r\n-      setEvents(events.filter(e => e._id !== existingEvent._id));\r\n-      if (editingHour === hourToDelete) {\r\n-        setOpenEventForm(false);\r\n-        setEditingHour(null);\r\n-        setFormData({ name: '', phone: '', type: 'Point', status: 'CONFIRMED' });\r\n-        setErrors({});\r\n-      }\r\n-    } catch (err) {\r\n-      console.error('Delete event failed:', err);\r\n-    }\r\n-  };\r\n-\r\n-  const startEditing = (hour) => {\r\n-    if (isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, hour)) {\r\n-      alert(\"You can't add or modify events for past date/time.\");\r\n-      return;\r\n-    }\r\n-    const ev = findEventAtHour(hour);\r\n-    if (ev) {\r\n-      setFormData({\r\n-        name: ev.name,\r\n-        phone: ev.phone,\r\n-        type: ev.type,\r\n-        status: ev.status || 'CONFIRMED',\r\n-      });\r\n-    } else {\r\n-      setFormData({ name: '', phone: '', type: 'Point', status: 'CONFIRMED' });\r\n-    }\r\n-    setEditingHour(hour);\r\n-    setErrors({});\r\n-    setOpenEventForm(true);\r\n-  };\r\n-\r\n-  const handleDateClick = (arg) => {\r\n-    const clickedDate = arg.dateStr;\r\n-    const hasEventOnDate = events.some(ev => ev.date.startsWith(clickedDate));\r\n-\r\n-    if (isDateBeforeToday(clickedDate) && !hasEventOnDate) {\r\n-      alert('No events on this past date.');\r\n-      return;\r\n-    }\r\n-\r\n-    setSelectedDay(clickedDate);\r\n-    setOpenDayModal(true);\r\n-    setEditingHour(null);\r\n-    setFormData({ name: '', phone: '', type: 'Point', status: 'CONFIRMED' });\r\n-    setErrors({});\r\n-  };\r\n-\r\n-  return (\r\n-    <>\r\n-      <NavBar\r\n-        email={profile?.email}\r\n-        onLogout={() => {\r\n-          localStorage.removeItem('token');\r\n-          // redirect if needed\r\n-        }}\r\n-      />\r\n-      <Container maxWidth=\"lg\" sx={{ mt: 4 }}>\r\n-        <Box boxShadow={3} p={2} bgcolor=\"white\" borderRadius={2}>\r\n-          <FullCalendar\r\n-            plugins={[dayGridPlugin, interactionPlugin]}\r\n-            initialView=\"dayGridMonth\"\r\n-            selectable={true}\r\n-            events={events}\r\n-            dateClick={handleDateClick}\r\n-          />\r\n-        </Box>\r\n-      </Container>\r\n-\r\n-      <Dialog\r\n-        open={openDayModal}\r\n-        onClose={() => setOpenDayModal(false)}\r\n-        maxWidth=\"lg\"\r\n-        fullWidth\r\n-      >\r\n-        <DialogTitle>Schedule for {selectedDay}</DialogTitle>\r\n-        <DialogContent>\r\n-          <Table>\r\n-            <TableHead>\r\n-              <TableRow>\r\n-                <TableCell>Hour</TableCell>\r\n-                <TableCell>Event Name</TableCell>\r\n-                <TableCell>Customer Name</TableCell>\r\n-                <TableCell>Customer Phone</TableCell>\r\n-                <TableCell>Status</TableCell>\r\n-                <TableCell>Action</TableCell>\r\n-              </TableRow>\r\n-            </TableHead>\r\n-\r\n-            <TableBody>\r\n-              {HOURS.map((hour) => {\r\n-                const ev = findEventAtHour(hour);\r\n-                const isPast = isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, hour);\r\n-\r\n-                return (\r\n-                  <TableRow key={hour}>\r\n-                    <TableCell>{formatHour(hour)}</TableCell>\r\n-                    <TableCell>{ev?.title || ''}</TableCell>\r\n-                    <TableCell>{ev?.name || ''}</TableCell>\r\n-                    <TableCell>{ev?.phone || ''}</TableCell>\r\n-                    <TableCell>{ev?.status || ''}</TableCell>\r\n-                    <TableCell>\r\n-                      {isPast ? (\r\n-                        <>\r\n-                          {ev ? (\r\n-                            <>\r\n-                              <IconButton size=\"small\" disabled title=\"Modify disabled on past date/time\">\r\n-                                <EditIcon />\r\n-                              </IconButton>\r\n-                              <IconButton size=\"small\" disabled title=\"Delete disabled on past date/time\">\r\n-                                <DeleteIcon />\r\n-                              </IconButton>\r\n-                            </>\r\n-                          ) : (\r\n-                            <IconButton size=\"small\" disabled title=\"Add disabled on past date/time\">\r\n-                              <AddIcon />\r\n-                            </IconButton>\r\n-                          )}\r\n-                        </>\r\n-                      ) : (\r\n-                        <>\r\n-                          <IconButton\r\n-                            color=\"primary\"\r\n-                            size=\"small\"\r\n-                            onClick={() => startEditing(hour)}\r\n-                            title={ev ? 'Modify' : 'Add'}\r\n-                          >\r\n-                            {ev ? <EditIcon /> : <AddIcon />}\r\n-                          </IconButton>\r\n-\r\n-                          {ev && (\r\n-                            <IconButton\r\n-                              color=\"error\"\r\n-                              size=\"small\"\r\n-                              onClick={() => handleDelete(hour)}\r\n-                              title=\"Delete\"\r\n-                            >\r\n-                              <DeleteIcon />\r\n-                            </IconButton>\r\n-                          )}\r\n-                        </>\r\n-                      )}\r\n-                    </TableCell>\r\n-                  </TableRow>\r\n-                );\r\n-              })}\r\n-            </TableBody>\r\n-          </Table>\r\n-        </DialogContent>\r\n-\r\n-        <DialogActions>\r\n-          <Button onClick={() => setOpenDayModal(false)}>Close</Button>\r\n-        </DialogActions>\r\n-      </Dialog>\r\n-\r\n-      <Dialog\r\n-        open={openEventForm}\r\n-        onClose={() => setOpenEventForm(false)}\r\n-        maxWidth=\"sm\"\r\n-        fullWidth\r\n-      >\r\n-        <DialogTitle>\r\n-          {editingHour !== null && findEventAtHour(editingHour)\r\n-            ? 'Modify Event'\r\n-            : 'Add Event'}\r\n-        </DialogTitle>\r\n-        <DialogContent>\r\n-          <Typography variant=\"subtitle1\" gutterBottom>\r\n-            For hour: {editingHour !== null ? formatHour(editingHour) : ''}\r\n-          </Typography>\r\n-\r\n-          <TextField\r\n-            margin=\"dense\"\r\n-            label=\"Customer Name\"\r\n-            fullWidth\r\n-            value={formData.name}\r\n-            onChange={(e) => setFormData({ ...formData, name: e.target.value })}\r\n-            error={!!errors.name}\r\n-            helperText={errors.name}\r\n-          />\r\n-          <TextField\r\n-            margin=\"dense\"\r\n-            label=\"Customer Phone\"\r\n-            fullWidth\r\n-            value={formData.phone}\r\n-            onChange={(e) => setFormData({ ...formData, phone: e.target.value })}\r\n-            error={!!errors.phone}\r\n-            helperText={errors.phone}\r\n-          />\r\n-          <TextField\r\n-            margin=\"dense\"\r\n-            select\r\n-            label=\"Type\"\r\n-            fullWidth\r\n-            value={formData.type}\r\n-            onChange={(e) => setFormData({ ...formData, type: e.target.value })}\r\n-          >\r\n-            <MenuItem value=\"Point\">Point</MenuItem>\r\n-            <MenuItem value=\"Rappel\">Rappel</MenuItem>\r\n-          </TextField>\r\n-\r\n-          {/* Status field only editable if 1 hour passed */}\r\n-          {canModifyStatus() ? (\r\n-            <TextField\r\n-              margin=\"dense\"\r\n-              select\r\n-              label=\"Status\"\r\n-              fullWidth\r\n-              value={formData.status}\r\n-              onChange={(e) => setFormData({ ...formData, status: e.target.value })}\r\n-              error={!!errors.status}\r\n-              helperText={errors.status}\r\n-            >\r\n-              <MenuItem value=\"CONFIRMED\">CONFIRMED</MenuItem>\r\n-              <MenuItem value=\"COMPLETED\">COMPLETED</MenuItem>\r\n-            </TextField>\r\n-          ) : (\r\n-            <Typography\r\n-              variant=\"body2\"\r\n-              color=\"textSecondary\"\r\n-              sx={{ mt: 2, mb: 1 }}\r\n-            >\r\n-              Status can only be modified  one hour after the event time.\r\n-            </Typography>\r\n-          )}\r\n-        </DialogContent>\r\n-\r\n-        <DialogActions>\r\n-          <Button onClick={() => setOpenEventForm(false)}>Cancel</Button>\r\n-          <Button\r\n-            onClick={handleAddOrUpdate}\r\n-            variant=\"contained\"\r\n-            color=\"primary\"\r\n-            disabled={isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, editingHour)}\r\n-          >\r\n-            Save\r\n-          </Button>\r\n-        </DialogActions>\r\n-      </Dialog>\r\n-    </>\r\n-  );\r\n-}\r\n-import React, { useState, useEffect } from 'react';\r\n-import {\r\n-  Container,\r\n-  Box,\r\n-  Dialog,\r\n-  DialogTitle,\r\n-  DialogContent,\r\n-  DialogActions,\r\n-  Button,\r\n-  TextField,\r\n-  MenuItem,\r\n-  Table,\r\n-  TableHead,\r\n-  TableBody,\r\n-  TableRow,\r\n-  TableCell,\r\n-  Typography,\r\n-  IconButton,\r\n-} from '@mui/material';\r\n-import FullCalendar from '@fullcalendar/react';\r\n-import dayGridPlugin from '@fullcalendar/daygrid';\r\n-import interactionPlugin from '@fullcalendar/interaction';\r\n-import NavBar from '../components/NavBar';\r\n-\r\n-import AddIcon from '@mui/icons-material/Add';\r\n-import EditIcon from '@mui/icons-material/Edit';\r\n-import DeleteIcon from '@mui/icons-material/Delete';\r\n-\r\n-const HOURS = Array.from({ length: 17 }, (_, i) => 8 + i); // 08:00 to 00:00\r\n-\r\n-function formatHour(h) {\r\n-  return h === 24 ? '00:00' : `${h.toString().padStart(2, '0')}:00`;\r\n-}\r\n-\r\n-export default function Dashboard() {\r\n-  const [profile, setProfile] = useState(null);\r\n-  const [events, setEvents] = useState([]);\r\n-  const [selectedDay, setSelectedDay] = useState(null);\r\n-  const [openDayModal, setOpenDayModal] = useState(false);\r\n-\r\n-  const [openEventForm, setOpenEventForm] = useState(false);\r\n-  const [editingHour, setEditingHour] = useState(null);\r\n-  const [formData, setFormData] = useState({ name: '', phone: '', type: 'Point', status: 'CONFIRMED' });\r\n-  const [errors, setErrors] = useState({});\r\n-\r\n-  const token = localStorage.getItem('token');\r\n-  const authHeaders = {\r\n-    Authorization: `Bearer ${token}`,\r\n-    'Content-Type': 'application/json',\r\n-  };\r\n-\r\n-  useEffect(() => {\r\n-    if (!token) return;\r\n-\r\n-    fetch('http://localhost:5000/api/admin/profile', { headers: authHeaders })\r\n-      .then(res => res.ok ? res.json() : Promise.reject())\r\n-      .then(setProfile)\r\n-      .catch(() => localStorage.removeItem('token'));\r\n-\r\n-    fetch('http://localhost:5000/api/events', { headers: authHeaders })\r\n-      .then(res => res.json())\r\n-      .then(setEvents)\r\n-      .catch(console.error);\r\n-  }, [token]);\r\n-\r\n-  const isDateBeforeToday = (dateStr) => {\r\n-    const d = new Date(dateStr);\r\n-    const today = new Date();\r\n-    today.setHours(0, 0, 0, 0);\r\n-    return d < today;\r\n-  };\r\n-\r\n-  const isHourInPast = (dateStr, hour) => {\r\n-    const now = new Date();\r\n-    const selected = new Date(dateStr);\r\n-    selected.setHours(hour, 0, 0, 0);\r\n-    return selected < now;\r\n-  };\r\n-\r\n-  const isPastEvent = () => {\r\n-    return isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, editingHour);\r\n-  };\r\n-\r\n-  const canModifyStatus = () => {\r\n-    if (!selectedDay || editingHour === null) return false;\r\n-    const eventDate = new Date(selectedDay);\r\n-    eventDate.setHours(editingHour, 0, 0, 0);\r\n-    return new Date() - eventDate >= 3600000; // 1 hour = 3600000 ms\r\n-  };\r\n-\r\n-  const findEventAtHour = (hour) => {\r\n-    const hourStr = formatHour(hour);\r\n-    return events.find(e => e.date.startsWith(`${selectedDay}T${hourStr}`));\r\n-  };\r\n-\r\n-  const validate = () => {\r\n-    const errs = {};\r\n-    if (!['CONFIRMED', 'COMPLETED', 'CANCELLED'].includes(formData.status)) {\r\n-      errs.status = 'Invalid status';\r\n-    }\r\n-    if (!isPastEvent()) {\r\n-      if (!formData.name.trim()) errs.name = 'Name is required';\r\n-      if (!/^\\d{10}$/.test(formData.phone)) errs.phone = 'Phone must be 10 digits';\r\n-    }\r\n-    setErrors(errs);\r\n-    return Object.keys(errs).length === 0;\r\n-  };\r\n-\r\n-  const handleAddOrUpdate = async () => {\r\n-    if (!validate()) return;\r\n-\r\n-    const hourStr = formatHour(editingHour);\r\n-    const dateTime = `${selectedDay}T${hourStr}:00`;\r\n-    const existingEvent = findEventAtHour(editingHour);\r\n-\r\n-    const eventPayload = isPastEvent()\r\n-      ? { status: formData.status }\r\n-      : {\r\n-          title: `${formData.type} - ${formData.name}`,\r\n-          date: dateTime,\r\n-          name: formData.name,\r\n-          phone: formData.phone,\r\n-          type: formData.type,\r\n-          status: formData.status,\r\n-        };\r\n-\r\n-    try {\r\n-      const res = await fetch(\r\n-        `http://localhost:5000/api/events/${existingEvent ? existingEvent._id : ''}`,\r\n-        {\r\n-          method: existingEvent ? 'PUT' : 'POST',\r\n-          headers: authHeaders,\r\n-          body: JSON.stringify(eventPayload),\r\n-        }\r\n-      );\r\n-      const updated = await res.json();\r\n-      if (existingEvent) {\r\n-        setEvents(events.map(e => (e._id === updated._id ? updated : e)));\r\n-      } else {\r\n-        setEvents([...events, updated]);\r\n-      }\r\n-      setOpenEventForm(false);\r\n-      setEditingHour(null);\r\n-      setFormData({ name: '', phone: '', type: 'Point', status: 'CONFIRMED' });\r\n-      setErrors({});\r\n-    } catch (err) {\r\n-      console.error('Save event failed:', err);\r\n-    }\r\n-  };\r\n-\r\n-  const handleDelete = async (hourToDelete) => {\r\n-    if (isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, hourToDelete)) {\r\n-      alert(\"You can't delete events from past date/time.\");\r\n-      return;\r\n-    }\r\n-    const existingEvent = findEventAtHour(hourToDelete);\r\n-    if (!existingEvent) return;\r\n-\r\n-    try {\r\n-      await fetch(`http://localhost:5000/api/events/${existingEvent._id}`, {\r\n-        method: 'DELETE',\r\n-        headers: authHeaders,\r\n-      });\r\n-      setEvents(events.filter(e => e._id !== existingEvent._id));\r\n-    } catch (err) {\r\n-      console.error('Delete event failed:', err);\r\n-    }\r\n-  };\r\n-\r\n-  const startEditing = (hour) => {\r\n-    const ev = findEventAtHour(hour);\r\n-    setFormData({\r\n-      name: ev?.name || '',\r\n-      phone: ev?.phone || '',\r\n-      type: ev?.type || 'Point',\r\n-      status: ev?.status || 'CONFIRMED',\r\n-    });\r\n-    setEditingHour(hour);\r\n-    setErrors({});\r\n-    setOpenEventForm(true);\r\n-  };\r\n-\r\n-  const handleDateClick = (arg) => {\r\n-    const clickedDate = arg.dateStr;\r\n-    setSelectedDay(clickedDate);\r\n-    setOpenDayModal(true);\r\n-    setEditingHour(null);\r\n-    setFormData({ name: '', phone: '', type: 'Point', status: 'CONFIRMED' });\r\n-    setErrors({});\r\n-  };\r\n-\r\n-  return (\r\n-    <>\r\n-      <NavBar email={profile?.email} onLogout={() => localStorage.removeItem('token')} />\r\n-      <Container maxWidth=\"lg\" sx={{ mt: 4 }}>\r\n-        <Box boxShadow={3} p={2} bgcolor=\"white\" borderRadius={2}>\r\n-          <FullCalendar\r\n-            plugins={[dayGridPlugin, interactionPlugin]}\r\n-            initialView=\"dayGridMonth\"\r\n-            selectable={true}\r\n-            events={events}\r\n-            dateClick={handleDateClick}\r\n-          />\r\n-        </Box>\r\n-      </Container>\r\n-\r\n-      <Dialog open={openEventForm} onClose={() => setOpenEventForm(false)} maxWidth=\"sm\" fullWidth>\r\n-        <DialogTitle>{editingHour !== null && findEventAtHour(editingHour) ? 'Modify Event' : 'Add Event'}</DialogTitle>\r\n-        <DialogContent>\r\n-          <Typography variant=\"subtitle1\" gutterBottom>\r\n-            For hour: {editingHour !== null ? formatHour(editingHour) : ''}\r\n-          </Typography>\r\n-\r\n-          <TextField\r\n-            margin=\"dense\"\r\n-            label=\"Customer Name\"\r\n-            fullWidth\r\n-            value={formData.name}\r\n-            onChange={(e) => setFormData({ ...formData, name: e.target.value })}\r\n-            error={!!errors.name}\r\n-            helperText={errors.name}\r\n-            InputProps={{ readOnly: isPastEvent() }}\r\n-          />\r\n-\r\n-          <TextField\r\n-            margin=\"dense\"\r\n-            label=\"Customer Phone\"\r\n-            fullWidth\r\n-            value={formData.phone}\r\n-            onChange={(e) => setFormData({ ...formData, phone: e.target.value })}\r\n-            error={!!errors.phone}\r\n-            helperText={errors.phone}\r\n-            InputProps={{ readOnly: isPastEvent() }}\r\n-          />\r\n-\r\n-          <TextField\r\n-            margin=\"dense\"\r\n-            select\r\n-            label=\"Type\"\r\n-            fullWidth\r\n-            value={formData.type}\r\n-            onChange={(e) => setFormData({ ...formData, type: e.target.value })}\r\n-            InputProps={{ readOnly: isPastEvent() }}\r\n-          >\r\n-            <MenuItem value=\"Point\">Point</MenuItem>\r\n-            <MenuItem value=\"Rappel\">Rappel</MenuItem>\r\n-          </TextField>\r\n-\r\n-          {canModifyStatus() ? (\r\n-            <TextField\r\n-              margin=\"dense\"\r\n-              select\r\n-              label=\"Status\"\r\n-              fullWidth\r\n-              value={formData.status}\r\n-              onChange={(e) => setFormData({ ...formData, status: e.target.value })}\r\n-              error={!!errors.status}\r\n-              helperText={errors.status}\r\n-            >\r\n-              <MenuItem value=\"CONFIRMED\">CONFIRMED</MenuItem>\r\n-              <MenuItem value=\"COMPLETED\">COMPLETED</MenuItem>\r\n-              <MenuItem value=\"CANCELLED\">CANCELLED</MenuItem>\r\n-            </TextField>\r\n-          ) : (\r\n-            <Typography variant=\"body2\" color=\"textSecondary\">\r\n-              Status editable 1 hour after event only.\r\n-            </Typography>\r\n-          )}\r\n-        </DialogContent>\r\n-\r\n-        <DialogActions>\r\n-          <Button onClick={() => setOpenEventForm(false)}>Cancel</Button>\r\n-          <Button onClick={handleAddOrUpdate} variant=\"contained\" color=\"primary\">\r\n-            Save\r\n-          </Button>\r\n-        </DialogActions>\r\n-      </Dialog>\r\n-    </>\r\n-  );\r\n-}\r\n-import React, { useState, useEffect } from 'react';\r\n-import {\r\n-  Container,\r\n-  Box,\r\n-  Dialog,\r\n-  DialogTitle,\r\n-  DialogContent,\r\n-  DialogActions,\r\n-  Button,\r\n-  TextField,\r\n-  MenuItem,\r\n-  Table,\r\n-  TableHead,\r\n-  TableBody,\r\n-  TableRow,\r\n-  TableCell,\r\n-  Typography,\r\n-  IconButton,\r\n-} from '@mui/material';\r\n-import FullCalendar from '@fullcalendar/react';\r\n-import dayGridPlugin from '@fullcalendar/daygrid';\r\n-import interactionPlugin from '@fullcalendar/interaction';\r\n-import NavBar from '../components/NavBar';\r\n-\r\n-import AddIcon from '@mui/icons-material/Add';\r\n-import EditIcon from '@mui/icons-material/Edit';\r\n-import DeleteIcon from '@mui/icons-material/Delete';\r\n-\r\n-const HOURS = Array.from({ length: 17 }, (_, i) => 8 + i); // 08:00 to 00:00\r\n-\r\n-function formatHour(h) {\r\n-  return h === 24 ? '00:00' : `${h.toString().padStart(2, '0')}:00`;\r\n-}\r\n-\r\n-export default function Dashboard() {\r\n-  const [profile, setProfile] = useState(null);\r\n-  const [events, setEvents] = useState([]);\r\n-  const [selectedDay, setSelectedDay] = useState(null);\r\n-  const [openDayModal, setOpenDayModal] = useState(false);\r\n-\r\n-  const [openEventForm, setOpenEventForm] = useState(false);\r\n-  const [editingHour, setEditingHour] = useState(null);\r\n-  // Added status field with default 'confirmed'\r\n-  const [formData, setFormData] = useState({ name: '', phone: '', type: 'Point', status: 'CONFIRMED' });\r\n-  const [errors, setErrors] = useState({});\r\n-\r\n-  const token = localStorage.getItem('token');\r\n-  const authHeaders = {\r\n-    Authorization: `Bearer ${token}`,\r\n-    'Content-Type': 'application/json',\r\n-  };\r\n-\r\n-  useEffect(() => {\r\n-    if (!token) return;\r\n-\r\n-    fetch('http://localhost:5000/api/admin/profile', { headers: authHeaders })\r\n-      .then(res => (res.ok ? res.json() : Promise.reject()))\r\n-      .then(setProfile)\r\n-      .catch(() => {\r\n-        localStorage.removeItem('token');\r\n-      });\r\n-\r\n-    fetch('http://localhost:5000/api/events', { headers: authHeaders })\r\n-      .then(res => res.json())\r\n-      .then(setEvents)\r\n-      .catch(console.error);\r\n-  }, [token]);\r\n-\r\n-  const isDateBeforeToday = (dateStr) => {\r\n-    if (!dateStr) return false;\r\n-    const selected = new Date(dateStr);\r\n-    const today = new Date();\r\n-    today.setHours(0, 0, 0, 0);\r\n-    return selected < today;\r\n-  };\r\n-\r\n-  const isHourInPast = (dateStr, hour) => {\r\n-    if (!dateStr) return false;\r\n-    const now = new Date();\r\n-    const selected = new Date(dateStr);\r\n-    selected.setHours(hour, 0, 0, 0);\r\n-    return selected < now;\r\n-  };\r\n-\r\n-  const findEventAtHour = (hour) => {\r\n-    if (!selectedDay) return null;\r\n-    const hourStr = hour === 24 ? '00:00' : formatHour(hour);\r\n-    const prefix = `${selectedDay}T${hourStr}`;\r\n-    return events.find(e => e.date.startsWith(prefix));\r\n-  };\r\n-\r\n-  const validate = () => {\r\n-    const errs = {};\r\n-    if (!formData.name.trim()) errs.name = 'Name is required';\r\n-    if (!formData.phone.trim()) errs.phone = 'Phone is required';\r\n-    else if (!/^\\d{10}$/.test(formData.phone)) errs.phone = 'Phone must be 10 digits';\r\n-    if (!['Point', 'Rappel'].includes(formData.type)) errs.type = 'Invalid type';\r\n-    // Add validation for status (must be confirmed or completed)\r\n-    if (!['CONFIRMED', 'COMPLETED'].includes(formData.status)) errs.status = 'Invalid status';\r\n-    setErrors(errs);\r\n-    return Object.keys(errs).length === 0;\r\n-  };\r\n-\r\n-  // Helper: Can status be modified? Event date/time passed by at least 1 hour?\r\n-  const canModifyStatus = () => {\r\n-    if (!selectedDay || editingHour === null) return false;\r\n-    const eventDate = new Date(selectedDay);\r\n-    eventDate.setHours(editingHour, 0, 0, 0);\r\n-    const now = new Date();\r\n-    return now - eventDate >= 60 * 60 * 1000; // 1 hour in ms\r\n-  };\r\n-\r\n-  const handleAddOrUpdate = async () => {\r\n-    if (isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, editingHour)) {\r\n-      alert(\"You can't add or modify events for past date/time.\");\r\n-      return;\r\n-    }\r\n-    if (!validate()) return;\r\n-\r\n-    const hourStr = editingHour === 24 ? '00:00' : formatHour(editingHour);\r\n-    const dateTime = `${selectedDay}T${hourStr}:00`;\r\n-\r\n-    const eventPayload = {\r\n-      title: `${formData.type} - ${formData.name}`,\r\n-      date: dateTime,\r\n-      name: formData.name,\r\n-      phone: formData.phone,\r\n-      type: formData.type,\r\n-      status: formData.status,\r\n-    };\r\n-\r\n-    try {\r\n-      const existingEvent = findEventAtHour(editingHour);\r\n-      if (existingEvent) {\r\n-        const res = await fetch(`http://localhost:5000/api/events/${existingEvent._id}`, {\r\n-          method: 'PUT',\r\n-          headers: authHeaders,\r\n-          body: JSON.stringify(eventPayload),\r\n-        });\r\n-        const updated = await res.json();\r\n-        setEvents(events.map(e => (e._id === updated._id ? updated : e)));\r\n-      } else {\r\n-        const res = await fetch('http://localhost:5000/api/events', {\r\n-          method: 'POST',\r\n-          headers: authHeaders,\r\n-          body: JSON.stringify(eventPayload),\r\n-        });\r\n-        const created = await res.json();\r\n-        setEvents([...events, created]);\r\n-      }\r\n-      setOpenEventForm(false);\r\n-      setEditingHour(null);\r\n-      setFormData({ name: '', phone: '', type: 'Point', status: 'CONFIRMED' });\r\n-      setErrors({});\r\n-    } catch (err) {\r\n-      console.error('Save event failed:', err);\r\n-    }\r\n-  };\r\n-\r\n-  const handleDelete = async (hourToDelete) => {\r\n-    if (isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, hourToDelete)) {\r\n-      alert(\"You can't delete events from past date/time.\");\r\n-      return;\r\n-    }\r\n-    const existingEvent = findEventAtHour(hourToDelete);\r\n-    if (!existingEvent) return;\r\n-\r\n-    try {\r\n-      await fetch(`http://localhost:5000/api/events/${existingEvent._id}`, {\r\n-        method: 'DELETE',\r\n-        headers: authHeaders,\r\n-      });\r\n-      setEvents(events.filter(e => e._id !== existingEvent._id));\r\n-      if (editingHour === hourToDelete) {\r\n-        setOpenEventForm(false);\r\n-        setEditingHour(null);\r\n-        setFormData({ name: '', phone: '', type: 'Point', status: 'CONFIRMED' });\r\n-        setErrors({});\r\n-      }\r\n-    } catch (err) {\r\n-      console.error('Delete event failed:', err);\r\n-    }\r\n-  };\r\n-\r\n-  const startEditing = (hour) => {\r\n-    if (isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, hour)) {\r\n-      alert(\"You can't add or modify events for past date/time.\");\r\n-      return;\r\n-    }\r\n-    const ev = findEventAtHour(hour);\r\n-    if (ev) {\r\n-      setFormData({\r\n-        name: ev.name,\r\n-        phone: ev.phone,\r\n-        type: ev.type,\r\n-        status: ev.status || 'CONFIRMED',\r\n-      });\r\n-    } else {\r\n-      setFormData({ name: '', phone: '', type: 'Point', status: 'CONFIRMED' });\r\n-    }\r\n-    setEditingHour(hour);\r\n-    setErrors({});\r\n-    setOpenEventForm(true);\r\n-  };\r\n-\r\n-  const handleDateClick = (arg) => {\r\n-    const clickedDate = arg.dateStr;\r\n-    const hasEventOnDate = events.some(ev => ev.date.startsWith(clickedDate));\r\n-\r\n-    if (isDateBeforeToday(clickedDate) && !hasEventOnDate) {\r\n-      alert('No events on this past date.');\r\n-      return;\r\n-    }\r\n-\r\n-    setSelectedDay(clickedDate);\r\n-    setOpenDayModal(true);\r\n-    setEditingHour(null);\r\n-    setFormData({ name: '', phone: '', type: 'Point', status: 'CONFIRMED' });\r\n-    setErrors({});\r\n-  };\r\n-\r\n-  return (\r\n-    <>\r\n-      <NavBar\r\n-        email={profile?.email}\r\n-        onLogout={() => {\r\n-          localStorage.removeItem('token');\r\n-          // redirect if needed\r\n-        }}\r\n-      />\r\n-      <Container maxWidth=\"lg\" sx={{ mt: 4 }}>\r\n-        <Box boxShadow={3} p={2} bgcolor=\"white\" borderRadius={2}>\r\n-          <FullCalendar\r\n-            plugins={[dayGridPlugin, interactionPlugin]}\r\n-            initialView=\"dayGridMonth\"\r\n-            selectable={true}\r\n-            events={events}\r\n-            dateClick={handleDateClick}\r\n-          />\r\n-        </Box>\r\n-      </Container>\r\n-\r\n-      <Dialog\r\n-        open={openDayModal}\r\n-        onClose={() => setOpenDayModal(false)}\r\n-        maxWidth=\"lg\"\r\n-        fullWidth\r\n-      >\r\n-        <DialogTitle>Schedule for {selectedDay}</DialogTitle>\r\n-        <DialogContent>\r\n-          <Table>\r\n-            <TableHead>\r\n-              <TableRow>\r\n-                <TableCell>Hour</TableCell>\r\n-                <TableCell>Event Name</TableCell>\r\n-                <TableCell>Customer Name</TableCell>\r\n-                <TableCell>Customer Phone</TableCell>\r\n-                <TableCell>Status</TableCell>\r\n-                <TableCell>Action</TableCell>\r\n-              </TableRow>\r\n-            </TableHead>\r\n-\r\n-            <TableBody>\r\n-              {HOURS.map((hour) => {\r\n-                const ev = findEventAtHour(hour);\r\n-                const isPast = isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, hour);\r\n-\r\n-                return (\r\n-                  <TableRow key={hour}>\r\n-                    <TableCell>{formatHour(hour)}</TableCell>\r\n-                    <TableCell>{ev?.title || ''}</TableCell>\r\n-                    <TableCell>{ev?.name || ''}</TableCell>\r\n-                    <TableCell>{ev?.phone || ''}</TableCell>\r\n-                    <TableCell>{ev?.status || ''}</TableCell>\r\n-                    <TableCell>\r\n-                      {isPast ? (\r\n-                        <>\r\n-                          {ev ? (\r\n-                            <>\r\n-                              <IconButton size=\"small\" disabled title=\"Modify disabled on past date/time\">\r\n-                                <EditIcon />\r\n-                              </IconButton>\r\n-                              <IconButton size=\"small\" disabled title=\"Delete disabled on past date/time\">\r\n-                                <DeleteIcon />\r\n-                              </IconButton>\r\n-                            </>\r\n-                          ) : (\r\n-                            <IconButton size=\"small\" disabled title=\"Add disabled on past date/time\">\r\n-                              <AddIcon />\r\n-                            </IconButton>\r\n-                          )}\r\n-                        </>\r\n-                      ) : (\r\n-                        <>\r\n-                          <IconButton\r\n-                            color=\"primary\"\r\n-                            size=\"small\"\r\n-                            onClick={() => startEditing(hour)}\r\n-                            title={ev ? 'Modify' : 'Add'}\r\n-                          >\r\n-                            {ev ? <EditIcon /> : <AddIcon />}\r\n-                          </IconButton>\r\n-\r\n-                          {ev && (\r\n-                            <IconButton\r\n-                              color=\"error\"\r\n-                              size=\"small\"\r\n-                              onClick={() => handleDelete(hour)}\r\n-                              title=\"Delete\"\r\n-                            >\r\n-                              <DeleteIcon />\r\n-                            </IconButton>\r\n-                          )}\r\n-                        </>\r\n-                      )}\r\n-                    </TableCell>\r\n-                  </TableRow>\r\n-                );\r\n-              })}\r\n-            </TableBody>\r\n-          </Table>\r\n-        </DialogContent>\r\n-\r\n-        <DialogActions>\r\n-          <Button onClick={() => setOpenDayModal(false)}>Close</Button>\r\n-        </DialogActions>\r\n-      </Dialog>\r\n-\r\n-      <Dialog\r\n-        open={openEventForm}\r\n-        onClose={() => setOpenEventForm(false)}\r\n-        maxWidth=\"sm\"\r\n-        fullWidth\r\n-      >\r\n-        <DialogTitle>\r\n-          {editingHour !== null && findEventAtHour(editingHour)\r\n-            ? 'Modify Event'\r\n-            : 'Add Event'}\r\n-        </DialogTitle>\r\n-        <DialogContent>\r\n-          <Typography variant=\"subtitle1\" gutterBottom>\r\n-            For hour: {editingHour !== null ? formatHour(editingHour) : ''}\r\n-          </Typography>\r\n-\r\n-          <TextField\r\n-            margin=\"dense\"\r\n-            label=\"Customer Name\"\r\n-            fullWidth\r\n-            value={formData.name}\r\n-            onChange={(e) => setFormData({ ...formData, name: e.target.value })}\r\n-            error={!!errors.name}\r\n-            helperText={errors.name}\r\n-          />\r\n-          <TextField\r\n-            margin=\"dense\"\r\n-            label=\"Customer Phone\"\r\n-            fullWidth\r\n-            value={formData.phone}\r\n-            onChange={(e) => setFormData({ ...formData, phone: e.target.value })}\r\n-            error={!!errors.phone}\r\n-            helperText={errors.phone}\r\n-          />\r\n-          <TextField\r\n-            margin=\"dense\"\r\n-            select\r\n-            label=\"Type\"\r\n-            fullWidth\r\n-            value={formData.type}\r\n-            onChange={(e) => setFormData({ ...formData, type: e.target.value })}\r\n-          >\r\n-            <MenuItem value=\"Point\">Point</MenuItem>\r\n-            <MenuItem value=\"Rappel\">Rappel</MenuItem>\r\n-          </TextField>\r\n-\r\n-          {/* Status field only editable if 1 hour passed */}\r\n-          {canModifyStatus() ? (\r\n-            <TextField\r\n-              margin=\"dense\"\r\n-              select\r\n-              label=\"Status\"\r\n-              fullWidth\r\n-              value={formData.status}\r\n-              onChange={(e) => setFormData({ ...formData, status: e.target.value })}\r\n-              error={!!errors.status}\r\n-              helperText={errors.status}\r\n-            >\r\n-              <MenuItem value=\"CONFIRMED\">CONFIRMED</MenuItem>\r\n-              <MenuItem value=\"COMPLETED\">COMPLETED</MenuItem>\r\n-            </TextField>\r\n-          ) : (\r\n-            <Typography\r\n-              variant=\"body2\"\r\n-              color=\"textSecondary\"\r\n-              sx={{ mt: 2, mb: 1 }}\r\n-            >\r\n-              Status can only be modified  one hour after the event time.\r\n-            </Typography>\r\n-          )}\r\n-        </DialogContent>\r\n-\r\n-        <DialogActions>\r\n-          <Button onClick={() => setOpenEventForm(false)}>Cancel</Button>\r\n-          <Button\r\n-            onClick={handleAddOrUpdate}\r\n-            variant=\"contained\"\r\n-            color=\"primary\"\r\n-            disabled={isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, editingHour)}\r\n-          >\r\n-            Save\r\n-          </Button>\r\n-        </DialogActions>\r\n-      </Dialog>\r\n-    </>\r\n-  );\r\n-}\r\n-import React, { useState, useEffect } from 'react';\r\n-import {\r\n-  Container,\r\n-  Box,\r\n-  Dialog,\r\n-  DialogTitle,\r\n-  DialogContent,\r\n-  DialogActions,\r\n-  Button,\r\n-  TextField,\r\n-  MenuItem,\r\n-  Table,\r\n-  TableHead,\r\n-  TableBody,\r\n-  TableRow,\r\n-  TableCell,\r\n-  Typography,\r\n-  IconButton,\r\n-} from '@mui/material';\r\n-import FullCalendar from '@fullcalendar/react';\r\n-import dayGridPlugin from '@fullcalendar/daygrid';\r\n-import interactionPlugin from '@fullcalendar/interaction';\r\n-import NavBar from '../components/NavBar';\r\n-\r\n-import AddIcon from '@mui/icons-material/Add';\r\n-import EditIcon from '@mui/icons-material/Edit';\r\n-import DeleteIcon from '@mui/icons-material/Delete';\r\n-\r\n-const HOURS = Array.from({ length: 17 }, (_, i) => 8 + i); // 08:00 to 00:00\r\n-\r\n-function formatHour(h) {\r\n-  return h === 24 ? '00:00' : `${h.toString().padStart(2, '0')}:00`;\r\n-}\r\n-\r\n-export default function Dashboard() {\r\n-  const [profile, setProfile] = useState(null);\r\n-  const [events, setEvents] = useState([]);\r\n-  const [selectedDay, setSelectedDay] = useState(null);\r\n-  const [openDayModal, setOpenDayModal] = useState(false);\r\n-\r\n-  const [openEventForm, setOpenEventForm] = useState(false);\r\n-  const [editingHour, setEditingHour] = useState(null);\r\n-  // Added status field with default 'confirmed'\r\n-  const [formData, setFormData] = useState({ name: '', phone: '', type: 'Point', status: 'CONFIRMED' });\r\n-  const [errors, setErrors] = useState({});\r\n-\r\n-  const token = localStorage.getItem('token');\r\n-  const authHeaders = {\r\n-    Authorization: `Bearer ${token}`,\r\n-    'Content-Type': 'application/json',\r\n-  };\r\n-\r\n-  useEffect(() => {\r\n-    if (!token) return;\r\n-\r\n-    fetch('http://localhost:5000/api/admin/profile', { headers: authHeaders })\r\n-      .then(res => (res.ok ? res.json() : Promise.reject()))\r\n-      .then(setProfile)\r\n-      .catch(() => {\r\n-        localStorage.removeItem('token');\r\n-      });\r\n-\r\n-    fetch('http://localhost:5000/api/events', { headers: authHeaders })\r\n-      .then(res => res.json())\r\n-      .then(setEvents)\r\n-      .catch(console.error);\r\n-  }, [token]);\r\n-\r\n-  const isDateBeforeToday = (dateStr) => {\r\n-    if (!dateStr) return false;\r\n-    const selected = new Date(dateStr);\r\n-    const today = new Date();\r\n-    today.setHours(0, 0, 0, 0);\r\n-    return selected < today;\r\n-  };\r\n-\r\n-  const isHourInPast = (dateStr, hour) => {\r\n-    if (!dateStr) return false;\r\n-    const now = new Date();\r\n-    const selected = new Date(dateStr);\r\n-    selected.setHours(hour, 0, 0, 0);\r\n-    return selected < now;\r\n-  };\r\n-\r\n-  const findEventAtHour = (hour) => {\r\n-    if (!selectedDay) return null;\r\n-    const hourStr = hour === 24 ? '00:00' : formatHour(hour);\r\n-    const prefix = `${selectedDay}T${hourStr}`;\r\n-    return events.find(e => e.date.startsWith(prefix));\r\n-  };\r\n-\r\n-  const validate = () => {\r\n-    const errs = {};\r\n-    if (!formData.name.trim()) errs.name = 'Name is required';\r\n-    if (!formData.phone.trim()) errs.phone = 'Phone is required';\r\n-    else if (!/^\\d{10}$/.test(formData.phone)) errs.phone = 'Phone must be 10 digits';\r\n-    if (!['Point', 'Rappel'].includes(formData.type)) errs.type = 'Invalid type';\r\n-    // Add validation for status (must be confirmed or completed)\r\n-    if (!['CONFIRMED', 'COMPLETED'].includes(formData.status)) errs.status = 'Invalid status';\r\n-    setErrors(errs);\r\n-    return Object.keys(errs).length === 0;\r\n-  };\r\n-\r\n-  // Helper: Can status be modified? Event date/time passed by at least 1 hour?\r\n-  const canModifyStatus = () => {\r\n-    if (!selectedDay || editingHour === null) return false;\r\n-    const eventDate = new Date(selectedDay);\r\n-    eventDate.setHours(editingHour, 0, 0, 0);\r\n-    const now = new Date();\r\n-    return now - eventDate >= 60 * 60 * 1000; // 1 hour in ms\r\n-  };\r\n-\r\n-  const handleAddOrUpdate = async () => {\r\n-    if (isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, editingHour)) {\r\n-      alert(\"You can't add or modify events for past date/time.\");\r\n-      return;\r\n-    }\r\n-    if (!validate()) return;\r\n-\r\n-    const hourStr = editingHour === 24 ? '00:00' : formatHour(editingHour);\r\n-    const dateTime = `${selectedDay}T${hourStr}:00`;\r\n-\r\n-    const eventPayload = {\r\n-      title: `${formData.type} - ${formData.name}`,\r\n-      date: dateTime,\r\n-      name: formData.name,\r\n-      phone: formData.phone,\r\n-      type: formData.type,\r\n-      status: formData.status,\r\n-    };\r\n-\r\n-    try {\r\n-      const existingEvent = findEventAtHour(editingHour);\r\n-      if (existingEvent) {\r\n-        const res = await fetch(`http://localhost:5000/api/events/${existingEvent._id}`, {\r\n-          method: 'PUT',\r\n-          headers: authHeaders,\r\n-          body: JSON.stringify(eventPayload),\r\n-        });\r\n-        const updated = await res.json();\r\n-        setEvents(events.map(e => (e._id === updated._id ? updated : e)));\r\n-      } else {\r\n-        const res = await fetch('http://localhost:5000/api/events', {\r\n-          method: 'POST',\r\n-          headers: authHeaders,\r\n-          body: JSON.stringify(eventPayload),\r\n-        });\r\n-        const created = await res.json();\r\n-        setEvents([...events, created]);\r\n-      }\r\n-      setOpenEventForm(false);\r\n-      setEditingHour(null);\r\n-      setFormData({ name: '', phone: '', type: 'Point', status: 'CONFIRMED' });\r\n-      setErrors({});\r\n-    } catch (err) {\r\n-      console.error('Save event failed:', err);\r\n-    }\r\n-  };\r\n-\r\n-  const handleDelete = async (hourToDelete) => {\r\n-    if (isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, hourToDelete)) {\r\n-      alert(\"You can't delete events from past date/time.\");\r\n-      return;\r\n-    }\r\n-    const existingEvent = findEventAtHour(hourToDelete);\r\n-    if (!existingEvent) return;\r\n-\r\n-    try {\r\n-      await fetch(`http://localhost:5000/api/events/${existingEvent._id}`, {\r\n-        method: 'DELETE',\r\n-        headers: authHeaders,\r\n-      });\r\n-      setEvents(events.filter(e => e._id !== existingEvent._id));\r\n-      if (editingHour === hourToDelete) {\r\n-        setOpenEventForm(false);\r\n-        setEditingHour(null);\r\n-        setFormData({ name: '', phone: '', type: 'Point', status: 'CONFIRMED' });\r\n-        setErrors({});\r\n-      }\r\n-    } catch (err) {\r\n-      console.error('Delete event failed:', err);\r\n-    }\r\n-  };\r\n-\r\n-  const startEditing = (hour) => {\r\n-    if (isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, hour)) {\r\n-      alert(\"You can't add or modify events for past date/time.\");\r\n-      return;\r\n-    }\r\n-    const ev = findEventAtHour(hour);\r\n-    if (ev) {\r\n-      setFormData({\r\n-        name: ev.name,\r\n-        phone: ev.phone,\r\n-        type: ev.type,\r\n-        status: ev.status || 'CONFIRMED',\r\n-      });\r\n-    } else {\r\n-      setFormData({ name: '', phone: '', type: 'Point', status: 'CONFIRMED' });\r\n-    }\r\n-    setEditingHour(hour);\r\n-    setErrors({});\r\n-    setOpenEventForm(true);\r\n-  };\r\n-\r\n-  const handleDateClick = (arg) => {\r\n-    const clickedDate = arg.dateStr;\r\n-    const hasEventOnDate = events.some(ev => ev.date.startsWith(clickedDate));\r\n-\r\n-    if (isDateBeforeToday(clickedDate) && !hasEventOnDate) {\r\n-      alert('No events on this past date.');\r\n-      return;\r\n-    }\r\n-\r\n-    setSelectedDay(clickedDate);\r\n-    setOpenDayModal(true);\r\n-    setEditingHour(null);\r\n-    setFormData({ name: '', phone: '', type: 'Point', status: 'CONFIRMED' });\r\n-    setErrors({});\r\n-  };\r\n-\r\n-  return (\r\n-    <>\r\n-      <NavBar\r\n-        email={profile?.email}\r\n-        onLogout={() => {\r\n-          localStorage.removeItem('token');\r\n-          // redirect if needed\r\n-        }}\r\n-      />\r\n-      <Container maxWidth=\"lg\" sx={{ mt: 4 }}>\r\n-        <Box boxShadow={3} p={2} bgcolor=\"white\" borderRadius={2}>\r\n-          <FullCalendar\r\n-            plugins={[dayGridPlugin, interactionPlugin]}\r\n-            initialView=\"dayGridMonth\"\r\n-            selectable={true}\r\n-            events={events}\r\n-            dateClick={handleDateClick}\r\n-          />\r\n-        </Box>\r\n-      </Container>\r\n-\r\n-      <Dialog\r\n-        open={openDayModal}\r\n-        onClose={() => setOpenDayModal(false)}\r\n-        maxWidth=\"lg\"\r\n-        fullWidth\r\n-      >\r\n-        <DialogTitle>Schedule for {selectedDay}</DialogTitle>\r\n-        <DialogContent>\r\n-          <Table>\r\n-            <TableHead>\r\n-              <TableRow>\r\n-                <TableCell>Hour</TableCell>\r\n-                <TableCell>Event Name</TableCell>\r\n-                <TableCell>Customer Name</TableCell>\r\n-                <TableCell>Customer Phone</TableCell>\r\n-                <TableCell>Status</TableCell>\r\n-                <TableCell>Action</TableCell>\r\n-              </TableRow>\r\n-            </TableHead>\r\n-\r\n-            <TableBody>\r\n-              {HOURS.map((hour) => {\r\n-                const ev = findEventAtHour(hour);\r\n-                const isPast = isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, hour);\r\n-\r\n-                return (\r\n-                  <TableRow key={hour}>\r\n-                    <TableCell>{formatHour(hour)}</TableCell>\r\n-                    <TableCell>{ev?.title || ''}</TableCell>\r\n-                    <TableCell>{ev?.name || ''}</TableCell>\r\n-                    <TableCell>{ev?.phone || ''}</TableCell>\r\n-                    <TableCell>{ev?.status || ''}</TableCell>\r\n-                    <TableCell>\r\n-                      {isPast ? (\r\n-                        <>\r\n-                          {ev ? (\r\n-                            <>\r\n-                              <IconButton size=\"small\" disabled title=\"Modify disabled on past date/time\">\r\n-                                <EditIcon />\r\n-                              </IconButton>\r\n-                              <IconButton size=\"small\" disabled title=\"Delete disabled on past date/time\">\r\n-                                <DeleteIcon />\r\n-                              </IconButton>\r\n-                            </>\r\n-                          ) : (\r\n-                            <IconButton size=\"small\" disabled title=\"Add disabled on past date/time\">\r\n-                              <AddIcon />\r\n-                            </IconButton>\r\n-                          )}\r\n-                        </>\r\n-                      ) : (\r\n-                        <>\r\n-                          <IconButton\r\n-                            color=\"primary\"\r\n-                            size=\"small\"\r\n-                            onClick={() => startEditing(hour)}\r\n-                            title={ev ? 'Modify' : 'Add'}\r\n-                          >\r\n-                            {ev ? <EditIcon /> : <AddIcon />}\r\n-                          </IconButton>\r\n-\r\n-                          {ev && (\r\n-                            <IconButton\r\n-                              color=\"error\"\r\n-                              size=\"small\"\r\n-                              onClick={() => handleDelete(hour)}\r\n-                              title=\"Delete\"\r\n-                            >\r\n-                              <DeleteIcon />\r\n-                            </IconButton>\r\n-                          )}\r\n-                        </>\r\n-                      )}\r\n-                    </TableCell>\r\n-                  </TableRow>\r\n-                );\r\n-              })}\r\n-            </TableBody>\r\n-          </Table>\r\n-        </DialogContent>\r\n-\r\n-        <DialogActions>\r\n-          <Button onClick={() => setOpenDayModal(false)}>Close</Button>\r\n-        </DialogActions>\r\n-      </Dialog>\r\n-\r\n-      <Dialog\r\n-        open={openEventForm}\r\n-        onClose={() => setOpenEventForm(false)}\r\n-        maxWidth=\"sm\"\r\n-        fullWidth\r\n-      >\r\n-        <DialogTitle>\r\n-          {editingHour !== null && findEventAtHour(editingHour)\r\n-            ? 'Modify Event'\r\n-            : 'Add Event'}\r\n-        </DialogTitle>\r\n-        <DialogContent>\r\n-          <Typography variant=\"subtitle1\" gutterBottom>\r\n-            For hour: {editingHour !== null ? formatHour(editingHour) : ''}\r\n-          </Typography>\r\n-\r\n-          <TextField\r\n-            margin=\"dense\"\r\n-            label=\"Customer Name\"\r\n-            fullWidth\r\n-            value={formData.name}\r\n-            onChange={(e) => setFormData({ ...formData, name: e.target.value })}\r\n-            error={!!errors.name}\r\n-            helperText={errors.name}\r\n-          />\r\n-          <TextField\r\n-            margin=\"dense\"\r\n-            label=\"Customer Phone\"\r\n-            fullWidth\r\n-            value={formData.phone}\r\n-            onChange={(e) => setFormData({ ...formData, phone: e.target.value })}\r\n-            error={!!errors.phone}\r\n-            helperText={errors.phone}\r\n-          />\r\n-          <TextField\r\n-            margin=\"dense\"\r\n-            select\r\n-            label=\"Type\"\r\n-            fullWidth\r\n-            value={formData.type}\r\n-            onChange={(e) => setFormData({ ...formData, type: e.target.value })}\r\n-          >\r\n-            <MenuItem value=\"Point\">Point</MenuItem>\r\n-            <MenuItem value=\"Rappel\">Rappel</MenuItem>\r\n-          </TextField>\r\n-\r\n-          {/* Status field only editable if 1 hour passed */}\r\n-          {canModifyStatus() ? (\r\n-            <TextField\r\n-              margin=\"dense\"\r\n-              select\r\n-              label=\"Status\"\r\n-              fullWidth\r\n-              value={formData.status}\r\n-              onChange={(e) => setFormData({ ...formData, status: e.target.value })}\r\n-              error={!!errors.status}\r\n-              helperText={errors.status}\r\n-            >\r\n-              <MenuItem value=\"CONFIRMED\">CONFIRMED</MenuItem>\r\n-              <MenuItem value=\"completed\">COMPLETED</MenuItem>\r\n-            </TextField>\r\n-          ) : (\r\n-            <Typography\r\n-              variant=\"body2\"\r\n-              color=\"textSecondary\"\r\n-              sx={{ mt: 2, mb: 1 }}\r\n-            >\r\n-              Status can only be modified  one hour after the event time.\r\n-            </Typography>\r\n-          )}\r\n-        </DialogContent>\r\n-\r\n-        <DialogActions>\r\n-          <Button onClick={() => setOpenEventForm(false)}>Cancel</Button>\r\n-          <Button\r\n-            onClick={handleAddOrUpdate}\r\n-            variant=\"contained\"\r\n-            color=\"primary\"\r\n-            disabled={isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, editingHour)}\r\n-          >\r\n-            Save\r\n-          </Button>\r\n-        </DialogActions>\r\n-      </Dialog>\r\n-    </>\r\n-  );\r\n-}\r\n-import React, { useState, useEffect } from 'react';\r\n-import {\r\n-  Container,\r\n-  Box,\r\n-  Dialog,\r\n-  DialogTitle,\r\n-  DialogContent,\r\n-  DialogActions,\r\n-  Button,\r\n-  TextField,\r\n-  MenuItem,\r\n-  Table,\r\n-  TableHead,\r\n-  TableBody,\r\n-  TableRow,\r\n-  TableCell,\r\n-  Typography,\r\n-  IconButton,\r\n-} from '@mui/material';\r\n-import FullCalendar from '@fullcalendar/react';\r\n-import dayGridPlugin from '@fullcalendar/daygrid';\r\n-import interactionPlugin from '@fullcalendar/interaction';\r\n-import NavBar from '../components/NavBar';\r\n-\r\n-import AddIcon from '@mui/icons-material/Add';\r\n-import EditIcon from '@mui/icons-material/Edit';\r\n-import DeleteIcon from '@mui/icons-material/Delete';\r\n-\r\n-const HOURS = Array.from({ length: 17 }, (_, i) => 8 + i); // 08:00 to 00:00\r\n-\r\n-function formatHour(h) {\r\n-  return h === 24 ? '00:00' : `${h.toString().padStart(2, '0')}:00`;\r\n-}\r\n-\r\n-export default function Dashboard() {\r\n-  const [profile, setProfile] = useState(null);\r\n-  const [events, setEvents] = useState([]);\r\n-  const [selectedDay, setSelectedDay] = useState(null);\r\n-  const [openDayModal, setOpenDayModal] = useState(false);\r\n-\r\n-  const [openEventForm, setOpenEventForm] = useState(false);\r\n-  const [editingHour, setEditingHour] = useState(null);\r\n-  // Added status field with default 'confirmed'\r\n-  const [formData, setFormData] = useState({ name: '', phone: '', type: 'Point', status: 'CONFIRMED' });\r\n-  const [errors, setErrors] = useState({});\r\n-\r\n-  const token = localStorage.getItem('token');\r\n-  const authHeaders = {\r\n-    Authorization: `Bearer ${token}`,\r\n-    'Content-Type': 'application/json',\r\n-  };\r\n-\r\n-  useEffect(() => {\r\n-    if (!token) return;\r\n-\r\n-    fetch('http://localhost:5000/api/admin/profile', { headers: authHeaders })\r\n-      .then(res => (res.ok ? res.json() : Promise.reject()))\r\n-      .then(setProfile)\r\n-      .catch(() => {\r\n-        localStorage.removeItem('token');\r\n-      });\r\n-\r\n-    fetch('http://localhost:5000/api/events', { headers: authHeaders })\r\n-      .then(res => res.json())\r\n-      .then(setEvents)\r\n-      .catch(console.error);\r\n-  }, [token]);\r\n-\r\n-  const isDateBeforeToday = (dateStr) => {\r\n-    if (!dateStr) return false;\r\n-    const selected = new Date(dateStr);\r\n-    const today = new Date();\r\n-    today.setHours(0, 0, 0, 0);\r\n-    return selected < today;\r\n-  };\r\n-\r\n-  const isHourInPast = (dateStr, hour) => {\r\n-    if (!dateStr) return false;\r\n-    const now = new Date();\r\n-    const selected = new Date(dateStr);\r\n-    selected.setHours(hour, 0, 0, 0);\r\n-    return selected < now;\r\n-  };\r\n-\r\n-  const findEventAtHour = (hour) => {\r\n-    if (!selectedDay) return null;\r\n-    const hourStr = hour === 24 ? '00:00' : formatHour(hour);\r\n-    const prefix = `${selectedDay}T${hourStr}`;\r\n-    return events.find(e => e.date.startsWith(prefix));\r\n-  };\r\n-\r\n-  const validate = () => {\r\n-    const errs = {};\r\n-    if (!formData.name.trim()) errs.name = 'Name is required';\r\n-    if (!formData.phone.trim()) errs.phone = 'Phone is required';\r\n-    else if (!/^\\d{10}$/.test(formData.phone)) errs.phone = 'Phone must be 10 digits';\r\n-    if (!['Point', 'Rappel'].includes(formData.type)) errs.type = 'Invalid type';\r\n-    // Add validation for status (must be confirmed or completed)\r\n-    if (!['CONFIRMED', 'COMPLETED'].includes(formData.status)) errs.status = 'Invalid status';\r\n-    setErrors(errs);\r\n-    return Object.keys(errs).length === 0;\r\n-  };\r\n-\r\n-  // Helper: Can status be modified? Event date/time passed by at least 1 hour?\r\n-  const canModifyStatus = () => {\r\n-    if (!selectedDay || editingHour === null) return false;\r\n-    const eventDate = new Date(selectedDay);\r\n-    eventDate.setHours(editingHour, 0, 0, 0);\r\n-    const now = new Date();\r\n-    return now - eventDate >= 60 * 60 * 1000; // 1 hour in ms\r\n-  };\r\n-\r\n-  const handleAddOrUpdate = async () => {\r\n-    if (isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, editingHour)) {\r\n-      alert(\"You can't add or modify events for past date/time.\");\r\n-      return;\r\n-    }\r\n-    if (!validate()) return;\r\n-\r\n-    const hourStr = editingHour === 24 ? '00:00' : formatHour(editingHour);\r\n-    const dateTime = `${selectedDay}T${hourStr}:00`;\r\n-\r\n-    const eventPayload = {\r\n-      title: `${formData.type} - ${formData.name}`,\r\n-      date: dateTime,\r\n-      name: formData.name,\r\n-      phone: formData.phone,\r\n-      type: formData.type,\r\n-      status: formData.status,\r\n-    };\r\n-\r\n-    try {\r\n-      const existingEvent = findEventAtHour(editingHour);\r\n-      if (existingEvent) {\r\n-        const res = await fetch(`http://localhost:5000/api/events/${existingEvent._id}`, {\r\n-          method: 'PUT',\r\n-          headers: authHeaders,\r\n-          body: JSON.stringify(eventPayload),\r\n-        });\r\n-        const updated = await res.json();\r\n-        setEvents(events.map(e => (e._id === updated._id ? updated : e)));\r\n-      } else {\r\n-        const res = await fetch('http://localhost:5000/api/events', {\r\n-          method: 'POST',\r\n-          headers: authHeaders,\r\n-          body: JSON.stringify(eventPayload),\r\n-        });\r\n-        const created = await res.json();\r\n-        setEvents([...events, created]);\r\n-      }\r\n-      setOpenEventForm(false);\r\n-      setEditingHour(null);\r\n-      setFormData({ name: '', phone: '', type: 'Point', status: 'CONFIRMED' });\r\n-      setErrors({});\r\n-    } catch (err) {\r\n-      console.error('Save event failed:', err);\r\n-    }\r\n-  };\r\n-\r\n-  const handleDelete = async (hourToDelete) => {\r\n-    if (isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, hourToDelete)) {\r\n-      alert(\"You can't delete events from past date/time.\");\r\n-      return;\r\n-    }\r\n-    const existingEvent = findEventAtHour(hourToDelete);\r\n-    if (!existingEvent) return;\r\n-\r\n-    try {\r\n-      await fetch(`http://localhost:5000/api/events/${existingEvent._id}`, {\r\n-        method: 'DELETE',\r\n-        headers: authHeaders,\r\n-      });\r\n-      setEvents(events.filter(e => e._id !== existingEvent._id));\r\n-      if (editingHour === hourToDelete) {\r\n-        setOpenEventForm(false);\r\n-        setEditingHour(null);\r\n-        setFormData({ name: '', phone: '', type: 'Point', status: 'CONFIRMED' });\r\n-        setErrors({});\r\n-      }\r\n-    } catch (err) {\r\n-      console.error('Delete event failed:', err);\r\n-    }\r\n-  };\r\n-\r\n-  const startEditing = (hour) => {\r\n-    if (isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, hour)) {\r\n-      alert(\"You can't add or modify events for past date/time.\");\r\n-      return;\r\n-    }\r\n-    const ev = findEventAtHour(hour);\r\n-    if (ev) {\r\n-      setFormData({\r\n-        name: ev.name,\r\n-        phone: ev.phone,\r\n-        type: ev.type,\r\n-        status: ev.status || 'CONFIRMED',\r\n-      });\r\n-    } else {\r\n-      setFormData({ name: '', phone: '', type: 'Point', status: 'CONFIRMED' });\r\n-    }\r\n-    setEditingHour(hour);\r\n-    setErrors({});\r\n-    setOpenEventForm(true);\r\n-  };\r\n-\r\n-  const handleDateClick = (arg) => {\r\n-    const clickedDate = arg.dateStr;\r\n-    const hasEventOnDate = events.some(ev => ev.date.startsWith(clickedDate));\r\n-\r\n-    if (isDateBeforeToday(clickedDate) && !hasEventOnDate) {\r\n-      alert('No events on this past date.');\r\n-      return;\r\n-    }\r\n-\r\n-    setSelectedDay(clickedDate);\r\n-    setOpenDayModal(true);\r\n-    setEditingHour(null);\r\n-    setFormData({ name: '', phone: '', type: 'Point', status: 'CONFIRMED' });\r\n-    setErrors({});\r\n-  };\r\n-\r\n-  return (\r\n-    <>\r\n-      <NavBar\r\n-        email={profile?.email}\r\n-        onLogout={() => {\r\n-          localStorage.removeItem('token');\r\n-          // redirect if needed\r\n-        }}\r\n-      />\r\n-      <Container maxWidth=\"lg\" sx={{ mt: 4 }}>\r\n-        <Box boxShadow={3} p={2} bgcolor=\"white\" borderRadius={2}>\r\n-          <FullCalendar\r\n-            plugins={[dayGridPlugin, interactionPlugin]}\r\n-            initialView=\"dayGridMonth\"\r\n-            selectable={true}\r\n-            events={events}\r\n-            dateClick={handleDateClick}\r\n-          />\r\n-        </Box>\r\n-      </Container>\r\n-\r\n-      <Dialog\r\n-        open={openDayModal}\r\n-        onClose={() => setOpenDayModal(false)}\r\n-        maxWidth=\"lg\"\r\n-        fullWidth\r\n-      >\r\n-        <DialogTitle>Schedule for {selectedDay}</DialogTitle>\r\n-        <DialogContent>\r\n-          <Table>\r\n-            <TableHead>\r\n-              <TableRow>\r\n-                <TableCell>Hour</TableCell>\r\n-                <TableCell>Event Name</TableCell>\r\n-                <TableCell>Customer Name</TableCell>\r\n-                <TableCell>Customer Phone</TableCell>\r\n-                <TableCell>Status</TableCell>\r\n-                <TableCell>Action</TableCell>\r\n-              </TableRow>\r\n-            </TableHead>\r\n-\r\n-            <TableBody>\r\n-              {HOURS.map((hour) => {\r\n-                const ev = findEventAtHour(hour);\r\n-                const isPast = isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, hour);\r\n-\r\n-                return (\r\n-                  <TableRow key={hour}>\r\n-                    <TableCell>{formatHour(hour)}</TableCell>\r\n-                    <TableCell>{ev?.title || ''}</TableCell>\r\n-                    <TableCell>{ev?.name || ''}</TableCell>\r\n-                    <TableCell>{ev?.phone || ''}</TableCell>\r\n-                    <TableCell>{ev?.status || ''}</TableCell>\r\n-                    <TableCell>\r\n-                      {isPast ? (\r\n-                        <>\r\n-                          {ev ? (\r\n-                            <>\r\n-                              <IconButton size=\"small\" disabled title=\"Modify disabled on past date/time\">\r\n-                                <EditIcon />\r\n-                              </IconButton>\r\n-                              <IconButton size=\"small\" disabled title=\"Delete disabled on past date/time\">\r\n-                                <DeleteIcon />\r\n-                              </IconButton>\r\n-                            </>\r\n-                          ) : (\r\n-                            <IconButton size=\"small\" disabled title=\"Add disabled on past date/time\">\r\n-                              <AddIcon />\r\n-                            </IconButton>\r\n-                          )}\r\n-                        </>\r\n-                      ) : (\r\n-                        <>\r\n-                          <IconButton\r\n-                            color=\"primary\"\r\n-                            size=\"small\"\r\n-                            onClick={() => startEditing(hour)}\r\n-                            title={ev ? 'Modify' : 'Add'}\r\n-                          >\r\n-                            {ev ? <EditIcon /> : <AddIcon />}\r\n-                          </IconButton>\r\n-\r\n-                          {ev && (\r\n-                            <IconButton\r\n-                              color=\"error\"\r\n-                              size=\"small\"\r\n-                              onClick={() => handleDelete(hour)}\r\n-                              title=\"Delete\"\r\n-                            >\r\n-                              <DeleteIcon />\r\n-                            </IconButton>\r\n-                          )}\r\n-                        </>\r\n-                      )}\r\n-                    </TableCell>\r\n-                  </TableRow>\r\n-                );\r\n-              })}\r\n-            </TableBody>\r\n-          </Table>\r\n-        </DialogContent>\r\n-\r\n-        <DialogActions>\r\n-          <Button onClick={() => setOpenDayModal(false)}>Close</Button>\r\n-        </DialogActions>\r\n-      </Dialog>\r\n-\r\n-      <Dialog\r\n-        open={openEventForm}\r\n-        onClose={() => setOpenEventForm(false)}\r\n-        maxWidth=\"sm\"\r\n-        fullWidth\r\n-      >\r\n-        <DialogTitle>\r\n-          {editingHour !== null && findEventAtHour(editingHour)\r\n-            ? 'Modify Event'\r\n-            : 'Add Event'}\r\n-        </DialogTitle>\r\n-        <DialogContent>\r\n-          <Typography variant=\"subtitle1\" gutterBottom>\r\n-            For hour: {editingHour !== null ? formatHour(editingHour) : ''}\r\n-          </Typography>\r\n-\r\n-          <TextField\r\n-            margin=\"dense\"\r\n-            label=\"Customer Name\"\r\n-            fullWidth\r\n-            value={formData.name}\r\n-            onChange={(e) => setFormData({ ...formData, name: e.target.value })}\r\n-            error={!!errors.name}\r\n-            helperText={errors.name}\r\n-          />\r\n-          <TextField\r\n-            margin=\"dense\"\r\n-            label=\"Customer Phone\"\r\n-            fullWidth\r\n-            value={formData.phone}\r\n-            onChange={(e) => setFormData({ ...formData, phone: e.target.value })}\r\n-            error={!!errors.phone}\r\n-            helperText={errors.phone}\r\n-          />\r\n-          <TextField\r\n-            margin=\"dense\"\r\n-            select\r\n-            label=\"Type\"\r\n-            fullWidth\r\n-            value={formData.type}\r\n-            onChange={(e) => setFormData({ ...formData, type: e.target.value })}\r\n-          >\r\n-            <MenuItem value=\"Point\">Point</MenuItem>\r\n-            <MenuItem value=\"Rappel\">Rappel</MenuItem>\r\n-          </TextField>\r\n-\r\n-          {/* Status field only editable if 1 hour passed */}\r\n-          {canModifyStatus() ? (\r\n-            <TextField\r\n-              margin=\"dense\"\r\n-              select\r\n-              label=\"Status\"\r\n-              fullWidth\r\n-              value={formData.status}\r\n-              onChange={(e) => setFormData({ ...formData, status: e.target.value })}\r\n-              error={!!errors.status}\r\n-              helperText={errors.status}\r\n-            >\r\n-              <MenuItem value=\"confirmed\">CONFIRMED</MenuItem>\r\n-              <MenuItem value=\"completed\">COMPLETED</MenuItem>\r\n-            </TextField>\r\n-          ) : (\r\n-            <Typography\r\n-              variant=\"body2\"\r\n-              color=\"textSecondary\"\r\n-              sx={{ mt: 2, mb: 1 }}\r\n-            >\r\n-              Status can only be modified  one hour after the event time.\r\n-            </Typography>\r\n-          )}\r\n-        </DialogContent>\r\n-\r\n-        <DialogActions>\r\n-          <Button onClick={() => setOpenEventForm(false)}>Cancel</Button>\r\n-          <Button\r\n-            onClick={handleAddOrUpdate}\r\n-            variant=\"contained\"\r\n-            color=\"primary\"\r\n-            disabled={isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, editingHour)}\r\n-          >\r\n-            Save\r\n-          </Button>\r\n-        </DialogActions>\r\n-      </Dialog>\r\n-    </>\r\n-  );\r\n-}\r\n-import React, { useState, useEffect } from 'react';\r\n-import {\r\n-  Container,\r\n-  Box,\r\n-  Dialog,\r\n-  DialogTitle,\r\n-  DialogContent,\r\n-  DialogActions,\r\n-  Button,\r\n-  TextField,\r\n-  MenuItem,\r\n-  Table,\r\n-  TableHead,\r\n-  TableBody,\r\n-  TableRow,\r\n-  TableCell,\r\n-  Typography,\r\n-  IconButton,\r\n-} from '@mui/material';\r\n-import FullCalendar from '@fullcalendar/react';\r\n-import dayGridPlugin from '@fullcalendar/daygrid';\r\n-import interactionPlugin from '@fullcalendar/interaction';\r\n-import NavBar from '../components/NavBar';\r\n-\r\n-import AddIcon from '@mui/icons-material/Add';\r\n-import EditIcon from '@mui/icons-material/Edit';\r\n-import DeleteIcon from '@mui/icons-material/Delete';\r\n-\r\n-const HOURS = Array.from({ length: 17 }, (_, i) => 8 + i); // 08:00 to 00:00\r\n-\r\n-function formatHour(h) {\r\n-  return h === 24 ? '00:00' : `${h.toString().padStart(2, '0')}:00`;\r\n-}\r\n-\r\n-export default function Dashboard() {\r\n-  const [profile, setProfile] = useState(null);\r\n-  const [events, setEvents] = useState([]);\r\n-  const [selectedDay, setSelectedDay] = useState(null);\r\n-  const [openDayModal, setOpenDayModal] = useState(false);\r\n-\r\n-  const [openEventForm, setOpenEventForm] = useState(false);\r\n-  const [editingHour, setEditingHour] = useState(null);\r\n-  // Added status field with default 'confirmed'\r\n-  const [formData, setFormData] = useState({ name: '', phone: '', type: 'Point', status: 'CONFIRMED' });\r\n-  const [errors, setErrors] = useState({});\r\n-\r\n-  const token = localStorage.getItem('token');\r\n-  const authHeaders = {\r\n-    Authorization: `Bearer ${token}`,\r\n-    'Content-Type': 'application/json',\r\n-  };\r\n-\r\n-  useEffect(() => {\r\n-    if (!token) return;\r\n-\r\n-    fetch('http://localhost:5000/api/admin/profile', { headers: authHeaders })\r\n-      .then(res => (res.ok ? res.json() : Promise.reject()))\r\n-      .then(setProfile)\r\n-      .catch(() => {\r\n-        localStorage.removeItem('token');\r\n-      });\r\n-\r\n-    fetch('http://localhost:5000/api/events', { headers: authHeaders })\r\n-      .then(res => res.json())\r\n-      .then(setEvents)\r\n-      .catch(console.error);\r\n-  }, [token]);\r\n-\r\n-  const isDateBeforeToday = (dateStr) => {\r\n-    if (!dateStr) return false;\r\n-    const selected = new Date(dateStr);\r\n-    const today = new Date();\r\n-    today.setHours(0, 0, 0, 0);\r\n-    return selected < today;\r\n-  };\r\n-\r\n-  const isHourInPast = (dateStr, hour) => {\r\n-    if (!dateStr) return false;\r\n-    const now = new Date();\r\n-    const selected = new Date(dateStr);\r\n-    selected.setHours(hour, 0, 0, 0);\r\n-    return selected < now;\r\n-  };\r\n-\r\n-  const findEventAtHour = (hour) => {\r\n-    if (!selectedDay) return null;\r\n-    const hourStr = hour === 24 ? '00:00' : formatHour(hour);\r\n-    const prefix = `${selectedDay}T${hourStr}`;\r\n-    return events.find(e => e.date.startsWith(prefix));\r\n-  };\r\n-\r\n-  const validate = () => {\r\n-    const errs = {};\r\n-    if (!formData.name.trim()) errs.name = 'Name is required';\r\n-    if (!formData.phone.trim()) errs.phone = 'Phone is required';\r\n-    else if (!/^\\d{10}$/.test(formData.phone)) errs.phone = 'Phone must be 10 digits';\r\n-    if (!['Point', 'Rappel'].includes(formData.type)) errs.type = 'Invalid type';\r\n-    // Add validation for status (must be confirmed or completed)\r\n-    if (!['CONFIRMED', 'COMPLETED'].includes(formData.status)) errs.status = 'Invalid status';\r\n-    setErrors(errs);\r\n-    return Object.keys(errs).length === 0;\r\n-  };\r\n-\r\n-  // Helper: Can status be modified? Event date/time passed by at least 1 hour?\r\n-  const canModifyStatus = () => {\r\n-    if (!selectedDay || editingHour === null) return false;\r\n-    const eventDate = new Date(selectedDay);\r\n-    eventDate.setHours(editingHour, 0, 0, 0);\r\n-    const now = new Date();\r\n-    return now - eventDate >= 60 * 60 * 1000; // 1 hour in ms\r\n-  };\r\n-\r\n-  const handleAddOrUpdate = async () => {\r\n-    if (isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, editingHour)) {\r\n-      alert(\"You can't add or modify events for past date/time.\");\r\n-      return;\r\n-    }\r\n-    if (!validate()) return;\r\n-\r\n-    const hourStr = editingHour === 24 ? '00:00' : formatHour(editingHour);\r\n-    const dateTime = `${selectedDay}T${hourStr}:00`;\r\n-\r\n-    const eventPayload = {\r\n-      title: `${formData.type} - ${formData.name}`,\r\n-      date: dateTime,\r\n-      name: formData.name,\r\n-      phone: formData.phone,\r\n-      type: formData.type,\r\n-      status: formData.status,\r\n-    };\r\n-\r\n-    try {\r\n-      const existingEvent = findEventAtHour(editingHour);\r\n-      if (existingEvent) {\r\n-        const res = await fetch(`http://localhost:5000/api/events/${existingEvent._id}`, {\r\n-          method: 'PUT',\r\n-          headers: authHeaders,\r\n-          body: JSON.stringify(eventPayload),\r\n-        });\r\n-        const updated = await res.json();\r\n-        setEvents(events.map(e => (e._id === updated._id ? updated : e)));\r\n-      } else {\r\n-        const res = await fetch('http://localhost:5000/api/events', {\r\n-          method: 'POST',\r\n-          headers: authHeaders,\r\n-          body: JSON.stringify(eventPayload),\r\n-        });\r\n-        const created = await res.json();\r\n-        setEvents([...events, created]);\r\n-      }\r\n-      setOpenEventForm(false);\r\n-      setEditingHour(null);\r\n-      setFormData({ name: '', phone: '', type: 'Point', status: 'CONFIRMED' });\r\n-      setErrors({});\r\n-    } catch (err) {\r\n-      console.error('Save event failed:', err);\r\n-    }\r\n-  };\r\n-\r\n-  const handleDelete = async (hourToDelete) => {\r\n-    if (isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, hourToDelete)) {\r\n-      alert(\"You can't delete events from past date/time.\");\r\n-      return;\r\n-    }\r\n-    const existingEvent = findEventAtHour(hourToDelete);\r\n-    if (!existingEvent) return;\r\n-\r\n-    try {\r\n-      await fetch(`http://localhost:5000/api/events/${existingEvent._id}`, {\r\n-        method: 'DELETE',\r\n-        headers: authHeaders,\r\n-      });\r\n-      setEvents(events.filter(e => e._id !== existingEvent._id));\r\n-      if (editingHour === hourToDelete) {\r\n-        setOpenEventForm(false);\r\n-        setEditingHour(null);\r\n-        setFormData({ name: '', phone: '', type: 'Point', status: 'CONFIRMED' });\r\n-        setErrors({});\r\n-      }\r\n-    } catch (err) {\r\n-      console.error('Delete event failed:', err);\r\n-    }\r\n-  };\r\n-\r\n-  const startEditing = (hour) => {\r\n-    if (isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, hour)) {\r\n-      alert(\"You can't add or modify events for past date/time.\");\r\n-      return;\r\n-    }\r\n-    const ev = findEventAtHour(hour);\r\n-    if (ev) {\r\n-      setFormData({\r\n-        name: ev.name,\r\n-        phone: ev.phone,\r\n-        type: ev.type,\r\n-        status: ev.status || 'CONFIRMED',\r\n-      });\r\n-    } else {\r\n-      setFormData({ name: '', phone: '', type: 'Point', status: 'CONFIRMED' });\r\n-    }\r\n-    setEditingHour(hour);\r\n-    setErrors({});\r\n-    setOpenEventForm(true);\r\n-  };\r\n-\r\n-  const handleDateClick = (arg) => {\r\n-    const clickedDate = arg.dateStr;\r\n-    const hasEventOnDate = events.some(ev => ev.date.startsWith(clickedDate));\r\n-\r\n-    if (isDateBeforeToday(clickedDate) && !hasEventOnDate) {\r\n-      alert('No events on this past date.');\r\n-      return;\r\n-    }\r\n-\r\n-    setSelectedDay(clickedDate);\r\n-    setOpenDayModal(true);\r\n-    setEditingHour(null);\r\n-    setFormData({ name: '', phone: '', type: 'Point', status: 'confirmed' });\r\n-    setErrors({});\r\n-  };\r\n-\r\n-  return (\r\n-    <>\r\n-      <NavBar\r\n-        email={profile?.email}\r\n-        onLogout={() => {\r\n-          localStorage.removeItem('token');\r\n-          // redirect if needed\r\n-        }}\r\n-      />\r\n-      <Container maxWidth=\"lg\" sx={{ mt: 4 }}>\r\n-        <Box boxShadow={3} p={2} bgcolor=\"white\" borderRadius={2}>\r\n-          <FullCalendar\r\n-            plugins={[dayGridPlugin, interactionPlugin]}\r\n-            initialView=\"dayGridMonth\"\r\n-            selectable={true}\r\n-            events={events}\r\n-            dateClick={handleDateClick}\r\n-          />\r\n-        </Box>\r\n-      </Container>\r\n-\r\n-      <Dialog\r\n-        open={openDayModal}\r\n-        onClose={() => setOpenDayModal(false)}\r\n-        maxWidth=\"lg\"\r\n-        fullWidth\r\n-      >\r\n-        <DialogTitle>Schedule for {selectedDay}</DialogTitle>\r\n-        <DialogContent>\r\n-          <Table>\r\n-            <TableHead>\r\n-              <TableRow>\r\n-                <TableCell>Hour</TableCell>\r\n-                <TableCell>Event Name</TableCell>\r\n-                <TableCell>Customer Name</TableCell>\r\n-                <TableCell>Customer Phone</TableCell>\r\n-                <TableCell>Status</TableCell>\r\n-                <TableCell>Action</TableCell>\r\n-              </TableRow>\r\n-            </TableHead>\r\n-\r\n-            <TableBody>\r\n-              {HOURS.map((hour) => {\r\n-                const ev = findEventAtHour(hour);\r\n-                const isPast = isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, hour);\r\n-\r\n-                return (\r\n-                  <TableRow key={hour}>\r\n-                    <TableCell>{formatHour(hour)}</TableCell>\r\n-                    <TableCell>{ev?.title || ''}</TableCell>\r\n-                    <TableCell>{ev?.name || ''}</TableCell>\r\n-                    <TableCell>{ev?.phone || ''}</TableCell>\r\n-                    <TableCell>{ev?.status || ''}</TableCell>\r\n-                    <TableCell>\r\n-                      {isPast ? (\r\n-                        <>\r\n-                          {ev ? (\r\n-                            <>\r\n-                              <IconButton size=\"small\" disabled title=\"Modify disabled on past date/time\">\r\n-                                <EditIcon />\r\n-                              </IconButton>\r\n-                              <IconButton size=\"small\" disabled title=\"Delete disabled on past date/time\">\r\n-                                <DeleteIcon />\r\n-                              </IconButton>\r\n-                            </>\r\n-                          ) : (\r\n-                            <IconButton size=\"small\" disabled title=\"Add disabled on past date/time\">\r\n-                              <AddIcon />\r\n-                            </IconButton>\r\n-                          )}\r\n-                        </>\r\n-                      ) : (\r\n-                        <>\r\n-                          <IconButton\r\n-                            color=\"primary\"\r\n-                            size=\"small\"\r\n-                            onClick={() => startEditing(hour)}\r\n-                            title={ev ? 'Modify' : 'Add'}\r\n-                          >\r\n-                            {ev ? <EditIcon /> : <AddIcon />}\r\n-                          </IconButton>\r\n-\r\n-                          {ev && (\r\n-                            <IconButton\r\n-                              color=\"error\"\r\n-                              size=\"small\"\r\n-                              onClick={() => handleDelete(hour)}\r\n-                              title=\"Delete\"\r\n-                            >\r\n-                              <DeleteIcon />\r\n-                            </IconButton>\r\n-                          )}\r\n-                        </>\r\n-                      )}\r\n-                    </TableCell>\r\n-                  </TableRow>\r\n-                );\r\n-              })}\r\n-            </TableBody>\r\n-          </Table>\r\n-        </DialogContent>\r\n-\r\n-        <DialogActions>\r\n-          <Button onClick={() => setOpenDayModal(false)}>Close</Button>\r\n-        </DialogActions>\r\n-      </Dialog>\r\n-\r\n-      <Dialog\r\n-        open={openEventForm}\r\n-        onClose={() => setOpenEventForm(false)}\r\n-        maxWidth=\"sm\"\r\n-        fullWidth\r\n-      >\r\n-        <DialogTitle>\r\n-          {editingHour !== null && findEventAtHour(editingHour)\r\n-            ? 'Modify Event'\r\n-            : 'Add Event'}\r\n-        </DialogTitle>\r\n-        <DialogContent>\r\n-          <Typography variant=\"subtitle1\" gutterBottom>\r\n-            For hour: {editingHour !== null ? formatHour(editingHour) : ''}\r\n-          </Typography>\r\n-\r\n-          <TextField\r\n-            margin=\"dense\"\r\n-            label=\"Customer Name\"\r\n-            fullWidth\r\n-            value={formData.name}\r\n-            onChange={(e) => setFormData({ ...formData, name: e.target.value })}\r\n-            error={!!errors.name}\r\n-            helperText={errors.name}\r\n-          />\r\n-          <TextField\r\n-            margin=\"dense\"\r\n-            label=\"Customer Phone\"\r\n-            fullWidth\r\n-            value={formData.phone}\r\n-            onChange={(e) => setFormData({ ...formData, phone: e.target.value })}\r\n-            error={!!errors.phone}\r\n-            helperText={errors.phone}\r\n-          />\r\n-          <TextField\r\n-            margin=\"dense\"\r\n-            select\r\n-            label=\"Type\"\r\n-            fullWidth\r\n-            value={formData.type}\r\n-            onChange={(e) => setFormData({ ...formData, type: e.target.value })}\r\n-          >\r\n-            <MenuItem value=\"Point\">Point</MenuItem>\r\n-            <MenuItem value=\"Rappel\">Rappel</MenuItem>\r\n-          </TextField>\r\n-\r\n-          {/* Status field only editable if 1 hour passed */}\r\n-          {canModifyStatus() ? (\r\n-            <TextField\r\n-              margin=\"dense\"\r\n-              select\r\n-              label=\"Status\"\r\n-              fullWidth\r\n-              value={formData.status}\r\n-              onChange={(e) => setFormData({ ...formData, status: e.target.value })}\r\n-              error={!!errors.status}\r\n-              helperText={errors.status}\r\n-            >\r\n-              <MenuItem value=\"confirmed\">CONFIRMED</MenuItem>\r\n-              <MenuItem value=\"completed\">COMPLETED</MenuItem>\r\n-            </TextField>\r\n-          ) : (\r\n-            <Typography\r\n-              variant=\"body2\"\r\n-              color=\"textSecondary\"\r\n-              sx={{ mt: 2, mb: 1 }}\r\n-            >\r\n-              Status can only be modified  one hour after the event time.\r\n-            </Typography>\r\n-          )}\r\n-        </DialogContent>\r\n-\r\n-        <DialogActions>\r\n-          <Button onClick={() => setOpenEventForm(false)}>Cancel</Button>\r\n-          <Button\r\n-            onClick={handleAddOrUpdate}\r\n-            variant=\"contained\"\r\n-            color=\"primary\"\r\n-            disabled={isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, editingHour)}\r\n-          >\r\n-            Save\r\n-          </Button>\r\n-        </DialogActions>\r\n-      </Dialog>\r\n-    </>\r\n-  );\r\n-}\r\n-import React, { useState, useEffect } from 'react';\r\n-import {\r\n-  Container,\r\n-  Box,\r\n-  Dialog,\r\n-  DialogTitle,\r\n-  DialogContent,\r\n-  DialogActions,\r\n-  Button,\r\n-  TextField,\r\n-  MenuItem,\r\n-  Table,\r\n-  TableHead,\r\n-  TableBody,\r\n-  TableRow,\r\n-  TableCell,\r\n-  Typography,\r\n-  IconButton,\r\n-} from '@mui/material';\r\n-import FullCalendar from '@fullcalendar/react';\r\n-import dayGridPlugin from '@fullcalendar/daygrid';\r\n-import interactionPlugin from '@fullcalendar/interaction';\r\n-import NavBar from '../components/NavBar';\r\n-\r\n-import AddIcon from '@mui/icons-material/Add';\r\n-import EditIcon from '@mui/icons-material/Edit';\r\n-import DeleteIcon from '@mui/icons-material/Delete';\r\n-\r\n-const HOURS = Array.from({ length: 17 }, (_, i) => 8 + i); // 08:00 to 00:00\r\n-\r\n-function formatHour(h) {\r\n-  return h === 24 ? '00:00' : `${h.toString().padStart(2, '0')}:00`;\r\n-}\r\n-\r\n-export default function Dashboard() {\r\n-  const [profile, setProfile] = useState(null);\r\n-  const [events, setEvents] = useState([]);\r\n-  const [selectedDay, setSelectedDay] = useState(null);\r\n-  const [openDayModal, setOpenDayModal] = useState(false);\r\n-\r\n-  const [openEventForm, setOpenEventForm] = useState(false);\r\n-  const [editingHour, setEditingHour] = useState(null);\r\n-  // Added status field with default 'confirmed'\r\n-  const [formData, setFormData] = useState({ name: '', phone: '', type: 'Point', status: 'CONFIRMED' });\r\n-  const [errors, setErrors] = useState({});\r\n-\r\n-  const token = localStorage.getItem('token');\r\n-  const authHeaders = {\r\n-    Authorization: `Bearer ${token}`,\r\n-    'Content-Type': 'application/json',\r\n-  };\r\n-\r\n-  useEffect(() => {\r\n-    if (!token) return;\r\n-\r\n-    fetch('http://localhost:5000/api/admin/profile', { headers: authHeaders })\r\n-      .then(res => (res.ok ? res.json() : Promise.reject()))\r\n-      .then(setProfile)\r\n-      .catch(() => {\r\n-        localStorage.removeItem('token');\r\n-      });\r\n-\r\n-    fetch('http://localhost:5000/api/events', { headers: authHeaders })\r\n-      .then(res => res.json())\r\n-      .then(setEvents)\r\n-      .catch(console.error);\r\n-  }, [token]);\r\n-\r\n-  const isDateBeforeToday = (dateStr) => {\r\n-    if (!dateStr) return false;\r\n-    const selected = new Date(dateStr);\r\n-    const today = new Date();\r\n-    today.setHours(0, 0, 0, 0);\r\n-    return selected < today;\r\n-  };\r\n-\r\n-  const isHourInPast = (dateStr, hour) => {\r\n-    if (!dateStr) return false;\r\n-    const now = new Date();\r\n-    const selected = new Date(dateStr);\r\n-    selected.setHours(hour, 0, 0, 0);\r\n-    return selected < now;\r\n-  };\r\n-\r\n-  const findEventAtHour = (hour) => {\r\n-    if (!selectedDay) return null;\r\n-    const hourStr = hour === 24 ? '00:00' : formatHour(hour);\r\n-    const prefix = `${selectedDay}T${hourStr}`;\r\n-    return events.find(e => e.date.startsWith(prefix));\r\n-  };\r\n-\r\n-  const validate = () => {\r\n-    const errs = {};\r\n-    if (!formData.name.trim()) errs.name = 'Name is required';\r\n-    if (!formData.phone.trim()) errs.phone = 'Phone is required';\r\n-    else if (!/^\\d{10}$/.test(formData.phone)) errs.phone = 'Phone must be 10 digits';\r\n-    if (!['Point', 'Rappel'].includes(formData.type)) errs.type = 'Invalid type';\r\n-    // Add validation for status (must be confirmed or completed)\r\n-    if (!['CONFIRMED', 'COMPLETED'].includes(formData.status)) errs.status = 'Invalid status';\r\n-    setErrors(errs);\r\n-    return Object.keys(errs).length === 0;\r\n-  };\r\n-\r\n-  // Helper: Can status be modified? Event date/time passed by at least 1 hour?\r\n-  const canModifyStatus = () => {\r\n-    if (!selectedDay || editingHour === null) return false;\r\n-    const eventDate = new Date(selectedDay);\r\n-    eventDate.setHours(editingHour, 0, 0, 0);\r\n-    const now = new Date();\r\n-    return now - eventDate >= 60 * 60 * 1000; // 1 hour in ms\r\n-  };\r\n-\r\n-  const handleAddOrUpdate = async () => {\r\n-    if (isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, editingHour)) {\r\n-      alert(\"You can't add or modify events for past date/time.\");\r\n-      return;\r\n-    }\r\n-    if (!validate()) return;\r\n-\r\n-    const hourStr = editingHour === 24 ? '00:00' : formatHour(editingHour);\r\n-    const dateTime = `${selectedDay}T${hourStr}:00`;\r\n-\r\n-    const eventPayload = {\r\n-      title: `${formData.type} - ${formData.name}`,\r\n-      date: dateTime,\r\n-      name: formData.name,\r\n-      phone: formData.phone,\r\n-      type: formData.type,\r\n-      status: formData.status,\r\n-    };\r\n-\r\n-    try {\r\n-      const existingEvent = findEventAtHour(editingHour);\r\n-      if (existingEvent) {\r\n-        const res = await fetch(`http://localhost:5000/api/events/${existingEvent._id}`, {\r\n-          method: 'PUT',\r\n-          headers: authHeaders,\r\n-          body: JSON.stringify(eventPayload),\r\n-        });\r\n-        const updated = await res.json();\r\n-        setEvents(events.map(e => (e._id === updated._id ? updated : e)));\r\n-      } else {\r\n-        const res = await fetch('http://localhost:5000/api/events', {\r\n-          method: 'POST',\r\n-          headers: authHeaders,\r\n-          body: JSON.stringify(eventPayload),\r\n-        });\r\n-        const created = await res.json();\r\n-        setEvents([...events, created]);\r\n-      }\r\n-      setOpenEventForm(false);\r\n-      setEditingHour(null);\r\n-      setFormData({ name: '', phone: '', type: 'Point', status: 'CONFIRMED' });\r\n-      setErrors({});\r\n-    } catch (err) {\r\n-      console.error('Save event failed:', err);\r\n-    }\r\n-  };\r\n-\r\n-  const handleDelete = async (hourToDelete) => {\r\n-    if (isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, hourToDelete)) {\r\n-      alert(\"You can't delete events from past date/time.\");\r\n-      return;\r\n-    }\r\n-    const existingEvent = findEventAtHour(hourToDelete);\r\n-    if (!existingEvent) return;\r\n-\r\n-    try {\r\n-      await fetch(`http://localhost:5000/api/events/${existingEvent._id}`, {\r\n-        method: 'DELETE',\r\n-        headers: authHeaders,\r\n-      });\r\n-      setEvents(events.filter(e => e._id !== existingEvent._id));\r\n-      if (editingHour === hourToDelete) {\r\n-        setOpenEventForm(false);\r\n-        setEditingHour(null);\r\n-        setFormData({ name: '', phone: '', type: 'Point', status: 'CONFIRMED' });\r\n-        setErrors({});\r\n-      }\r\n-    } catch (err) {\r\n-      console.error('Delete event failed:', err);\r\n-    }\r\n-  };\r\n-\r\n-  const startEditing = (hour) => {\r\n-    if (isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, hour)) {\r\n-      alert(\"You can't add or modify events for past date/time.\");\r\n-      return;\r\n-    }\r\n-    const ev = findEventAtHour(hour);\r\n-    if (ev) {\r\n-      setFormData({\r\n-        name: ev.name,\r\n-        phone: ev.phone,\r\n-        type: ev.type,\r\n-        status: ev.status || '',\r\n-      });\r\n-    } else {\r\n-      setFormData({ name: '', phone: '', type: 'Point', status: 'confirmed' });\r\n-    }\r\n-    setEditingHour(hour);\r\n-    setErrors({});\r\n-    setOpenEventForm(true);\r\n-  };\r\n-\r\n-  const handleDateClick = (arg) => {\r\n-    const clickedDate = arg.dateStr;\r\n-    const hasEventOnDate = events.some(ev => ev.date.startsWith(clickedDate));\r\n-\r\n-    if (isDateBeforeToday(clickedDate) && !hasEventOnDate) {\r\n-      alert('No events on this past date.');\r\n-      return;\r\n-    }\r\n-\r\n-    setSelectedDay(clickedDate);\r\n-    setOpenDayModal(true);\r\n-    setEditingHour(null);\r\n-    setFormData({ name: '', phone: '', type: 'Point', status: 'confirmed' });\r\n-    setErrors({});\r\n-  };\r\n-\r\n-  return (\r\n-    <>\r\n-      <NavBar\r\n-        email={profile?.email}\r\n-        onLogout={() => {\r\n-          localStorage.removeItem('token');\r\n-          // redirect if needed\r\n-        }}\r\n-      />\r\n-      <Container maxWidth=\"lg\" sx={{ mt: 4 }}>\r\n-        <Box boxShadow={3} p={2} bgcolor=\"white\" borderRadius={2}>\r\n-          <FullCalendar\r\n-            plugins={[dayGridPlugin, interactionPlugin]}\r\n-            initialView=\"dayGridMonth\"\r\n-            selectable={true}\r\n-            events={events}\r\n-            dateClick={handleDateClick}\r\n-          />\r\n-        </Box>\r\n-      </Container>\r\n-\r\n-      <Dialog\r\n-        open={openDayModal}\r\n-        onClose={() => setOpenDayModal(false)}\r\n-        maxWidth=\"lg\"\r\n-        fullWidth\r\n-      >\r\n-        <DialogTitle>Schedule for {selectedDay}</DialogTitle>\r\n-        <DialogContent>\r\n-          <Table>\r\n-            <TableHead>\r\n-              <TableRow>\r\n-                <TableCell>Hour</TableCell>\r\n-                <TableCell>Event Name</TableCell>\r\n-                <TableCell>Customer Name</TableCell>\r\n-                <TableCell>Customer Phone</TableCell>\r\n-                <TableCell>Status</TableCell>\r\n-                <TableCell>Action</TableCell>\r\n-              </TableRow>\r\n-            </TableHead>\r\n-\r\n-            <TableBody>\r\n-              {HOURS.map((hour) => {\r\n-                const ev = findEventAtHour(hour);\r\n-                const isPast = isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, hour);\r\n-\r\n-                return (\r\n-                  <TableRow key={hour}>\r\n-                    <TableCell>{formatHour(hour)}</TableCell>\r\n-                    <TableCell>{ev?.title || ''}</TableCell>\r\n-                    <TableCell>{ev?.name || ''}</TableCell>\r\n-                    <TableCell>{ev?.phone || ''}</TableCell>\r\n-                    <TableCell>{ev?.status || ''}</TableCell>\r\n-                    <TableCell>\r\n-                      {isPast ? (\r\n-                        <>\r\n-                          {ev ? (\r\n-                            <>\r\n-                              <IconButton size=\"small\" disabled title=\"Modify disabled on past date/time\">\r\n-                                <EditIcon />\r\n-                              </IconButton>\r\n-                              <IconButton size=\"small\" disabled title=\"Delete disabled on past date/time\">\r\n-                                <DeleteIcon />\r\n-                              </IconButton>\r\n-                            </>\r\n-                          ) : (\r\n-                            <IconButton size=\"small\" disabled title=\"Add disabled on past date/time\">\r\n-                              <AddIcon />\r\n-                            </IconButton>\r\n-                          )}\r\n-                        </>\r\n-                      ) : (\r\n-                        <>\r\n-                          <IconButton\r\n-                            color=\"primary\"\r\n-                            size=\"small\"\r\n-                            onClick={() => startEditing(hour)}\r\n-                            title={ev ? 'Modify' : 'Add'}\r\n-                          >\r\n-                            {ev ? <EditIcon /> : <AddIcon />}\r\n-                          </IconButton>\r\n-\r\n-                          {ev && (\r\n-                            <IconButton\r\n-                              color=\"error\"\r\n-                              size=\"small\"\r\n-                              onClick={() => handleDelete(hour)}\r\n-                              title=\"Delete\"\r\n-                            >\r\n-                              <DeleteIcon />\r\n-                            </IconButton>\r\n-                          )}\r\n-                        </>\r\n-                      )}\r\n-                    </TableCell>\r\n-                  </TableRow>\r\n-                );\r\n-              })}\r\n-            </TableBody>\r\n-          </Table>\r\n-        </DialogContent>\r\n-\r\n-        <DialogActions>\r\n-          <Button onClick={() => setOpenDayModal(false)}>Close</Button>\r\n-        </DialogActions>\r\n-      </Dialog>\r\n-\r\n-      <Dialog\r\n-        open={openEventForm}\r\n-        onClose={() => setOpenEventForm(false)}\r\n-        maxWidth=\"sm\"\r\n-        fullWidth\r\n-      >\r\n-        <DialogTitle>\r\n-          {editingHour !== null && findEventAtHour(editingHour)\r\n-            ? 'Modify Event'\r\n-            : 'Add Event'}\r\n-        </DialogTitle>\r\n-        <DialogContent>\r\n-          <Typography variant=\"subtitle1\" gutterBottom>\r\n-            For hour: {editingHour !== null ? formatHour(editingHour) : ''}\r\n-          </Typography>\r\n-\r\n-          <TextField\r\n-            margin=\"dense\"\r\n-            label=\"Customer Name\"\r\n-            fullWidth\r\n-            value={formData.name}\r\n-            onChange={(e) => setFormData({ ...formData, name: e.target.value })}\r\n-            error={!!errors.name}\r\n-            helperText={errors.name}\r\n-          />\r\n-          <TextField\r\n-            margin=\"dense\"\r\n-            label=\"Customer Phone\"\r\n-            fullWidth\r\n-            value={formData.phone}\r\n-            onChange={(e) => setFormData({ ...formData, phone: e.target.value })}\r\n-            error={!!errors.phone}\r\n-            helperText={errors.phone}\r\n-          />\r\n-          <TextField\r\n-            margin=\"dense\"\r\n-            select\r\n-            label=\"Type\"\r\n-            fullWidth\r\n-            value={formData.type}\r\n-            onChange={(e) => setFormData({ ...formData, type: e.target.value })}\r\n-          >\r\n-            <MenuItem value=\"Point\">Point</MenuItem>\r\n-            <MenuItem value=\"Rappel\">Rappel</MenuItem>\r\n-          </TextField>\r\n-\r\n-          {/* Status field only editable if 1 hour passed */}\r\n-          {canModifyStatus() ? (\r\n-            <TextField\r\n-              margin=\"dense\"\r\n-              select\r\n-              label=\"Status\"\r\n-              fullWidth\r\n-              value={formData.status}\r\n-              onChange={(e) => setFormData({ ...formData, status: e.target.value })}\r\n-              error={!!errors.status}\r\n-              helperText={errors.status}\r\n-            >\r\n-              <MenuItem value=\"confirmed\">CONFIRMED</MenuItem>\r\n-              <MenuItem value=\"completed\">COMPLETED</MenuItem>\r\n-            </TextField>\r\n-          ) : (\r\n-            <Typography\r\n-              variant=\"body2\"\r\n-              color=\"textSecondary\"\r\n-              sx={{ mt: 2, mb: 1 }}\r\n-            >\r\n-              Status can only be modified  one hour after the event time.\r\n-            </Typography>\r\n-          )}\r\n-        </DialogContent>\r\n-\r\n-        <DialogActions>\r\n-          <Button onClick={() => setOpenEventForm(false)}>Cancel</Button>\r\n-          <Button\r\n-            onClick={handleAddOrUpdate}\r\n-            variant=\"contained\"\r\n-            color=\"primary\"\r\n-            disabled={isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, editingHour)}\r\n-          >\r\n-            Save\r\n-          </Button>\r\n-        </DialogActions>\r\n-      </Dialog>\r\n-    </>\r\n-  );\r\n-}\r\n-import React, { useState, useEffect } from 'react';\r\n-import {\r\n-  Container,\r\n-  Box,\r\n-  Dialog,\r\n-  DialogTitle,\r\n-  DialogContent,\r\n-  DialogActions,\r\n-  Button,\r\n-  TextField,\r\n-  MenuItem,\r\n-  Table,\r\n-  TableHead,\r\n-  TableBody,\r\n-  TableRow,\r\n-  TableCell,\r\n-  Typography,\r\n-  IconButton,\r\n-} from '@mui/material';\r\n-import FullCalendar from '@fullcalendar/react';\r\n-import dayGridPlugin from '@fullcalendar/daygrid';\r\n-import interactionPlugin from '@fullcalendar/interaction';\r\n-import NavBar from '../components/NavBar';\r\n-\r\n-import AddIcon from '@mui/icons-material/Add';\r\n-import EditIcon from '@mui/icons-material/Edit';\r\n-import DeleteIcon from '@mui/icons-material/Delete';\r\n-\r\n-const HOURS = Array.from({ length: 17 }, (_, i) => 8 + i); // 08:00 to 00:00\r\n-\r\n-function formatHour(h) {\r\n-  return h === 24 ? '00:00' : `${h.toString().padStart(2, '0')}:00`;\r\n-}\r\n-\r\n-export default function Dashboard() {\r\n-  const [profile, setProfile] = useState(null);\r\n-  const [events, setEvents] = useState([]);\r\n-  const [selectedDay, setSelectedDay] = useState(null);\r\n-  const [openDayModal, setOpenDayModal] = useState(false);\r\n-\r\n-  const [openEventForm, setOpenEventForm] = useState(false);\r\n-  const [editingHour, setEditingHour] = useState(null);\r\n-  // Added status field with default 'confirmed'\r\n-  const [formData, setFormData] = useState({ name: '', phone: '', type: 'Point', status: 'CONFIRMED' });\r\n-  const [errors, setErrors] = useState({});\r\n-\r\n-  const token = localStorage.getItem('token');\r\n-  const authHeaders = {\r\n-    Authorization: `Bearer ${token}`,\r\n-    'Content-Type': 'application/json',\r\n-  };\r\n-\r\n-  useEffect(() => {\r\n-    if (!token) return;\r\n-\r\n-    fetch('http://localhost:5000/api/admin/profile', { headers: authHeaders })\r\n-      .then(res => (res.ok ? res.json() : Promise.reject()))\r\n-      .then(setProfile)\r\n-      .catch(() => {\r\n-        localStorage.removeItem('token');\r\n-      });\r\n-\r\n-    fetch('http://localhost:5000/api/events', { headers: authHeaders })\r\n-      .then(res => res.json())\r\n-      .then(setEvents)\r\n-      .catch(console.error);\r\n-  }, [token]);\r\n-\r\n-  const isDateBeforeToday = (dateStr) => {\r\n-    if (!dateStr) return false;\r\n-    const selected = new Date(dateStr);\r\n-    const today = new Date();\r\n-    today.setHours(0, 0, 0, 0);\r\n-    return selected < today;\r\n-  };\r\n-\r\n-  const isHourInPast = (dateStr, hour) => {\r\n-    if (!dateStr) return false;\r\n-    const now = new Date();\r\n-    const selected = new Date(dateStr);\r\n-    selected.setHours(hour, 0, 0, 0);\r\n-    return selected < now;\r\n-  };\r\n-\r\n-  const findEventAtHour = (hour) => {\r\n-    if (!selectedDay) return null;\r\n-    const hourStr = hour === 24 ? '00:00' : formatHour(hour);\r\n-    const prefix = `${selectedDay}T${hourStr}`;\r\n-    return events.find(e => e.date.startsWith(prefix));\r\n-  };\r\n-\r\n-  const validate = () => {\r\n-    const errs = {};\r\n-    if (!formData.name.trim()) errs.name = 'Name is required';\r\n-    if (!formData.phone.trim()) errs.phone = 'Phone is required';\r\n-    else if (!/^\\d{10}$/.test(formData.phone)) errs.phone = 'Phone must be 10 digits';\r\n-    if (!['Point', 'Rappel'].includes(formData.type)) errs.type = 'Invalid type';\r\n-    // Add validation for status (must be confirmed or completed)\r\n-    if (!['CONFIRMED', 'COMPLETED'].includes(formData.status)) errs.status = 'Invalid status';\r\n-    setErrors(errs);\r\n-    return Object.keys(errs).length === 0;\r\n-  };\r\n-\r\n-  // Helper: Can status be modified? Event date/time passed by at least 1 hour?\r\n-  const canModifyStatus = () => {\r\n-    if (!selectedDay || editingHour === null) return false;\r\n-    const eventDate = new Date(selectedDay);\r\n-    eventDate.setHours(editingHour, 0, 0, 0);\r\n-    const now = new Date();\r\n-    return now - eventDate >= 60 * 60 * 1000; // 1 hour in ms\r\n-  };\r\n-\r\n-  const handleAddOrUpdate = async () => {\r\n-    if (isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, editingHour)) {\r\n-      alert(\"You can't add or modify events for past date/time.\");\r\n-      return;\r\n-    }\r\n-    if (!validate()) return;\r\n-\r\n-    const hourStr = editingHour === 24 ? '00:00' : formatHour(editingHour);\r\n-    const dateTime = `${selectedDay}T${hourStr}:00`;\r\n-\r\n-    const eventPayload = {\r\n-      title: `${formData.type} - ${formData.name}`,\r\n-      date: dateTime,\r\n-      name: formData.name,\r\n-      phone: formData.phone,\r\n-      type: formData.type,\r\n-      status: formData.status,\r\n-    };\r\n-\r\n-    try {\r\n-      const existingEvent = findEventAtHour(editingHour);\r\n-      if (existingEvent) {\r\n-        const res = await fetch(`http://localhost:5000/api/events/${existingEvent._id}`, {\r\n-          method: 'PUT',\r\n-          headers: authHeaders,\r\n-          body: JSON.stringify(eventPayload),\r\n-        });\r\n-        const updated = await res.json();\r\n-        setEvents(events.map(e => (e._id === updated._id ? updated : e)));\r\n-      } else {\r\n-        const res = await fetch('http://localhost:5000/api/events', {\r\n-          method: 'POST',\r\n-          headers: authHeaders,\r\n-          body: JSON.stringify(eventPayload),\r\n-        });\r\n-        const created = await res.json();\r\n-        setEvents([...events, created]);\r\n-      }\r\n-      setOpenEventForm(false);\r\n-      setEditingHour(null);\r\n-      setFormData({ name: '', phone: '', type: 'Point', status: 'CONFIRMED' });\r\n-      setErrors({});\r\n-    } catch (err) {\r\n-      console.error('Save event failed:', err);\r\n-    }\r\n-  };\r\n-\r\n-  const handleDelete = async (hourToDelete) => {\r\n-    if (isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, hourToDelete)) {\r\n-      alert(\"You can't delete events from past date/time.\");\r\n-      return;\r\n-    }\r\n-    const existingEvent = findEventAtHour(hourToDelete);\r\n-    if (!existingEvent) return;\r\n-\r\n-    try {\r\n-      await fetch(`http://localhost:5000/api/events/${existingEvent._id}`, {\r\n-        method: 'DELETE',\r\n-        headers: authHeaders,\r\n-      });\r\n-      setEvents(events.filter(e => e._id !== existingEvent._id));\r\n-      if (editingHour === hourToDelete) {\r\n-        setOpenEventForm(false);\r\n-        setEditingHour(null);\r\n-        setFormData({ name: '', phone: '', type: 'Point', status: '' });\r\n-        setErrors({});\r\n-      }\r\n-    } catch (err) {\r\n-      console.error('Delete event failed:', err);\r\n-    }\r\n-  };\r\n-\r\n-  const startEditing = (hour) => {\r\n-    if (isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, hour)) {\r\n-      alert(\"You can't add or modify events for past date/time.\");\r\n-      return;\r\n-    }\r\n-    const ev = findEventAtHour(hour);\r\n-    if (ev) {\r\n-      setFormData({\r\n-        name: ev.name,\r\n-        phone: ev.phone,\r\n-        type: ev.type,\r\n-        status: ev.status || 'confirmed',\r\n-      });\r\n-    } else {\r\n-      setFormData({ name: '', phone: '', type: 'Point', status: 'confirmed' });\r\n-    }\r\n-    setEditingHour(hour);\r\n-    setErrors({});\r\n-    setOpenEventForm(true);\r\n-  };\r\n-\r\n-  const handleDateClick = (arg) => {\r\n-    const clickedDate = arg.dateStr;\r\n-    const hasEventOnDate = events.some(ev => ev.date.startsWith(clickedDate));\r\n-\r\n-    if (isDateBeforeToday(clickedDate) && !hasEventOnDate) {\r\n-      alert('No events on this past date.');\r\n-      return;\r\n-    }\r\n-\r\n-    setSelectedDay(clickedDate);\r\n-    setOpenDayModal(true);\r\n-    setEditingHour(null);\r\n-    setFormData({ name: '', phone: '', type: 'Point', status: 'confirmed' });\r\n-    setErrors({});\r\n-  };\r\n-\r\n-  return (\r\n-    <>\r\n-      <NavBar\r\n-        email={profile?.email}\r\n-        onLogout={() => {\r\n-          localStorage.removeItem('token');\r\n-          // redirect if needed\r\n-        }}\r\n-      />\r\n-      <Container maxWidth=\"lg\" sx={{ mt: 4 }}>\r\n-        <Box boxShadow={3} p={2} bgcolor=\"white\" borderRadius={2}>\r\n-          <FullCalendar\r\n-            plugins={[dayGridPlugin, interactionPlugin]}\r\n-            initialView=\"dayGridMonth\"\r\n-            selectable={true}\r\n-            events={events}\r\n-            dateClick={handleDateClick}\r\n-          />\r\n-        </Box>\r\n-      </Container>\r\n-\r\n-      <Dialog\r\n-        open={openDayModal}\r\n-        onClose={() => setOpenDayModal(false)}\r\n-        maxWidth=\"lg\"\r\n-        fullWidth\r\n-      >\r\n-        <DialogTitle>Schedule for {selectedDay}</DialogTitle>\r\n-        <DialogContent>\r\n-          <Table>\r\n-            <TableHead>\r\n-              <TableRow>\r\n-                <TableCell>Hour</TableCell>\r\n-                <TableCell>Event Name</TableCell>\r\n-                <TableCell>Customer Name</TableCell>\r\n-                <TableCell>Customer Phone</TableCell>\r\n-                <TableCell>Status</TableCell>\r\n-                <TableCell>Action</TableCell>\r\n-              </TableRow>\r\n-            </TableHead>\r\n-\r\n-            <TableBody>\r\n-              {HOURS.map((hour) => {\r\n-                const ev = findEventAtHour(hour);\r\n-                const isPast = isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, hour);\r\n-\r\n-                return (\r\n-                  <TableRow key={hour}>\r\n-                    <TableCell>{formatHour(hour)}</TableCell>\r\n-                    <TableCell>{ev?.title || ''}</TableCell>\r\n-                    <TableCell>{ev?.name || ''}</TableCell>\r\n-                    <TableCell>{ev?.phone || ''}</TableCell>\r\n-                    <TableCell>{ev?.status || ''}</TableCell>\r\n-                    <TableCell>\r\n-                      {isPast ? (\r\n-                        <>\r\n-                          {ev ? (\r\n-                            <>\r\n-                              <IconButton size=\"small\" disabled title=\"Modify disabled on past date/time\">\r\n-                                <EditIcon />\r\n-                              </IconButton>\r\n-                              <IconButton size=\"small\" disabled title=\"Delete disabled on past date/time\">\r\n-                                <DeleteIcon />\r\n-                              </IconButton>\r\n-                            </>\r\n-                          ) : (\r\n-                            <IconButton size=\"small\" disabled title=\"Add disabled on past date/time\">\r\n-                              <AddIcon />\r\n-                            </IconButton>\r\n-                          )}\r\n-                        </>\r\n-                      ) : (\r\n-                        <>\r\n-                          <IconButton\r\n-                            color=\"primary\"\r\n-                            size=\"small\"\r\n-                            onClick={() => startEditing(hour)}\r\n-                            title={ev ? 'Modify' : 'Add'}\r\n-                          >\r\n-                            {ev ? <EditIcon /> : <AddIcon />}\r\n-                          </IconButton>\r\n-\r\n-                          {ev && (\r\n-                            <IconButton\r\n-                              color=\"error\"\r\n-                              size=\"small\"\r\n-                              onClick={() => handleDelete(hour)}\r\n-                              title=\"Delete\"\r\n-                            >\r\n-                              <DeleteIcon />\r\n-                            </IconButton>\r\n-                          )}\r\n-                        </>\r\n-                      )}\r\n-                    </TableCell>\r\n-                  </TableRow>\r\n-                );\r\n-              })}\r\n-            </TableBody>\r\n-          </Table>\r\n-        </DialogContent>\r\n-\r\n-        <DialogActions>\r\n-          <Button onClick={() => setOpenDayModal(false)}>Close</Button>\r\n-        </DialogActions>\r\n-      </Dialog>\r\n-\r\n-      <Dialog\r\n-        open={openEventForm}\r\n-        onClose={() => setOpenEventForm(false)}\r\n-        maxWidth=\"sm\"\r\n-        fullWidth\r\n-      >\r\n-        <DialogTitle>\r\n-          {editingHour !== null && findEventAtHour(editingHour)\r\n-            ? 'Modify Event'\r\n-            : 'Add Event'}\r\n-        </DialogTitle>\r\n-        <DialogContent>\r\n-          <Typography variant=\"subtitle1\" gutterBottom>\r\n-            For hour: {editingHour !== null ? formatHour(editingHour) : ''}\r\n-          </Typography>\r\n-\r\n-          <TextField\r\n-            margin=\"dense\"\r\n-            label=\"Customer Name\"\r\n-            fullWidth\r\n-            value={formData.name}\r\n-            onChange={(e) => setFormData({ ...formData, name: e.target.value })}\r\n-            error={!!errors.name}\r\n-            helperText={errors.name}\r\n-          />\r\n-          <TextField\r\n-            margin=\"dense\"\r\n-            label=\"Customer Phone\"\r\n-            fullWidth\r\n-            value={formData.phone}\r\n-            onChange={(e) => setFormData({ ...formData, phone: e.target.value })}\r\n-            error={!!errors.phone}\r\n-            helperText={errors.phone}\r\n-          />\r\n-          <TextField\r\n-            margin=\"dense\"\r\n-            select\r\n-            label=\"Type\"\r\n-            fullWidth\r\n-            value={formData.type}\r\n-            onChange={(e) => setFormData({ ...formData, type: e.target.value })}\r\n-          >\r\n-            <MenuItem value=\"Point\">Point</MenuItem>\r\n-            <MenuItem value=\"Rappel\">Rappel</MenuItem>\r\n-          </TextField>\r\n-\r\n-          {/* Status field only editable if 1 hour passed */}\r\n-          {canModifyStatus() ? (\r\n-            <TextField\r\n-              margin=\"dense\"\r\n-              select\r\n-              label=\"Status\"\r\n-              fullWidth\r\n-              value={formData.status}\r\n-              onChange={(e) => setFormData({ ...formData, status: e.target.value })}\r\n-              error={!!errors.status}\r\n-              helperText={errors.status}\r\n-            >\r\n-              <MenuItem value=\"confirmed\">CONFIRMED</MenuItem>\r\n-              <MenuItem value=\"completed\">COMPLETED</MenuItem>\r\n-            </TextField>\r\n-          ) : (\r\n-            <Typography\r\n-              variant=\"body2\"\r\n-              color=\"textSecondary\"\r\n-              sx={{ mt: 2, mb: 1 }}\r\n-            >\r\n-              Status can only be modified  one hour after the event time.\r\n-            </Typography>\r\n-          )}\r\n-        </DialogContent>\r\n-\r\n-        <DialogActions>\r\n-          <Button onClick={() => setOpenEventForm(false)}>Cancel</Button>\r\n-          <Button\r\n-            onClick={handleAddOrUpdate}\r\n-            variant=\"contained\"\r\n-            color=\"primary\"\r\n-            disabled={isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, editingHour)}\r\n-          >\r\n-            Save\r\n-          </Button>\r\n-        </DialogActions>\r\n-      </Dialog>\r\n-    </>\r\n-  );\r\n-}\r\n-import React, { useState, useEffect } from 'react';\r\n-import {\r\n-  Container,\r\n-  Box,\r\n-  Dialog,\r\n-  DialogTitle,\r\n-  DialogContent,\r\n-  DialogActions,\r\n-  Button,\r\n-  TextField,\r\n-  MenuItem,\r\n-  Table,\r\n-  TableHead,\r\n-  TableBody,\r\n-  TableRow,\r\n-  TableCell,\r\n-  Typography,\r\n-  IconButton,\r\n-} from '@mui/material';\r\n-import FullCalendar from '@fullcalendar/react';\r\n-import dayGridPlugin from '@fullcalendar/daygrid';\r\n-import interactionPlugin from '@fullcalendar/interaction';\r\n-import NavBar from '../components/NavBar';\r\n-\r\n-import AddIcon from '@mui/icons-material/Add';\r\n-import EditIcon from '@mui/icons-material/Edit';\r\n-import DeleteIcon from '@mui/icons-material/Delete';\r\n-\r\n-const HOURS = Array.from({ length: 17 }, (_, i) => 8 + i); // 08:00 to 00:00\r\n-\r\n-function formatHour(h) {\r\n-  return h === 24 ? '00:00' : `${h.toString().padStart(2, '0')}:00`;\r\n-}\r\n-\r\n-export default function Dashboard() {\r\n-  const [profile, setProfile] = useState(null);\r\n-  const [events, setEvents] = useState([]);\r\n-  const [selectedDay, setSelectedDay] = useState(null);\r\n-  const [openDayModal, setOpenDayModal] = useState(false);\r\n-\r\n-  const [openEventForm, setOpenEventForm] = useState(false);\r\n-  const [editingHour, setEditingHour] = useState(null);\r\n-  // Added status field with default 'confirmed'\r\n-  const [formData, setFormData] = useState({ name: '', phone: '', type: 'Point', status: 'CONFIRMED' });\r\n-  const [errors, setErrors] = useState({});\r\n-\r\n-  const token = localStorage.getItem('token');\r\n-  const authHeaders = {\r\n-    Authorization: `Bearer ${token}`,\r\n-    'Content-Type': 'application/json',\r\n-  };\r\n-\r\n-  useEffect(() => {\r\n-    if (!token) return;\r\n-\r\n-    fetch('http://localhost:5000/api/admin/profile', { headers: authHeaders })\r\n-      .then(res => (res.ok ? res.json() : Promise.reject()))\r\n-      .then(setProfile)\r\n-      .catch(() => {\r\n-        localStorage.removeItem('token');\r\n-      });\r\n-\r\n-    fetch('http://localhost:5000/api/events', { headers: authHeaders })\r\n-      .then(res => res.json())\r\n-      .then(setEvents)\r\n-      .catch(console.error);\r\n-  }, [token]);\r\n-\r\n-  const isDateBeforeToday = (dateStr) => {\r\n-    if (!dateStr) return false;\r\n-    const selected = new Date(dateStr);\r\n-    const today = new Date();\r\n-    today.setHours(0, 0, 0, 0);\r\n-    return selected < today;\r\n-  };\r\n-\r\n-  const isHourInPast = (dateStr, hour) => {\r\n-    if (!dateStr) return false;\r\n-    const now = new Date();\r\n-    const selected = new Date(dateStr);\r\n-    selected.setHours(hour, 0, 0, 0);\r\n-    return selected < now;\r\n-  };\r\n-\r\n-  const findEventAtHour = (hour) => {\r\n-    if (!selectedDay) return null;\r\n-    const hourStr = hour === 24 ? '00:00' : formatHour(hour);\r\n-    const prefix = `${selectedDay}T${hourStr}`;\r\n-    return events.find(e => e.date.startsWith(prefix));\r\n-  };\r\n-\r\n-  const validate = () => {\r\n-    const errs = {};\r\n-    if (!formData.name.trim()) errs.name = 'Name is required';\r\n-    if (!formData.phone.trim()) errs.phone = 'Phone is required';\r\n-    else if (!/^\\d{10}$/.test(formData.phone)) errs.phone = 'Phone must be 10 digits';\r\n-    if (!['Point', 'Rappel'].includes(formData.type)) errs.type = 'Invalid type';\r\n-    // Add validation for status (must be confirmed or completed)\r\n-    if (!['CONFIRMED', 'COMPLETED'].includes(formData.status)) errs.status = 'Invalid status';\r\n-    setErrors(errs);\r\n-    return Object.keys(errs).length === 0;\r\n-  };\r\n-\r\n-  // Helper: Can status be modified? Event date/time passed by at least 1 hour?\r\n-  const canModifyStatus = () => {\r\n-    if (!selectedDay || editingHour === null) return false;\r\n-    const eventDate = new Date(selectedDay);\r\n-    eventDate.setHours(editingHour, 0, 0, 0);\r\n-    const now = new Date();\r\n-    return now - eventDate >= 60 * 60 * 1000; // 1 hour in ms\r\n-  };\r\n-\r\n-  const handleAddOrUpdate = async () => {\r\n-    if (isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, editingHour)) {\r\n-      alert(\"You can't add or modify events for past date/time.\");\r\n-      return;\r\n-    }\r\n-    if (!validate()) return;\r\n-\r\n-    const hourStr = editingHour === 24 ? '00:00' : formatHour(editingHour);\r\n-    const dateTime = `${selectedDay}T${hourStr}:00`;\r\n-\r\n-    const eventPayload = {\r\n-      title: `${formData.type} - ${formData.name}`,\r\n-      date: dateTime,\r\n-      name: formData.name,\r\n-      phone: formData.phone,\r\n-      type: formData.type,\r\n-      status: formData.status,\r\n-    };\r\n-\r\n-    try {\r\n-      const existingEvent = findEventAtHour(editingHour);\r\n-      if (existingEvent) {\r\n-        const res = await fetch(`http://localhost:5000/api/events/${existingEvent._id}`, {\r\n-          method: 'PUT',\r\n-          headers: authHeaders,\r\n-          body: JSON.stringify(eventPayload),\r\n-        });\r\n-        const updated = await res.json();\r\n-        setEvents(events.map(e => (e._id === updated._id ? updated : e)));\r\n-      } else {\r\n-        const res = await fetch('http://localhost:5000/api/events', {\r\n-          method: 'POST',\r\n-          headers: authHeaders,\r\n-          body: JSON.stringify(eventPayload),\r\n-        });\r\n-        const created = await res.json();\r\n-        setEvents([...events, created]);\r\n-      }\r\n-      setOpenEventForm(false);\r\n-      setEditingHour(null);\r\n-      setFormData({ name: '', phone: '', type: 'Point', status: 'CONFIRMED' });\r\n-      setErrors({});\r\n-    } catch (err) {\r\n-      console.error('Save event failed:', err);\r\n-    }\r\n-  };\r\n-\r\n-  const handleDelete = async (hourToDelete) => {\r\n-    if (isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, hourToDelete)) {\r\n-      alert(\"You can't delete events from past date/time.\");\r\n-      return;\r\n-    }\r\n-    const existingEvent = findEventAtHour(hourToDelete);\r\n-    if (!existingEvent) return;\r\n-\r\n-    try {\r\n-      await fetch(`http://localhost:5000/api/events/${existingEvent._id}`, {\r\n-        method: 'DELETE',\r\n-        headers: authHeaders,\r\n-      });\r\n-      setEvents(events.filter(e => e._id !== existingEvent._id));\r\n-      if (editingHour === hourToDelete) {\r\n-        setOpenEventForm(false);\r\n-        setEditingHour(null);\r\n-        setFormData({ name: '', phone: '', type: 'Point', status: 'confirmed' });\r\n-        setErrors({});\r\n-      }\r\n-    } catch (err) {\r\n-      console.error('Delete event failed:', err);\r\n-    }\r\n-  };\r\n-\r\n-  const startEditing = (hour) => {\r\n-    if (isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, hour)) {\r\n-      alert(\"You can't add or modify events for past date/time.\");\r\n-      return;\r\n-    }\r\n-    const ev = findEventAtHour(hour);\r\n-    if (ev) {\r\n-      setFormData({\r\n-        name: ev.name,\r\n-        phone: ev.phone,\r\n-        type: ev.type,\r\n-        status: ev.status || 'confirmed',\r\n-      });\r\n-    } else {\r\n-      setFormData({ name: '', phone: '', type: 'Point', status: 'confirmed' });\r\n-    }\r\n-    setEditingHour(hour);\r\n-    setErrors({});\r\n-    setOpenEventForm(true);\r\n-  };\r\n-\r\n-  const handleDateClick = (arg) => {\r\n-    const clickedDate = arg.dateStr;\r\n-    const hasEventOnDate = events.some(ev => ev.date.startsWith(clickedDate));\r\n-\r\n-    if (isDateBeforeToday(clickedDate) && !hasEventOnDate) {\r\n-      alert('No events on this past date.');\r\n-      return;\r\n-    }\r\n-\r\n-    setSelectedDay(clickedDate);\r\n-    setOpenDayModal(true);\r\n-    setEditingHour(null);\r\n-    setFormData({ name: '', phone: '', type: 'Point', status: 'confirmed' });\r\n-    setErrors({});\r\n-  };\r\n-\r\n-  return (\r\n-    <>\r\n-      <NavBar\r\n-        email={profile?.email}\r\n-        onLogout={() => {\r\n-          localStorage.removeItem('token');\r\n-          // redirect if needed\r\n-        }}\r\n-      />\r\n-      <Container maxWidth=\"lg\" sx={{ mt: 4 }}>\r\n-        <Box boxShadow={3} p={2} bgcolor=\"white\" borderRadius={2}>\r\n-          <FullCalendar\r\n-            plugins={[dayGridPlugin, interactionPlugin]}\r\n-            initialView=\"dayGridMonth\"\r\n-            selectable={true}\r\n-            events={events}\r\n-            dateClick={handleDateClick}\r\n-          />\r\n-        </Box>\r\n-      </Container>\r\n-\r\n-      <Dialog\r\n-        open={openDayModal}\r\n-        onClose={() => setOpenDayModal(false)}\r\n-        maxWidth=\"lg\"\r\n-        fullWidth\r\n-      >\r\n-        <DialogTitle>Schedule for {selectedDay}</DialogTitle>\r\n-        <DialogContent>\r\n-          <Table>\r\n-            <TableHead>\r\n-              <TableRow>\r\n-                <TableCell>Hour</TableCell>\r\n-                <TableCell>Event Name</TableCell>\r\n-                <TableCell>Customer Name</TableCell>\r\n-                <TableCell>Customer Phone</TableCell>\r\n-                <TableCell>Status</TableCell>\r\n-                <TableCell>Action</TableCell>\r\n-              </TableRow>\r\n-            </TableHead>\r\n-\r\n-            <TableBody>\r\n-              {HOURS.map((hour) => {\r\n-                const ev = findEventAtHour(hour);\r\n-                const isPast = isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, hour);\r\n-\r\n-                return (\r\n-                  <TableRow key={hour}>\r\n-                    <TableCell>{formatHour(hour)}</TableCell>\r\n-                    <TableCell>{ev?.title || ''}</TableCell>\r\n-                    <TableCell>{ev?.name || ''}</TableCell>\r\n-                    <TableCell>{ev?.phone || ''}</TableCell>\r\n-                    <TableCell>{ev?.status || ''}</TableCell>\r\n-                    <TableCell>\r\n-                      {isPast ? (\r\n-                        <>\r\n-                          {ev ? (\r\n-                            <>\r\n-                              <IconButton size=\"small\" disabled title=\"Modify disabled on past date/time\">\r\n-                                <EditIcon />\r\n-                              </IconButton>\r\n-                              <IconButton size=\"small\" disabled title=\"Delete disabled on past date/time\">\r\n-                                <DeleteIcon />\r\n-                              </IconButton>\r\n-                            </>\r\n-                          ) : (\r\n-                            <IconButton size=\"small\" disabled title=\"Add disabled on past date/time\">\r\n-                              <AddIcon />\r\n-                            </IconButton>\r\n-                          )}\r\n-                        </>\r\n-                      ) : (\r\n-                        <>\r\n-                          <IconButton\r\n-                            color=\"primary\"\r\n-                            size=\"small\"\r\n-                            onClick={() => startEditing(hour)}\r\n-                            title={ev ? 'Modify' : 'Add'}\r\n-                          >\r\n-                            {ev ? <EditIcon /> : <AddIcon />}\r\n-                          </IconButton>\r\n-\r\n-                          {ev && (\r\n-                            <IconButton\r\n-                              color=\"error\"\r\n-                              size=\"small\"\r\n-                              onClick={() => handleDelete(hour)}\r\n-                              title=\"Delete\"\r\n-                            >\r\n-                              <DeleteIcon />\r\n-                            </IconButton>\r\n-                          )}\r\n-                        </>\r\n-                      )}\r\n-                    </TableCell>\r\n-                  </TableRow>\r\n-                );\r\n-              })}\r\n-            </TableBody>\r\n-          </Table>\r\n-        </DialogContent>\r\n-\r\n-        <DialogActions>\r\n-          <Button onClick={() => setOpenDayModal(false)}>Close</Button>\r\n-        </DialogActions>\r\n-      </Dialog>\r\n-\r\n-      <Dialog\r\n-        open={openEventForm}\r\n-        onClose={() => setOpenEventForm(false)}\r\n-        maxWidth=\"sm\"\r\n-        fullWidth\r\n-      >\r\n-        <DialogTitle>\r\n-          {editingHour !== null && findEventAtHour(editingHour)\r\n-            ? 'Modify Event'\r\n-            : 'Add Event'}\r\n-        </DialogTitle>\r\n-        <DialogContent>\r\n-          <Typography variant=\"subtitle1\" gutterBottom>\r\n-            For hour: {editingHour !== null ? formatHour(editingHour) : ''}\r\n-          </Typography>\r\n-\r\n-          <TextField\r\n-            margin=\"dense\"\r\n-            label=\"Customer Name\"\r\n-            fullWidth\r\n-            value={formData.name}\r\n-            onChange={(e) => setFormData({ ...formData, name: e.target.value })}\r\n-            error={!!errors.name}\r\n-            helperText={errors.name}\r\n-          />\r\n-          <TextField\r\n-            margin=\"dense\"\r\n-            label=\"Customer Phone\"\r\n-            fullWidth\r\n-            value={formData.phone}\r\n-            onChange={(e) => setFormData({ ...formData, phone: e.target.value })}\r\n-            error={!!errors.phone}\r\n-            helperText={errors.phone}\r\n-          />\r\n-          <TextField\r\n-            margin=\"dense\"\r\n-            select\r\n-            label=\"Type\"\r\n-            fullWidth\r\n-            value={formData.type}\r\n-            onChange={(e) => setFormData({ ...formData, type: e.target.value })}\r\n-          >\r\n-            <MenuItem value=\"Point\">Point</MenuItem>\r\n-            <MenuItem value=\"Rappel\">Rappel</MenuItem>\r\n-          </TextField>\r\n-\r\n-          {/* Status field only editable if 1 hour passed */}\r\n-          {canModifyStatus() ? (\r\n-            <TextField\r\n-              margin=\"dense\"\r\n-              select\r\n-              label=\"Status\"\r\n-              fullWidth\r\n-              value={formData.status}\r\n-              onChange={(e) => setFormData({ ...formData, status: e.target.value })}\r\n-              error={!!errors.status}\r\n-              helperText={errors.status}\r\n-            >\r\n-              <MenuItem value=\"confirmed\">CONFIRMED</MenuItem>\r\n-              <MenuItem value=\"completed\">COMPLETED</MenuItem>\r\n-            </TextField>\r\n-          ) : (\r\n-            <Typography\r\n-              variant=\"body2\"\r\n-              color=\"textSecondary\"\r\n-              sx={{ mt: 2, mb: 1 }}\r\n-            >\r\n-              Status can only be modified  one hour after the event time.\r\n-            </Typography>\r\n-          )}\r\n-        </DialogContent>\r\n-\r\n-        <DialogActions>\r\n-          <Button onClick={() => setOpenEventForm(false)}>Cancel</Button>\r\n-          <Button\r\n-            onClick={handleAddOrUpdate}\r\n-            variant=\"contained\"\r\n-            color=\"primary\"\r\n-            disabled={isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, editingHour)}\r\n-          >\r\n-            Save\r\n-          </Button>\r\n-        </DialogActions>\r\n-      </Dialog>\r\n-    </>\r\n-  );\r\n-}\r\n-import React, { useState, useEffect } from 'react';\r\n-import {\r\n-  Container,\r\n-  Box,\r\n-  Dialog,\r\n-  DialogTitle,\r\n-  DialogContent,\r\n-  DialogActions,\r\n-  Button,\r\n-  TextField,\r\n-  MenuItem,\r\n-  Table,\r\n-  TableHead,\r\n-  TableBody,\r\n-  TableRow,\r\n-  TableCell,\r\n-  Typography,\r\n-  IconButton,\r\n-} from '@mui/material';\r\n-import FullCalendar from '@fullcalendar/react';\r\n-import dayGridPlugin from '@fullcalendar/daygrid';\r\n-import interactionPlugin from '@fullcalendar/interaction';\r\n-import NavBar from '../components/NavBar';\r\n-\r\n-import AddIcon from '@mui/icons-material/Add';\r\n-import EditIcon from '@mui/icons-material/Edit';\r\n-import DeleteIcon from '@mui/icons-material/Delete';\r\n-\r\n-const HOURS = Array.from({ length: 17 }, (_, i) => 8 + i); // 08:00 to 00:00\r\n-\r\n-function formatHour(h) {\r\n-  return h === 24 ? '00:00' : `${h.toString().padStart(2, '0')}:00`;\r\n-}\r\n-\r\n-export default function Dashboard() {\r\n-  const [profile, setProfile] = useState(null);\r\n-  const [events, setEvents] = useState([]);\r\n-  const [selectedDay, setSelectedDay] = useState(null);\r\n-  const [openDayModal, setOpenDayModal] = useState(false);\r\n-\r\n-  const [openEventForm, setOpenEventForm] = useState(false);\r\n-  const [editingHour, setEditingHour] = useState(null);\r\n-  // Added status field with default 'confirmed'\r\n-  const [formData, setFormData] = useState({ name: '', phone: '', type: 'Point', status: 'CONFIRMED' });\r\n-  const [errors, setErrors] = useState({});\r\n-\r\n-  const token = localStorage.getItem('token');\r\n-  const authHeaders = {\r\n-    Authorization: `Bearer ${token}`,\r\n-    'Content-Type': 'application/json',\r\n-  };\r\n-\r\n-  useEffect(() => {\r\n-    if (!token) return;\r\n-\r\n-    fetch('http://localhost:5000/api/admin/profile', { headers: authHeaders })\r\n-      .then(res => (res.ok ? res.json() : Promise.reject()))\r\n-      .then(setProfile)\r\n-      .catch(() => {\r\n-        localStorage.removeItem('token');\r\n-      });\r\n-\r\n-    fetch('http://localhost:5000/api/events', { headers: authHeaders })\r\n-      .then(res => res.json())\r\n-      .then(setEvents)\r\n-      .catch(console.error);\r\n-  }, [token]);\r\n-\r\n-  const isDateBeforeToday = (dateStr) => {\r\n-    if (!dateStr) return false;\r\n-    const selected = new Date(dateStr);\r\n-    const today = new Date();\r\n-    today.setHours(0, 0, 0, 0);\r\n-    return selected < today;\r\n-  };\r\n-\r\n-  const isHourInPast = (dateStr, hour) => {\r\n-    if (!dateStr) return false;\r\n-    const now = new Date();\r\n-    const selected = new Date(dateStr);\r\n-    selected.setHours(hour, 0, 0, 0);\r\n-    return selected < now;\r\n-  };\r\n-\r\n-  const findEventAtHour = (hour) => {\r\n-    if (!selectedDay) return null;\r\n-    const hourStr = hour === 24 ? '00:00' : formatHour(hour);\r\n-    const prefix = `${selectedDay}T${hourStr}`;\r\n-    return events.find(e => e.date.startsWith(prefix));\r\n-  };\r\n-\r\n-  const validate = () => {\r\n-    const errs = {};\r\n-    if (!formData.name.trim()) errs.name = 'Name is required';\r\n-    if (!formData.phone.trim()) errs.phone = 'Phone is required';\r\n-    else if (!/^\\d{10}$/.test(formData.phone)) errs.phone = 'Phone must be 10 digits';\r\n-    if (!['Point', 'Rappel'].includes(formData.type)) errs.type = 'Invalid type';\r\n-    // Add validation for status (must be confirmed or completed)\r\n-    if (!['CONFIRMED', 'COMPLETED'].includes(formData.status)) errs.status = 'Invalid status';\r\n-    setErrors(errs);\r\n-    return Object.keys(errs).length === 0;\r\n-  };\r\n-\r\n-  // Helper: Can status be modified? Event date/time passed by at least 1 hour?\r\n-  const canModifyStatus = () => {\r\n-    if (!selectedDay || editingHour === null) return false;\r\n-    const eventDate = new Date(selectedDay);\r\n-    eventDate.setHours(editingHour, 0, 0, 0);\r\n-    const now = new Date();\r\n-    return now - eventDate >= 60 * 60 * 1000; // 1 hour in ms\r\n-  };\r\n-\r\n-  const handleAddOrUpdate = async () => {\r\n-    if (isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, editingHour)) {\r\n-      alert(\"You can't add or modify events for past date/time.\");\r\n-      return;\r\n-    }\r\n-    if (!validate()) return;\r\n-\r\n-    const hourStr = editingHour === 24 ? '00:00' : formatHour(editingHour);\r\n-    const dateTime = `${selectedDay}T${hourStr}:00`;\r\n-\r\n-    const eventPayload = {\r\n-      title: `${formData.type} - ${formData.name}`,\r\n-      date: dateTime,\r\n-      name: formData.name,\r\n-      phone: formData.phone,\r\n-      type: formData.type,\r\n-      status: formData.status,\r\n-    };\r\n-\r\n-    try {\r\n-      const existingEvent = findEventAtHour(editingHour);\r\n-      if (existingEvent) {\r\n-        const res = await fetch(`http://localhost:5000/api/events/${existingEvent._id}`, {\r\n-          method: 'PUT',\r\n-          headers: authHeaders,\r\n-          body: JSON.stringify(eventPayload),\r\n-        });\r\n-        const updated = await res.json();\r\n-        setEvents(events.map(e => (e._id === updated._id ? updated : e)));\r\n-      } else {\r\n-        const res = await fetch('http://localhost:5000/api/events', {\r\n-          method: 'POST',\r\n-          headers: authHeaders,\r\n-          body: JSON.stringify(eventPayload),\r\n-        });\r\n-        const created = await res.json();\r\n-        setEvents([...events, created]);\r\n-      }\r\n-      setOpenEventForm(false);\r\n-      setEditingHour(null);\r\n-      setFormData({ name: '', phone: '', type: 'Point', status: 'confirmed' });\r\n-      setErrors({});\r\n-    } catch (err) {\r\n-      console.error('Save event failed:', err);\r\n-    }\r\n-  };\r\n-\r\n-  const handleDelete = async (hourToDelete) => {\r\n-    if (isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, hourToDelete)) {\r\n-      alert(\"You can't delete events from past date/time.\");\r\n-      return;\r\n-    }\r\n-    const existingEvent = findEventAtHour(hourToDelete);\r\n-    if (!existingEvent) return;\r\n-\r\n-    try {\r\n-      await fetch(`http://localhost:5000/api/events/${existingEvent._id}`, {\r\n-        method: 'DELETE',\r\n-        headers: authHeaders,\r\n-      });\r\n-      setEvents(events.filter(e => e._id !== existingEvent._id));\r\n-      if (editingHour === hourToDelete) {\r\n-        setOpenEventForm(false);\r\n-        setEditingHour(null);\r\n-        setFormData({ name: '', phone: '', type: 'Point', status: 'confirmed' });\r\n-        setErrors({});\r\n-      }\r\n-    } catch (err) {\r\n-      console.error('Delete event failed:', err);\r\n-    }\r\n-  };\r\n-\r\n-  const startEditing = (hour) => {\r\n-    if (isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, hour)) {\r\n-      alert(\"You can't add or modify events for past date/time.\");\r\n-      return;\r\n-    }\r\n-    const ev = findEventAtHour(hour);\r\n-    if (ev) {\r\n-      setFormData({\r\n-        name: ev.name,\r\n-        phone: ev.phone,\r\n-        type: ev.type,\r\n-        status: ev.status || 'confirmed',\r\n-      });\r\n-    } else {\r\n-      setFormData({ name: '', phone: '', type: 'Point', status: 'confirmed' });\r\n-    }\r\n-    setEditingHour(hour);\r\n-    setErrors({});\r\n-    setOpenEventForm(true);\r\n-  };\r\n-\r\n-  const handleDateClick = (arg) => {\r\n-    const clickedDate = arg.dateStr;\r\n-    const hasEventOnDate = events.some(ev => ev.date.startsWith(clickedDate));\r\n-\r\n-    if (isDateBeforeToday(clickedDate) && !hasEventOnDate) {\r\n-      alert('No events on this past date.');\r\n-      return;\r\n-    }\r\n-\r\n-    setSelectedDay(clickedDate);\r\n-    setOpenDayModal(true);\r\n-    setEditingHour(null);\r\n-    setFormData({ name: '', phone: '', type: 'Point', status: 'confirmed' });\r\n-    setErrors({});\r\n-  };\r\n-\r\n-  return (\r\n-    <>\r\n-      <NavBar\r\n-        email={profile?.email}\r\n-        onLogout={() => {\r\n-          localStorage.removeItem('token');\r\n-          // redirect if needed\r\n-        }}\r\n-      />\r\n-      <Container maxWidth=\"lg\" sx={{ mt: 4 }}>\r\n-        <Box boxShadow={3} p={2} bgcolor=\"white\" borderRadius={2}>\r\n-          <FullCalendar\r\n-            plugins={[dayGridPlugin, interactionPlugin]}\r\n-            initialView=\"dayGridMonth\"\r\n-            selectable={true}\r\n-            events={events}\r\n-            dateClick={handleDateClick}\r\n-          />\r\n-        </Box>\r\n-      </Container>\r\n-\r\n-      <Dialog\r\n-        open={openDayModal}\r\n-        onClose={() => setOpenDayModal(false)}\r\n-        maxWidth=\"lg\"\r\n-        fullWidth\r\n-      >\r\n-        <DialogTitle>Schedule for {selectedDay}</DialogTitle>\r\n-        <DialogContent>\r\n-          <Table>\r\n-            <TableHead>\r\n-              <TableRow>\r\n-                <TableCell>Hour</TableCell>\r\n-                <TableCell>Event Name</TableCell>\r\n-                <TableCell>Customer Name</TableCell>\r\n-                <TableCell>Customer Phone</TableCell>\r\n-                <TableCell>Status</TableCell>\r\n-                <TableCell>Action</TableCell>\r\n-              </TableRow>\r\n-            </TableHead>\r\n-\r\n-            <TableBody>\r\n-              {HOURS.map((hour) => {\r\n-                const ev = findEventAtHour(hour);\r\n-                const isPast = isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, hour);\r\n-\r\n-                return (\r\n-                  <TableRow key={hour}>\r\n-                    <TableCell>{formatHour(hour)}</TableCell>\r\n-                    <TableCell>{ev?.title || ''}</TableCell>\r\n-                    <TableCell>{ev?.name || ''}</TableCell>\r\n-                    <TableCell>{ev?.phone || ''}</TableCell>\r\n-                    <TableCell>{ev?.status || ''}</TableCell>\r\n-                    <TableCell>\r\n-                      {isPast ? (\r\n-                        <>\r\n-                          {ev ? (\r\n-                            <>\r\n-                              <IconButton size=\"small\" disabled title=\"Modify disabled on past date/time\">\r\n-                                <EditIcon />\r\n-                              </IconButton>\r\n-                              <IconButton size=\"small\" disabled title=\"Delete disabled on past date/time\">\r\n-                                <DeleteIcon />\r\n-                              </IconButton>\r\n-                            </>\r\n-                          ) : (\r\n-                            <IconButton size=\"small\" disabled title=\"Add disabled on past date/time\">\r\n-                              <AddIcon />\r\n-                            </IconButton>\r\n-                          )}\r\n-                        </>\r\n-                      ) : (\r\n-                        <>\r\n-                          <IconButton\r\n-                            color=\"primary\"\r\n-                            size=\"small\"\r\n-                            onClick={() => startEditing(hour)}\r\n-                            title={ev ? 'Modify' : 'Add'}\r\n-                          >\r\n-                            {ev ? <EditIcon /> : <AddIcon />}\r\n-                          </IconButton>\r\n-\r\n-                          {ev && (\r\n-                            <IconButton\r\n-                              color=\"error\"\r\n-                              size=\"small\"\r\n-                              onClick={() => handleDelete(hour)}\r\n-                              title=\"Delete\"\r\n-                            >\r\n-                              <DeleteIcon />\r\n-                            </IconButton>\r\n-                          )}\r\n-                        </>\r\n-                      )}\r\n-                    </TableCell>\r\n-                  </TableRow>\r\n-                );\r\n-              })}\r\n-            </TableBody>\r\n-          </Table>\r\n-        </DialogContent>\r\n-\r\n-        <DialogActions>\r\n-          <Button onClick={() => setOpenDayModal(false)}>Close</Button>\r\n-        </DialogActions>\r\n-      </Dialog>\r\n-\r\n-      <Dialog\r\n-        open={openEventForm}\r\n-        onClose={() => setOpenEventForm(false)}\r\n-        maxWidth=\"sm\"\r\n-        fullWidth\r\n-      >\r\n-        <DialogTitle>\r\n-          {editingHour !== null && findEventAtHour(editingHour)\r\n-            ? 'Modify Event'\r\n-            : 'Add Event'}\r\n-        </DialogTitle>\r\n-        <DialogContent>\r\n-          <Typography variant=\"subtitle1\" gutterBottom>\r\n-            For hour: {editingHour !== null ? formatHour(editingHour) : ''}\r\n-          </Typography>\r\n-\r\n-          <TextField\r\n-            margin=\"dense\"\r\n-            label=\"Customer Name\"\r\n-            fullWidth\r\n-            value={formData.name}\r\n-            onChange={(e) => setFormData({ ...formData, name: e.target.value })}\r\n-            error={!!errors.name}\r\n-            helperText={errors.name}\r\n-          />\r\n-          <TextField\r\n-            margin=\"dense\"\r\n-            label=\"Customer Phone\"\r\n-            fullWidth\r\n-            value={formData.phone}\r\n-            onChange={(e) => setFormData({ ...formData, phone: e.target.value })}\r\n-            error={!!errors.phone}\r\n-            helperText={errors.phone}\r\n-          />\r\n-          <TextField\r\n-            margin=\"dense\"\r\n-            select\r\n-            label=\"Type\"\r\n-            fullWidth\r\n-            value={formData.type}\r\n-            onChange={(e) => setFormData({ ...formData, type: e.target.value })}\r\n-          >\r\n-            <MenuItem value=\"Point\">Point</MenuItem>\r\n-            <MenuItem value=\"Rappel\">Rappel</MenuItem>\r\n-          </TextField>\r\n-\r\n-          {/* Status field only editable if 1 hour passed */}\r\n-          {canModifyStatus() ? (\r\n-            <TextField\r\n-              margin=\"dense\"\r\n-              select\r\n-              label=\"Status\"\r\n-              fullWidth\r\n-              value={formData.status}\r\n-              onChange={(e) => setFormData({ ...formData, status: e.target.value })}\r\n-              error={!!errors.status}\r\n-              helperText={errors.status}\r\n-            >\r\n-              <MenuItem value=\"confirmed\">CONFIRMED</MenuItem>\r\n-              <MenuItem value=\"completed\">COMPLETED</MenuItem>\r\n-            </TextField>\r\n-          ) : (\r\n-            <Typography\r\n-              variant=\"body2\"\r\n-              color=\"textSecondary\"\r\n-              sx={{ mt: 2, mb: 1 }}\r\n-            >\r\n-              Status can only be modified  one hour after the event time.\r\n-            </Typography>\r\n-          )}\r\n-        </DialogContent>\r\n-\r\n-        <DialogActions>\r\n-          <Button onClick={() => setOpenEventForm(false)}>Cancel</Button>\r\n-          <Button\r\n-            onClick={handleAddOrUpdate}\r\n-            variant=\"contained\"\r\n-            color=\"primary\"\r\n-            disabled={isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, editingHour)}\r\n-          >\r\n-            Save\r\n-          </Button>\r\n-        </DialogActions>\r\n-      </Dialog>\r\n-    </>\r\n-  );\r\n-}\r\n-import React, { useState, useEffect } from 'react';\r\n-import {\r\n-  Container,\r\n-  Box,\r\n-  Dialog,\r\n-  DialogTitle,\r\n-  DialogContent,\r\n-  DialogActions,\r\n-  Button,\r\n-  TextField,\r\n-  MenuItem,\r\n-  Table,\r\n-  TableHead,\r\n-  TableBody,\r\n-  TableRow,\r\n-  TableCell,\r\n-  Typography,\r\n-  IconButton,\r\n-} from '@mui/material';\r\n-import FullCalendar from '@fullcalendar/react';\r\n-import dayGridPlugin from '@fullcalendar/daygrid';\r\n-import interactionPlugin from '@fullcalendar/interaction';\r\n-import NavBar from '../components/NavBar';\r\n-\r\n-import AddIcon from '@mui/icons-material/Add';\r\n-import EditIcon from '@mui/icons-material/Edit';\r\n-import DeleteIcon from '@mui/icons-material/Delete';\r\n-\r\n-const HOURS = Array.from({ length: 17 }, (_, i) => 8 + i); // 08:00 to 00:00\r\n-\r\n-function formatHour(h) {\r\n-  return h === 24 ? '00:00' : `${h.toString().padStart(2, '0')}:00`;\r\n-}\r\n-\r\n-export default function Dashboard() {\r\n-  const [profile, setProfile] = useState(null);\r\n-  const [events, setEvents] = useState([]);\r\n-  const [selectedDay, setSelectedDay] = useState(null);\r\n-  const [openDayModal, setOpenDayModal] = useState(false);\r\n-\r\n-  const [openEventForm, setOpenEventForm] = useState(false);\r\n-  const [editingHour, setEditingHour] = useState(null);\r\n-  // Added status field with default 'confirmed'\r\n-  const [formData, setFormData] = useState({ name: '', phone: '', type: 'Point', status: 'CONFIRMED' });\r\n-  const [errors, setErrors] = useState({});\r\n-\r\n-  const token = localStorage.getItem('token');\r\n-  const authHeaders = {\r\n-    Authorization: `Bearer ${token}`,\r\n-    'Content-Type': 'application/json',\r\n-  };\r\n-\r\n-  useEffect(() => {\r\n-    if (!token) return;\r\n-\r\n-    fetch('http://localhost:5000/api/admin/profile', { headers: authHeaders })\r\n-      .then(res => (res.ok ? res.json() : Promise.reject()))\r\n-      .then(setProfile)\r\n-      .catch(() => {\r\n-        localStorage.removeItem('token');\r\n-      });\r\n-\r\n-    fetch('http://localhost:5000/api/events', { headers: authHeaders })\r\n-      .then(res => res.json())\r\n-      .then(setEvents)\r\n-      .catch(console.error);\r\n-  }, [token]);\r\n-\r\n-  const isDateBeforeToday = (dateStr) => {\r\n-    if (!dateStr) return false;\r\n-    const selected = new Date(dateStr);\r\n-    const today = new Date();\r\n-    today.setHours(0, 0, 0, 0);\r\n-    return selected < today;\r\n-  };\r\n-\r\n-  const isHourInPast = (dateStr, hour) => {\r\n-    if (!dateStr) return false;\r\n-    const now = new Date();\r\n-    const selected = new Date(dateStr);\r\n-    selected.setHours(hour, 0, 0, 0);\r\n-    return selected < now;\r\n-  };\r\n-\r\n-  const findEventAtHour = (hour) => {\r\n-    if (!selectedDay) return null;\r\n-    const hourStr = hour === 24 ? '00:00' : formatHour(hour);\r\n-    const prefix = `${selectedDay}T${hourStr}`;\r\n-    return events.find(e => e.date.startsWith(prefix));\r\n-  };\r\n-\r\n-  const validate = () => {\r\n-    const errs = {};\r\n-    if (!formData.name.trim()) errs.name = 'Name is required';\r\n-    if (!formData.phone.trim()) errs.phone = 'Phone is required';\r\n-    else if (!/^\\d{10}$/.test(formData.phone)) errs.phone = 'Phone must be 10 digits';\r\n-    if (!['Point', 'Rappel'].includes(formData.type)) errs.type = 'Invalid type';\r\n-    // Add validation for status (must be confirmed or completed)\r\n-    if (!['', 'completed'].includes(formData.status)) errs.status = 'Invalid status';\r\n-    setErrors(errs);\r\n-    return Object.keys(errs).length === 0;\r\n-  };\r\n-\r\n-  // Helper: Can status be modified? Event date/time passed by at least 1 hour?\r\n-  const canModifyStatus = () => {\r\n-    if (!selectedDay || editingHour === null) return false;\r\n-    const eventDate = new Date(selectedDay);\r\n-    eventDate.setHours(editingHour, 0, 0, 0);\r\n-    const now = new Date();\r\n-    return now - eventDate >= 60 * 60 * 1000; // 1 hour in ms\r\n-  };\r\n-\r\n-  const handleAddOrUpdate = async () => {\r\n-    if (isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, editingHour)) {\r\n-      alert(\"You can't add or modify events for past date/time.\");\r\n-      return;\r\n-    }\r\n-    if (!validate()) return;\r\n-\r\n-    const hourStr = editingHour === 24 ? '00:00' : formatHour(editingHour);\r\n-    const dateTime = `${selectedDay}T${hourStr}:00`;\r\n-\r\n-    const eventPayload = {\r\n-      title: `${formData.type} - ${formData.name}`,\r\n-      date: dateTime,\r\n-      name: formData.name,\r\n-      phone: formData.phone,\r\n-      type: formData.type,\r\n-      status: formData.status,\r\n-    };\r\n-\r\n-    try {\r\n-      const existingEvent = findEventAtHour(editingHour);\r\n-      if (existingEvent) {\r\n-        const res = await fetch(`http://localhost:5000/api/events/${existingEvent._id}`, {\r\n-          method: 'PUT',\r\n-          headers: authHeaders,\r\n-          body: JSON.stringify(eventPayload),\r\n-        });\r\n-        const updated = await res.json();\r\n-        setEvents(events.map(e => (e._id === updated._id ? updated : e)));\r\n-      } else {\r\n-        const res = await fetch('http://localhost:5000/api/events', {\r\n-          method: 'POST',\r\n-          headers: authHeaders,\r\n-          body: JSON.stringify(eventPayload),\r\n-        });\r\n-        const created = await res.json();\r\n-        setEvents([...events, created]);\r\n-      }\r\n-      setOpenEventForm(false);\r\n-      setEditingHour(null);\r\n-      setFormData({ name: '', phone: '', type: 'Point', status: 'confirmed' });\r\n-      setErrors({});\r\n-    } catch (err) {\r\n-      console.error('Save event failed:', err);\r\n-    }\r\n-  };\r\n-\r\n-  const handleDelete = async (hourToDelete) => {\r\n-    if (isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, hourToDelete)) {\r\n-      alert(\"You can't delete events from past date/time.\");\r\n-      return;\r\n-    }\r\n-    const existingEvent = findEventAtHour(hourToDelete);\r\n-    if (!existingEvent) return;\r\n-\r\n-    try {\r\n-      await fetch(`http://localhost:5000/api/events/${existingEvent._id}`, {\r\n-        method: 'DELETE',\r\n-        headers: authHeaders,\r\n-      });\r\n-      setEvents(events.filter(e => e._id !== existingEvent._id));\r\n-      if (editingHour === hourToDelete) {\r\n-        setOpenEventForm(false);\r\n-        setEditingHour(null);\r\n-        setFormData({ name: '', phone: '', type: 'Point', status: 'confirmed' });\r\n-        setErrors({});\r\n-      }\r\n-    } catch (err) {\r\n-      console.error('Delete event failed:', err);\r\n-    }\r\n-  };\r\n-\r\n-  const startEditing = (hour) => {\r\n-    if (isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, hour)) {\r\n-      alert(\"You can't add or modify events for past date/time.\");\r\n-      return;\r\n-    }\r\n-    const ev = findEventAtHour(hour);\r\n-    if (ev) {\r\n-      setFormData({\r\n-        name: ev.name,\r\n-        phone: ev.phone,\r\n-        type: ev.type,\r\n-        status: ev.status || 'confirmed',\r\n-      });\r\n-    } else {\r\n-      setFormData({ name: '', phone: '', type: 'Point', status: 'confirmed' });\r\n-    }\r\n-    setEditingHour(hour);\r\n-    setErrors({});\r\n-    setOpenEventForm(true);\r\n-  };\r\n-\r\n-  const handleDateClick = (arg) => {\r\n-    const clickedDate = arg.dateStr;\r\n-    const hasEventOnDate = events.some(ev => ev.date.startsWith(clickedDate));\r\n-\r\n-    if (isDateBeforeToday(clickedDate) && !hasEventOnDate) {\r\n-      alert('No events on this past date.');\r\n-      return;\r\n-    }\r\n-\r\n-    setSelectedDay(clickedDate);\r\n-    setOpenDayModal(true);\r\n-    setEditingHour(null);\r\n-    setFormData({ name: '', phone: '', type: 'Point', status: 'confirmed' });\r\n-    setErrors({});\r\n-  };\r\n-\r\n-  return (\r\n-    <>\r\n-      <NavBar\r\n-        email={profile?.email}\r\n-        onLogout={() => {\r\n-          localStorage.removeItem('token');\r\n-          // redirect if needed\r\n-        }}\r\n-      />\r\n-      <Container maxWidth=\"lg\" sx={{ mt: 4 }}>\r\n-        <Box boxShadow={3} p={2} bgcolor=\"white\" borderRadius={2}>\r\n-          <FullCalendar\r\n-            plugins={[dayGridPlugin, interactionPlugin]}\r\n-            initialView=\"dayGridMonth\"\r\n-            selectable={true}\r\n-            events={events}\r\n-            dateClick={handleDateClick}\r\n-          />\r\n-        </Box>\r\n-      </Container>\r\n-\r\n-      <Dialog\r\n-        open={openDayModal}\r\n-        onClose={() => setOpenDayModal(false)}\r\n-        maxWidth=\"lg\"\r\n-        fullWidth\r\n-      >\r\n-        <DialogTitle>Schedule for {selectedDay}</DialogTitle>\r\n-        <DialogContent>\r\n-          <Table>\r\n-            <TableHead>\r\n-              <TableRow>\r\n-                <TableCell>Hour</TableCell>\r\n-                <TableCell>Event Name</TableCell>\r\n-                <TableCell>Customer Name</TableCell>\r\n-                <TableCell>Customer Phone</TableCell>\r\n-                <TableCell>Status</TableCell>\r\n-                <TableCell>Action</TableCell>\r\n-              </TableRow>\r\n-            </TableHead>\r\n-\r\n-            <TableBody>\r\n-              {HOURS.map((hour) => {\r\n-                const ev = findEventAtHour(hour);\r\n-                const isPast = isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, hour);\r\n-\r\n-                return (\r\n-                  <TableRow key={hour}>\r\n-                    <TableCell>{formatHour(hour)}</TableCell>\r\n-                    <TableCell>{ev?.title || ''}</TableCell>\r\n-                    <TableCell>{ev?.name || ''}</TableCell>\r\n-                    <TableCell>{ev?.phone || ''}</TableCell>\r\n-                    <TableCell>{ev?.status || ''}</TableCell>\r\n-                    <TableCell>\r\n-                      {isPast ? (\r\n-                        <>\r\n-                          {ev ? (\r\n-                            <>\r\n-                              <IconButton size=\"small\" disabled title=\"Modify disabled on past date/time\">\r\n-                                <EditIcon />\r\n-                              </IconButton>\r\n-                              <IconButton size=\"small\" disabled title=\"Delete disabled on past date/time\">\r\n-                                <DeleteIcon />\r\n-                              </IconButton>\r\n-                            </>\r\n-                          ) : (\r\n-                            <IconButton size=\"small\" disabled title=\"Add disabled on past date/time\">\r\n-                              <AddIcon />\r\n-                            </IconButton>\r\n-                          )}\r\n-                        </>\r\n-                      ) : (\r\n-                        <>\r\n-                          <IconButton\r\n-                            color=\"primary\"\r\n-                            size=\"small\"\r\n-                            onClick={() => startEditing(hour)}\r\n-                            title={ev ? 'Modify' : 'Add'}\r\n-                          >\r\n-                            {ev ? <EditIcon /> : <AddIcon />}\r\n-                          </IconButton>\r\n-\r\n-                          {ev && (\r\n-                            <IconButton\r\n-                              color=\"error\"\r\n-                              size=\"small\"\r\n-                              onClick={() => handleDelete(hour)}\r\n-                              title=\"Delete\"\r\n-                            >\r\n-                              <DeleteIcon />\r\n-                            </IconButton>\r\n-                          )}\r\n-                        </>\r\n-                      )}\r\n-                    </TableCell>\r\n-                  </TableRow>\r\n-                );\r\n-              })}\r\n-            </TableBody>\r\n-          </Table>\r\n-        </DialogContent>\r\n-\r\n-        <DialogActions>\r\n-          <Button onClick={() => setOpenDayModal(false)}>Close</Button>\r\n-        </DialogActions>\r\n-      </Dialog>\r\n-\r\n-      <Dialog\r\n-        open={openEventForm}\r\n-        onClose={() => setOpenEventForm(false)}\r\n-        maxWidth=\"sm\"\r\n-        fullWidth\r\n-      >\r\n-        <DialogTitle>\r\n-          {editingHour !== null && findEventAtHour(editingHour)\r\n-            ? 'Modify Event'\r\n-            : 'Add Event'}\r\n-        </DialogTitle>\r\n-        <DialogContent>\r\n-          <Typography variant=\"subtitle1\" gutterBottom>\r\n-            For hour: {editingHour !== null ? formatHour(editingHour) : ''}\r\n-          </Typography>\r\n-\r\n-          <TextField\r\n-            margin=\"dense\"\r\n-            label=\"Customer Name\"\r\n-            fullWidth\r\n-            value={formData.name}\r\n-            onChange={(e) => setFormData({ ...formData, name: e.target.value })}\r\n-            error={!!errors.name}\r\n-            helperText={errors.name}\r\n-          />\r\n-          <TextField\r\n-            margin=\"dense\"\r\n-            label=\"Customer Phone\"\r\n-            fullWidth\r\n-            value={formData.phone}\r\n-            onChange={(e) => setFormData({ ...formData, phone: e.target.value })}\r\n-            error={!!errors.phone}\r\n-            helperText={errors.phone}\r\n-          />\r\n-          <TextField\r\n-            margin=\"dense\"\r\n-            select\r\n-            label=\"Type\"\r\n-            fullWidth\r\n-            value={formData.type}\r\n-            onChange={(e) => setFormData({ ...formData, type: e.target.value })}\r\n-          >\r\n-            <MenuItem value=\"Point\">Point</MenuItem>\r\n-            <MenuItem value=\"Rappel\">Rappel</MenuItem>\r\n-          </TextField>\r\n-\r\n-          {/* Status field only editable if 1 hour passed */}\r\n-          {canModifyStatus() ? (\r\n-            <TextField\r\n-              margin=\"dense\"\r\n-              select\r\n-              label=\"Status\"\r\n-              fullWidth\r\n-              value={formData.status}\r\n-              onChange={(e) => setFormData({ ...formData, status: e.target.value })}\r\n-              error={!!errors.status}\r\n-              helperText={errors.status}\r\n-            >\r\n-              <MenuItem value=\"confirmed\">CONFIRMED</MenuItem>\r\n-              <MenuItem value=\"completed\">COMPLETED</MenuItem>\r\n-            </TextField>\r\n-          ) : (\r\n-            <Typography\r\n-              variant=\"body2\"\r\n-              color=\"textSecondary\"\r\n-              sx={{ mt: 2, mb: 1 }}\r\n-            >\r\n-              Status can only be modified  one hour after the event time.\r\n-            </Typography>\r\n-          )}\r\n-        </DialogContent>\r\n-\r\n-        <DialogActions>\r\n-          <Button onClick={() => setOpenEventForm(false)}>Cancel</Button>\r\n-          <Button\r\n-            onClick={handleAddOrUpdate}\r\n-            variant=\"contained\"\r\n-            color=\"primary\"\r\n-            disabled={isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, editingHour)}\r\n-          >\r\n-            Save\r\n-          </Button>\r\n-        </DialogActions>\r\n-      </Dialog>\r\n-    </>\r\n-  );\r\n-}\r\n-import React, { useState, useEffect } from 'react';\r\n-import {\r\n-  Container,\r\n-  Box,\r\n-  Dialog,\r\n-  DialogTitle,\r\n-  DialogContent,\r\n-  DialogActions,\r\n-  Button,\r\n-  TextField,\r\n-  MenuItem,\r\n-  Table,\r\n-  TableHead,\r\n-  TableBody,\r\n-  TableRow,\r\n-  TableCell,\r\n-  Typography,\r\n-  IconButton,\r\n-} from '@mui/material';\r\n-import FullCalendar from '@fullcalendar/react';\r\n-import dayGridPlugin from '@fullcalendar/daygrid';\r\n-import interactionPlugin from '@fullcalendar/interaction';\r\n-import NavBar from '../components/NavBar';\r\n-\r\n-import AddIcon from '@mui/icons-material/Add';\r\n-import EditIcon from '@mui/icons-material/Edit';\r\n-import DeleteIcon from '@mui/icons-material/Delete';\r\n-\r\n-const HOURS = Array.from({ length: 17 }, (_, i) => 8 + i); // 08:00 to 00:00\r\n-\r\n-function formatHour(h) {\r\n-  return h === 24 ? '00:00' : `${h.toString().padStart(2, '0')}:00`;\r\n-}\r\n-\r\n-export default function Dashboard() {\r\n-  const [profile, setProfile] = useState(null);\r\n-  const [events, setEvents] = useState([]);\r\n-  const [selectedDay, setSelectedDay] = useState(null);\r\n-  const [openDayModal, setOpenDayModal] = useState(false);\r\n-\r\n-  const [openEventForm, setOpenEventForm] = useState(false);\r\n-  const [editingHour, setEditingHour] = useState(null);\r\n-  // Added status field with default 'confirmed'\r\n-  const [formData, setFormData] = useState({ name: '', phone: '', type: 'Point', status: 'CONFIRMED' });\r\n-  const [errors, setErrors] = useState({});\r\n-\r\n-  const token = localStorage.getItem('token');\r\n-  const authHeaders = {\r\n-    Authorization: `Bearer ${token}`,\r\n-    'Content-Type': 'application/json',\r\n-  };\r\n-\r\n-  useEffect(() => {\r\n-    if (!token) return;\r\n-\r\n-    fetch('http://localhost:5000/api/admin/profile', { headers: authHeaders })\r\n-      .then(res => (res.ok ? res.json() : Promise.reject()))\r\n-      .then(setProfile)\r\n-      .catch(() => {\r\n-        localStorage.removeItem('token');\r\n-      });\r\n-\r\n-    fetch('http://localhost:5000/api/events', { headers: authHeaders })\r\n-      .then(res => res.json())\r\n-      .then(setEvents)\r\n-      .catch(console.error);\r\n-  }, [token]);\r\n-\r\n-  const isDateBeforeToday = (dateStr) => {\r\n-    if (!dateStr) return false;\r\n-    const selected = new Date(dateStr);\r\n-    const today = new Date();\r\n-    today.setHours(0, 0, 0, 0);\r\n-    return selected < today;\r\n-  };\r\n-\r\n-  const isHourInPast = (dateStr, hour) => {\r\n-    if (!dateStr) return false;\r\n-    const now = new Date();\r\n-    const selected = new Date(dateStr);\r\n-    selected.setHours(hour, 0, 0, 0);\r\n-    return selected < now;\r\n-  };\r\n-\r\n-  const findEventAtHour = (hour) => {\r\n-    if (!selectedDay) return null;\r\n-    const hourStr = hour === 24 ? '00:00' : formatHour(hour);\r\n-    const prefix = `${selectedDay}T${hourStr}`;\r\n-    return events.find(e => e.date.startsWith(prefix));\r\n-  };\r\n-\r\n-  const validate = () => {\r\n-    const errs = {};\r\n-    if (!formData.name.trim()) errs.name = 'Name is required';\r\n-    if (!formData.phone.trim()) errs.phone = 'Phone is required';\r\n-    else if (!/^\\d{10}$/.test(formData.phone)) errs.phone = 'Phone must be 10 digits';\r\n-    if (!['Point', 'Rappel'].includes(formData.type)) errs.type = 'Invalid type';\r\n-    // Add validation for status (must be confirmed or completed)\r\n-    if (!['confirmed', 'completed'].includes(formData.status)) errs.status = 'Invalid status';\r\n-    setErrors(errs);\r\n-    return Object.keys(errs).length === 0;\r\n-  };\r\n-\r\n-  // Helper: Can status be modified? Event date/time passed by at least 1 hour?\r\n-  const canModifyStatus = () => {\r\n-    if (!selectedDay || editingHour === null) return false;\r\n-    const eventDate = new Date(selectedDay);\r\n-    eventDate.setHours(editingHour, 0, 0, 0);\r\n-    const now = new Date();\r\n-    return now - eventDate >= 60 * 60 * 1000; // 1 hour in ms\r\n-  };\r\n-\r\n-  const handleAddOrUpdate = async () => {\r\n-    if (isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, editingHour)) {\r\n-      alert(\"You can't add or modify events for past date/time.\");\r\n-      return;\r\n-    }\r\n-    if (!validate()) return;\r\n-\r\n-    const hourStr = editingHour === 24 ? '00:00' : formatHour(editingHour);\r\n-    const dateTime = `${selectedDay}T${hourStr}:00`;\r\n-\r\n-    const eventPayload = {\r\n-      title: `${formData.type} - ${formData.name}`,\r\n-      date: dateTime,\r\n-      name: formData.name,\r\n-      phone: formData.phone,\r\n-      type: formData.type,\r\n-      status: formData.status,\r\n-    };\r\n-\r\n-    try {\r\n-      const existingEvent = findEventAtHour(editingHour);\r\n-      if (existingEvent) {\r\n-        const res = await fetch(`http://localhost:5000/api/events/${existingEvent._id}`, {\r\n-          method: 'PUT',\r\n-          headers: authHeaders,\r\n-          body: JSON.stringify(eventPayload),\r\n-        });\r\n-        const updated = await res.json();\r\n-        setEvents(events.map(e => (e._id === updated._id ? updated : e)));\r\n-      } else {\r\n-        const res = await fetch('http://localhost:5000/api/events', {\r\n-          method: 'POST',\r\n-          headers: authHeaders,\r\n-          body: JSON.stringify(eventPayload),\r\n-        });\r\n-        const created = await res.json();\r\n-        setEvents([...events, created]);\r\n-      }\r\n-      setOpenEventForm(false);\r\n-      setEditingHour(null);\r\n-      setFormData({ name: '', phone: '', type: 'Point', status: 'confirmed' });\r\n-      setErrors({});\r\n-    } catch (err) {\r\n-      console.error('Save event failed:', err);\r\n-    }\r\n-  };\r\n-\r\n-  const handleDelete = async (hourToDelete) => {\r\n-    if (isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, hourToDelete)) {\r\n-      alert(\"You can't delete events from past date/time.\");\r\n-      return;\r\n-    }\r\n-    const existingEvent = findEventAtHour(hourToDelete);\r\n-    if (!existingEvent) return;\r\n-\r\n-    try {\r\n-      await fetch(`http://localhost:5000/api/events/${existingEvent._id}`, {\r\n-        method: 'DELETE',\r\n-        headers: authHeaders,\r\n-      });\r\n-      setEvents(events.filter(e => e._id !== existingEvent._id));\r\n-      if (editingHour === hourToDelete) {\r\n-        setOpenEventForm(false);\r\n-        setEditingHour(null);\r\n-        setFormData({ name: '', phone: '', type: 'Point', status: 'confirmed' });\r\n-        setErrors({});\r\n-      }\r\n-    } catch (err) {\r\n-      console.error('Delete event failed:', err);\r\n-    }\r\n-  };\r\n-\r\n-  const startEditing = (hour) => {\r\n-    if (isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, hour)) {\r\n-      alert(\"You can't add or modify events for past date/time.\");\r\n-      return;\r\n-    }\r\n-    const ev = findEventAtHour(hour);\r\n-    if (ev) {\r\n-      setFormData({\r\n-        name: ev.name,\r\n-        phone: ev.phone,\r\n-        type: ev.type,\r\n-        status: ev.status || 'confirmed',\r\n-      });\r\n-    } else {\r\n-      setFormData({ name: '', phone: '', type: 'Point', status: 'confirmed' });\r\n-    }\r\n-    setEditingHour(hour);\r\n-    setErrors({});\r\n-    setOpenEventForm(true);\r\n-  };\r\n-\r\n-  const handleDateClick = (arg) => {\r\n-    const clickedDate = arg.dateStr;\r\n-    const hasEventOnDate = events.some(ev => ev.date.startsWith(clickedDate));\r\n-\r\n-    if (isDateBeforeToday(clickedDate) && !hasEventOnDate) {\r\n-      alert('No events on this past date.');\r\n-      return;\r\n-    }\r\n-\r\n-    setSelectedDay(clickedDate);\r\n-    setOpenDayModal(true);\r\n-    setEditingHour(null);\r\n-    setFormData({ name: '', phone: '', type: 'Point', status: 'confirmed' });\r\n-    setErrors({});\r\n-  };\r\n-\r\n-  return (\r\n-    <>\r\n-      <NavBar\r\n-        email={profile?.email}\r\n-        onLogout={() => {\r\n-          localStorage.removeItem('token');\r\n-          // redirect if needed\r\n-        }}\r\n-      />\r\n-      <Container maxWidth=\"lg\" sx={{ mt: 4 }}>\r\n-        <Box boxShadow={3} p={2} bgcolor=\"white\" borderRadius={2}>\r\n-          <FullCalendar\r\n-            plugins={[dayGridPlugin, interactionPlugin]}\r\n-            initialView=\"dayGridMonth\"\r\n-            selectable={true}\r\n-            events={events}\r\n-            dateClick={handleDateClick}\r\n-          />\r\n-        </Box>\r\n-      </Container>\r\n-\r\n-      <Dialog\r\n-        open={openDayModal}\r\n-        onClose={() => setOpenDayModal(false)}\r\n-        maxWidth=\"lg\"\r\n-        fullWidth\r\n-      >\r\n-        <DialogTitle>Schedule for {selectedDay}</DialogTitle>\r\n-        <DialogContent>\r\n-          <Table>\r\n-            <TableHead>\r\n-              <TableRow>\r\n-                <TableCell>Hour</TableCell>\r\n-                <TableCell>Event Name</TableCell>\r\n-                <TableCell>Customer Name</TableCell>\r\n-                <TableCell>Customer Phone</TableCell>\r\n-                <TableCell>Status</TableCell>\r\n-                <TableCell>Action</TableCell>\r\n-              </TableRow>\r\n-            </TableHead>\r\n-\r\n-            <TableBody>\r\n-              {HOURS.map((hour) => {\r\n-                const ev = findEventAtHour(hour);\r\n-                const isPast = isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, hour);\r\n-\r\n-                return (\r\n-                  <TableRow key={hour}>\r\n-                    <TableCell>{formatHour(hour)}</TableCell>\r\n-                    <TableCell>{ev?.title || ''}</TableCell>\r\n-                    <TableCell>{ev?.name || ''}</TableCell>\r\n-                    <TableCell>{ev?.phone || ''}</TableCell>\r\n-                    <TableCell>{ev?.status || ''}</TableCell>\r\n-                    <TableCell>\r\n-                      {isPast ? (\r\n-                        <>\r\n-                          {ev ? (\r\n-                            <>\r\n-                              <IconButton size=\"small\" disabled title=\"Modify disabled on past date/time\">\r\n-                                <EditIcon />\r\n-                              </IconButton>\r\n-                              <IconButton size=\"small\" disabled title=\"Delete disabled on past date/time\">\r\n-                                <DeleteIcon />\r\n-                              </IconButton>\r\n-                            </>\r\n-                          ) : (\r\n-                            <IconButton size=\"small\" disabled title=\"Add disabled on past date/time\">\r\n-                              <AddIcon />\r\n-                            </IconButton>\r\n-                          )}\r\n-                        </>\r\n-                      ) : (\r\n-                        <>\r\n-                          <IconButton\r\n-                            color=\"primary\"\r\n-                            size=\"small\"\r\n-                            onClick={() => startEditing(hour)}\r\n-                            title={ev ? 'Modify' : 'Add'}\r\n-                          >\r\n-                            {ev ? <EditIcon /> : <AddIcon />}\r\n-                          </IconButton>\r\n-\r\n-                          {ev && (\r\n-                            <IconButton\r\n-                              color=\"error\"\r\n-                              size=\"small\"\r\n-                              onClick={() => handleDelete(hour)}\r\n-                              title=\"Delete\"\r\n-                            >\r\n-                              <DeleteIcon />\r\n-                            </IconButton>\r\n-                          )}\r\n-                        </>\r\n-                      )}\r\n-                    </TableCell>\r\n-                  </TableRow>\r\n-                );\r\n-              })}\r\n-            </TableBody>\r\n-          </Table>\r\n-        </DialogContent>\r\n-\r\n-        <DialogActions>\r\n-          <Button onClick={() => setOpenDayModal(false)}>Close</Button>\r\n-        </DialogActions>\r\n-      </Dialog>\r\n-\r\n-      <Dialog\r\n-        open={openEventForm}\r\n-        onClose={() => setOpenEventForm(false)}\r\n-        maxWidth=\"sm\"\r\n-        fullWidth\r\n-      >\r\n-        <DialogTitle>\r\n-          {editingHour !== null && findEventAtHour(editingHour)\r\n-            ? 'Modify Event'\r\n-            : 'Add Event'}\r\n-        </DialogTitle>\r\n-        <DialogContent>\r\n-          <Typography variant=\"subtitle1\" gutterBottom>\r\n-            For hour: {editingHour !== null ? formatHour(editingHour) : ''}\r\n-          </Typography>\r\n-\r\n-          <TextField\r\n-            margin=\"dense\"\r\n-            label=\"Customer Name\"\r\n-            fullWidth\r\n-            value={formData.name}\r\n-            onChange={(e) => setFormData({ ...formData, name: e.target.value })}\r\n-            error={!!errors.name}\r\n-            helperText={errors.name}\r\n-          />\r\n-          <TextField\r\n-            margin=\"dense\"\r\n-            label=\"Customer Phone\"\r\n-            fullWidth\r\n-            value={formData.phone}\r\n-            onChange={(e) => setFormData({ ...formData, phone: e.target.value })}\r\n-            error={!!errors.phone}\r\n-            helperText={errors.phone}\r\n-          />\r\n-          <TextField\r\n-            margin=\"dense\"\r\n-            select\r\n-            label=\"Type\"\r\n-            fullWidth\r\n-            value={formData.type}\r\n-            onChange={(e) => setFormData({ ...formData, type: e.target.value })}\r\n-          >\r\n-            <MenuItem value=\"Point\">Point</MenuItem>\r\n-            <MenuItem value=\"Rappel\">Rappel</MenuItem>\r\n-          </TextField>\r\n-\r\n-          {/* Status field only editable if 1 hour passed */}\r\n-          {canModifyStatus() ? (\r\n-            <TextField\r\n-              margin=\"dense\"\r\n-              select\r\n-              label=\"Status\"\r\n-              fullWidth\r\n-              value={formData.status}\r\n-              onChange={(e) => setFormData({ ...formData, status: e.target.value })}\r\n-              error={!!errors.status}\r\n-              helperText={errors.status}\r\n-            >\r\n-              <MenuItem value=\"confirmed\">CONFIRMED</MenuItem>\r\n-              <MenuItem value=\"completed\">COMPLETED</MenuItem>\r\n-            </TextField>\r\n-          ) : (\r\n-            <Typography\r\n-              variant=\"body2\"\r\n-              color=\"textSecondary\"\r\n-              sx={{ mt: 2, mb: 1 }}\r\n-            >\r\n-              Status can only be modified  one hour after the event time.\r\n-            </Typography>\r\n-          )}\r\n-        </DialogContent>\r\n-\r\n-        <DialogActions>\r\n-          <Button onClick={() => setOpenEventForm(false)}>Cancel</Button>\r\n-          <Button\r\n-            onClick={handleAddOrUpdate}\r\n-            variant=\"contained\"\r\n-            color=\"primary\"\r\n-            disabled={isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, editingHour)}\r\n-          >\r\n-            Save\r\n-          </Button>\r\n-        </DialogActions>\r\n-      </Dialog>\r\n-    </>\r\n-  );\r\n-}\r\n-import React, { useState, useEffect } from 'react';\r\n-import {\r\n-  Container,\r\n-  Box,\r\n-  Dialog,\r\n-  DialogTitle,\r\n-  DialogContent,\r\n-  DialogActions,\r\n-  Button,\r\n-  TextField,\r\n-  MenuItem,\r\n-  Table,\r\n-  TableHead,\r\n-  TableBody,\r\n-  TableRow,\r\n-  TableCell,\r\n-  Typography,\r\n-  IconButton,\r\n-} from '@mui/material';\r\n-import FullCalendar from '@fullcalendar/react';\r\n-import dayGridPlugin from '@fullcalendar/daygrid';\r\n-import interactionPlugin from '@fullcalendar/interaction';\r\n-import NavBar from '../components/NavBar';\r\n-\r\n-import AddIcon from '@mui/icons-material/Add';\r\n-import EditIcon from '@mui/icons-material/Edit';\r\n-import DeleteIcon from '@mui/icons-material/Delete';\r\n-\r\n-const HOURS = Array.from({ length: 17 }, (_, i) => 8 + i); // 08:00 to 00:00\r\n-\r\n-function formatHour(h) {\r\n-  return h === 24 ? '00:00' : `${h.toString().padStart(2, '0')}:00`;\r\n-}\r\n-\r\n-export default function Dashboard() {\r\n-  const [profile, setProfile] = useState(null);\r\n-  const [events, setEvents] = useState([]);\r\n-  const [selectedDay, setSelectedDay] = useState(null);\r\n-  const [openDayModal, setOpenDayModal] = useState(false);\r\n-\r\n-  const [openEventForm, setOpenEventForm] = useState(false);\r\n-  const [editingHour, setEditingHour] = useState(null);\r\n-  // Added status field with default 'confirmed'\r\n-  const [formData, setFormData] = useState({ name: '', phone: '', type: 'Point', status: 'confirmed' });\r\n-  const [errors, setErrors] = useState({});\r\n-\r\n-  const token = localStorage.getItem('token');\r\n-  const authHeaders = {\r\n-    Authorization: `Bearer ${token}`,\r\n-    'Content-Type': 'application/json',\r\n-  };\r\n-\r\n-  useEffect(() => {\r\n-    if (!token) return;\r\n-\r\n-    fetch('http://localhost:5000/api/admin/profile', { headers: authHeaders })\r\n-      .then(res => (res.ok ? res.json() : Promise.reject()))\r\n-      .then(setProfile)\r\n-      .catch(() => {\r\n-        localStorage.removeItem('token');\r\n-      });\r\n-\r\n-    fetch('http://localhost:5000/api/events', { headers: authHeaders })\r\n-      .then(res => res.json())\r\n-      .then(setEvents)\r\n-      .catch(console.error);\r\n-  }, [token]);\r\n-\r\n-  const isDateBeforeToday = (dateStr) => {\r\n-    if (!dateStr) return false;\r\n-    const selected = new Date(dateStr);\r\n-    const today = new Date();\r\n-    today.setHours(0, 0, 0, 0);\r\n-    return selected < today;\r\n-  };\r\n-\r\n-  const isHourInPast = (dateStr, hour) => {\r\n-    if (!dateStr) return false;\r\n-    const now = new Date();\r\n-    const selected = new Date(dateStr);\r\n-    selected.setHours(hour, 0, 0, 0);\r\n-    return selected < now;\r\n-  };\r\n-\r\n-  const findEventAtHour = (hour) => {\r\n-    if (!selectedDay) return null;\r\n-    const hourStr = hour === 24 ? '00:00' : formatHour(hour);\r\n-    const prefix = `${selectedDay}T${hourStr}`;\r\n-    return events.find(e => e.date.startsWith(prefix));\r\n-  };\r\n-\r\n-  const validate = () => {\r\n-    const errs = {};\r\n-    if (!formData.name.trim()) errs.name = 'Name is required';\r\n-    if (!formData.phone.trim()) errs.phone = 'Phone is required';\r\n-    else if (!/^\\d{10}$/.test(formData.phone)) errs.phone = 'Phone must be 10 digits';\r\n-    if (!['Point', 'Rappel'].includes(formData.type)) errs.type = 'Invalid type';\r\n-    // Add validation for status (must be confirmed or completed)\r\n-    if (!['confirmed', 'completed'].includes(formData.status)) errs.status = 'Invalid status';\r\n-    setErrors(errs);\r\n-    return Object.keys(errs).length === 0;\r\n-  };\r\n-\r\n-  // Helper: Can status be modified? Event date/time passed by at least 1 hour?\r\n-  const canModifyStatus = () => {\r\n-    if (!selectedDay || editingHour === null) return false;\r\n-    const eventDate = new Date(selectedDay);\r\n-    eventDate.setHours(editingHour, 0, 0, 0);\r\n-    const now = new Date();\r\n-    return now - eventDate >= 60 * 60 * 1000; // 1 hour in ms\r\n-  };\r\n-\r\n-  const handleAddOrUpdate = async () => {\r\n-    if (isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, editingHour)) {\r\n-      alert(\"You can't add or modify events for past date/time.\");\r\n-      return;\r\n-    }\r\n-    if (!validate()) return;\r\n-\r\n-    const hourStr = editingHour === 24 ? '00:00' : formatHour(editingHour);\r\n-    const dateTime = `${selectedDay}T${hourStr}:00`;\r\n-\r\n-    const eventPayload = {\r\n-      title: `${formData.type} - ${formData.name}`,\r\n-      date: dateTime,\r\n-      name: formData.name,\r\n-      phone: formData.phone,\r\n-      type: formData.type,\r\n-      status: formData.status,\r\n-    };\r\n-\r\n-    try {\r\n-      const existingEvent = findEventAtHour(editingHour);\r\n-      if (existingEvent) {\r\n-        const res = await fetch(`http://localhost:5000/api/events/${existingEvent._id}`, {\r\n-          method: 'PUT',\r\n-          headers: authHeaders,\r\n-          body: JSON.stringify(eventPayload),\r\n-        });\r\n-        const updated = await res.json();\r\n-        setEvents(events.map(e => (e._id === updated._id ? updated : e)));\r\n-      } else {\r\n-        const res = await fetch('http://localhost:5000/api/events', {\r\n-          method: 'POST',\r\n-          headers: authHeaders,\r\n-          body: JSON.stringify(eventPayload),\r\n-        });\r\n-        const created = await res.json();\r\n-        setEvents([...events, created]);\r\n-      }\r\n-      setOpenEventForm(false);\r\n-      setEditingHour(null);\r\n-      setFormData({ name: '', phone: '', type: 'Point', status: 'confirmed' });\r\n-      setErrors({});\r\n-    } catch (err) {\r\n-      console.error('Save event failed:', err);\r\n-    }\r\n-  };\r\n-\r\n-  const handleDelete = async (hourToDelete) => {\r\n-    if (isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, hourToDelete)) {\r\n-      alert(\"You can't delete events from past date/time.\");\r\n-      return;\r\n-    }\r\n-    const existingEvent = findEventAtHour(hourToDelete);\r\n-    if (!existingEvent) return;\r\n-\r\n-    try {\r\n-      await fetch(`http://localhost:5000/api/events/${existingEvent._id}`, {\r\n-        method: 'DELETE',\r\n-        headers: authHeaders,\r\n-      });\r\n-      setEvents(events.filter(e => e._id !== existingEvent._id));\r\n-      if (editingHour === hourToDelete) {\r\n-        setOpenEventForm(false);\r\n-        setEditingHour(null);\r\n-        setFormData({ name: '', phone: '', type: 'Point', status: 'confirmed' });\r\n-        setErrors({});\r\n-      }\r\n-    } catch (err) {\r\n-      console.error('Delete event failed:', err);\r\n-    }\r\n-  };\r\n-\r\n-  const startEditing = (hour) => {\r\n-    if (isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, hour)) {\r\n-      alert(\"You can't add or modify events for past date/time.\");\r\n-      return;\r\n-    }\r\n-    const ev = findEventAtHour(hour);\r\n-    if (ev) {\r\n-      setFormData({\r\n-        name: ev.name,\r\n-        phone: ev.phone,\r\n-        type: ev.type,\r\n-        status: ev.status || 'confirmed',\r\n-      });\r\n-    } else {\r\n-      setFormData({ name: '', phone: '', type: 'Point', status: 'confirmed' });\r\n-    }\r\n-    setEditingHour(hour);\r\n-    setErrors({});\r\n-    setOpenEventForm(true);\r\n-  };\r\n-\r\n-  const handleDateClick = (arg) => {\r\n-    const clickedDate = arg.dateStr;\r\n-    const hasEventOnDate = events.some(ev => ev.date.startsWith(clickedDate));\r\n-\r\n-    if (isDateBeforeToday(clickedDate) && !hasEventOnDate) {\r\n-      alert('No events on this past date.');\r\n-      return;\r\n-    }\r\n-\r\n-    setSelectedDay(clickedDate);\r\n-    setOpenDayModal(true);\r\n-    setEditingHour(null);\r\n-    setFormData({ name: '', phone: '', type: 'Point', status: 'confirmed' });\r\n-    setErrors({});\r\n-  };\r\n-\r\n-  return (\r\n-    <>\r\n-      <NavBar\r\n-        email={profile?.email}\r\n-        onLogout={() => {\r\n-          localStorage.removeItem('token');\r\n-          // redirect if needed\r\n-        }}\r\n-      />\r\n-      <Container maxWidth=\"lg\" sx={{ mt: 4 }}>\r\n-        <Box boxShadow={3} p={2} bgcolor=\"white\" borderRadius={2}>\r\n-          <FullCalendar\r\n-            plugins={[dayGridPlugin, interactionPlugin]}\r\n-            initialView=\"dayGridMonth\"\r\n-            selectable={true}\r\n-            events={events}\r\n-            dateClick={handleDateClick}\r\n-          />\r\n-        </Box>\r\n-      </Container>\r\n-\r\n-      <Dialog\r\n-        open={openDayModal}\r\n-        onClose={() => setOpenDayModal(false)}\r\n-        maxWidth=\"lg\"\r\n-        fullWidth\r\n-      >\r\n-        <DialogTitle>Schedule for {selectedDay}</DialogTitle>\r\n-        <DialogContent>\r\n-          <Table>\r\n-            <TableHead>\r\n-              <TableRow>\r\n-                <TableCell>Hour</TableCell>\r\n-                <TableCell>Event Name</TableCell>\r\n-                <TableCell>Customer Name</TableCell>\r\n-                <TableCell>Customer Phone</TableCell>\r\n-                <TableCell>Status</TableCell>\r\n-                <TableCell>Action</TableCell>\r\n-              </TableRow>\r\n-            </TableHead>\r\n-\r\n-            <TableBody>\r\n-              {HOURS.map((hour) => {\r\n-                const ev = findEventAtHour(hour);\r\n-                const isPast = isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, hour);\r\n-\r\n-                return (\r\n-                  <TableRow key={hour}>\r\n-                    <TableCell>{formatHour(hour)}</TableCell>\r\n-                    <TableCell>{ev?.title || ''}</TableCell>\r\n-                    <TableCell>{ev?.name || ''}</TableCell>\r\n-                    <TableCell>{ev?.phone || ''}</TableCell>\r\n-                    <TableCell>{ev?.status || ''}</TableCell>\r\n-                    <TableCell>\r\n-                      {isPast ? (\r\n-                        <>\r\n-                          {ev ? (\r\n-                            <>\r\n-                              <IconButton size=\"small\" disabled title=\"Modify disabled on past date/time\">\r\n-                                <EditIcon />\r\n-                              </IconButton>\r\n-                              <IconButton size=\"small\" disabled title=\"Delete disabled on past date/time\">\r\n-                                <DeleteIcon />\r\n-                              </IconButton>\r\n-                            </>\r\n-                          ) : (\r\n-                            <IconButton size=\"small\" disabled title=\"Add disabled on past date/time\">\r\n-                              <AddIcon />\r\n-                            </IconButton>\r\n-                          )}\r\n-                        </>\r\n-                      ) : (\r\n-                        <>\r\n-                          <IconButton\r\n-                            color=\"primary\"\r\n-                            size=\"small\"\r\n-                            onClick={() => startEditing(hour)}\r\n-                            title={ev ? 'Modify' : 'Add'}\r\n-                          >\r\n-                            {ev ? <EditIcon /> : <AddIcon />}\r\n-                          </IconButton>\r\n-\r\n-                          {ev && (\r\n-                            <IconButton\r\n-                              color=\"error\"\r\n-                              size=\"small\"\r\n-                              onClick={() => handleDelete(hour)}\r\n-                              title=\"Delete\"\r\n-                            >\r\n-                              <DeleteIcon />\r\n-                            </IconButton>\r\n-                          )}\r\n-                        </>\r\n-                      )}\r\n-                    </TableCell>\r\n-                  </TableRow>\r\n-                );\r\n-              })}\r\n-            </TableBody>\r\n-          </Table>\r\n-        </DialogContent>\r\n-\r\n-        <DialogActions>\r\n-          <Button onClick={() => setOpenDayModal(false)}>Close</Button>\r\n-        </DialogActions>\r\n-      </Dialog>\r\n-\r\n-      <Dialog\r\n-        open={openEventForm}\r\n-        onClose={() => setOpenEventForm(false)}\r\n-        maxWidth=\"sm\"\r\n-        fullWidth\r\n-      >\r\n-        <DialogTitle>\r\n-          {editingHour !== null && findEventAtHour(editingHour)\r\n-            ? 'Modify Event'\r\n-            : 'Add Event'}\r\n-        </DialogTitle>\r\n-        <DialogContent>\r\n-          <Typography variant=\"subtitle1\" gutterBottom>\r\n-            For hour: {editingHour !== null ? formatHour(editingHour) : ''}\r\n-          </Typography>\r\n-\r\n-          <TextField\r\n-            margin=\"dense\"\r\n-            label=\"Customer Name\"\r\n-            fullWidth\r\n-            value={formData.name}\r\n-            onChange={(e) => setFormData({ ...formData, name: e.target.value })}\r\n-            error={!!errors.name}\r\n-            helperText={errors.name}\r\n-          />\r\n-          <TextField\r\n-            margin=\"dense\"\r\n-            label=\"Customer Phone\"\r\n-            fullWidth\r\n-            value={formData.phone}\r\n-            onChange={(e) => setFormData({ ...formData, phone: e.target.value })}\r\n-            error={!!errors.phone}\r\n-            helperText={errors.phone}\r\n-          />\r\n-          <TextField\r\n-            margin=\"dense\"\r\n-            select\r\n-            label=\"Type\"\r\n-            fullWidth\r\n-            value={formData.type}\r\n-            onChange={(e) => setFormData({ ...formData, type: e.target.value })}\r\n-          >\r\n-            <MenuItem value=\"Point\">Point</MenuItem>\r\n-            <MenuItem value=\"Rappel\">Rappel</MenuItem>\r\n-          </TextField>\r\n-\r\n-          {/* Status field only editable if 1 hour passed */}\r\n-          {canModifyStatus() ? (\r\n-            <TextField\r\n-              margin=\"dense\"\r\n-              select\r\n-              label=\"Status\"\r\n-              fullWidth\r\n-              value={formData.status}\r\n-              onChange={(e) => setFormData({ ...formData, status: e.target.value })}\r\n-              error={!!errors.status}\r\n-              helperText={errors.status}\r\n-            >\r\n-              <MenuItem value=\"confirmed\">CONFIRMED</MenuItem>\r\n-              <MenuItem value=\"completed\">COMPLETED</MenuItem>\r\n-            </TextField>\r\n-          ) : (\r\n-            <Typography\r\n-              variant=\"body2\"\r\n-              color=\"textSecondary\"\r\n-              sx={{ mt: 2, mb: 1 }}\r\n-            >\r\n-              Status can only be modified  1 hour after the event time.\r\n-            </Typography>\r\n-          )}\r\n-        </DialogContent>\r\n-\r\n-        <DialogActions>\r\n-          <Button onClick={() => setOpenEventForm(false)}>Cancel</Button>\r\n-          <Button\r\n-            onClick={handleAddOrUpdate}\r\n-            variant=\"contained\"\r\n-            color=\"primary\"\r\n-            disabled={isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, editingHour)}\r\n-          >\r\n-            Save\r\n-          </Button>\r\n-        </DialogActions>\r\n-      </Dialog>\r\n-    </>\r\n-  );\r\n-}\r\n"
                },
                {
                    "date": 1752517145602,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -225,9 +225,9 @@\n       <NavBar\r\n         email={profile?.email}\r\n         onLogout={() => {\r\n           localStorage.removeItem('token');\r\n-          redirect\r\n+          navigate('/');\r\n         }}\r\n       />\r\n       <Container maxWidth=\"lg\" sx={{ mt: 4 }}>\r\n         <Box boxShadow={3} p={2} bgcolor=\"white\" borderRadius={2}>\r\n"
                },
                {
                    "date": 1752517170177,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,418 @@\n+import React, { useState, useEffect } from 'react';\r\n+import {\r\n+  Container,\r\n+  Box,\r\n+  Dialog,\r\n+  DialogTitle,\r\n+  DialogContent,\r\n+  DialogActions,\r\n+  Button,\r\n+  TextField,\r\n+  MenuItem,\r\n+  Table,\r\n+  TableHead,\r\n+  TableBody,\r\n+  TableRow,\r\n+  TableCell,\r\n+  Typography,\r\n+  IconButton,\r\n+} from '@mui/material';\r\n+import FullCalendar from '@fullcalendar/react';\r\n+import dayGridPlugin from '@fullcalendar/daygrid';\r\n+import interactionPlugin from '@fullcalendar/interaction';\r\n+import NavBar from '../components/NavBar';\r\n+\r\n+import AddIcon from '@mui/icons-material/Add';\r\n+import EditIcon from '@mui/icons-material/Edit';\r\n+import DeleteIcon from '@mui/icons-material/Delete';\r\n+import { redirect } from 'react-router-dom';\r\n+\r\n+const HOURS = Array.from({ length: 17 }, (_, i) => 8 + i); // 08:00 to 00:00\r\n+\r\n+function formatHour(h) {\r\n+  return h === 24 ? '00:00' : `${h.toString().padStart(2, '0')}:00`;\r\n+}\r\n+\r\n+export default function Dashboard() {\r\n+  const [profile, setProfile] = useState(null);\r\n+  const [events, setEvents] = useState([]);\r\n+  const [selectedDay, setSelectedDay] = useState(null);\r\n+  const [openDayModal, setOpenDayModal] = useState(false);\r\n+\r\n+  const [openEventForm, setOpenEventForm] = useState(false);\r\n+  const [editingHour, setEditingHour] = useState(null);\r\n+  // Added status field with default 'confirmed'\r\n+  const [formData, setFormData] = useState({ name: '', phone: '', type: 'Point', status: 'CONFIRMED' });\r\n+  const [errors, setErrors] = useState({});\r\n+\r\n+  const token = localStorage.getItem('token');\r\n+  const authHeaders = {\r\n+    Authorization: `Bearer ${token}`,\r\n+    'Content-Type': 'application/json',\r\n+  };\r\n+\r\n+  const navigate = useNavigate();\r\n+\r\n+  useEffect(() => {\r\n+    if (!token) return;\r\n+\r\n+    fetch('http://localhost:5000/api/admin/profile', { headers: authHeaders })\r\n+      .then(res => (res.ok ? res.json() : Promise.reject()))\r\n+      .then(setProfile)\r\n+      .catch(() => {\r\n+        localStorage.removeItem('token');\r\n+      });\r\n+\r\n+    fetch('http://localhost:5000/api/events', { headers: authHeaders })\r\n+      .then(res => res.json())\r\n+      .then(setEvents)\r\n+      .catch(console.error);\r\n+  }, [token]);\r\n+\r\n+  const isDateBeforeToday = (dateStr) => {\r\n+    if (!dateStr) return false;\r\n+    const selected = new Date(dateStr);\r\n+    const today = new Date();\r\n+    today.setHours(0, 0, 0, 0);\r\n+    return selected < today;\r\n+  };\r\n+\r\n+  const isHourInPast = (dateStr, hour) => {\r\n+    if (!dateStr) return false;\r\n+    const now = new Date();\r\n+    const selected = new Date(dateStr);\r\n+    selected.setHours(hour, 0, 0, 0);\r\n+    return selected < now;\r\n+  };\r\n+\r\n+  const findEventAtHour = (hour) => {\r\n+    if (!selectedDay) return null;\r\n+    const hourStr = hour === 24 ? '00:00' : formatHour(hour);\r\n+    const prefix = `${selectedDay}T${hourStr}`;\r\n+    return events.find(e => e.date.startsWith(prefix));\r\n+  };\r\n+\r\n+  const validate = () => {\r\n+    const errs = {};\r\n+    if (!formData.name.trim()) errs.name = 'Name is required';\r\n+    if (!formData.phone.trim()) errs.phone = 'Phone is required';\r\n+    else if (!/^\\d{10}$/.test(formData.phone)) errs.phone = 'Phone must be 10 digits';\r\n+    if (!['Point', 'Rappel'].includes(formData.type)) errs.type = 'Invalid type';\r\n+    // Add validation for status (must be confirmed or completed)\r\n+    if (!['CONFIRMED', 'COMPLETED'].includes(formData.status)) errs.status = 'Invalid status';\r\n+    setErrors(errs);\r\n+    return Object.keys(errs).length === 0;\r\n+  };\r\n+\r\n+  // Helper: Can status be modified? Event date/time passed by at least 1 hour?\r\n+  const canModifyStatus = () => {\r\n+    if (!selectedDay || editingHour === null) return false;\r\n+    const eventDate = new Date(selectedDay);\r\n+    eventDate.setHours(editingHour, 0, 0, 0);\r\n+    const now = new Date();\r\n+    return now - eventDate >= 60 * 60 * 1000; // 1 hour in ms\r\n+  };\r\n+\r\n+  const handleAddOrUpdate = async () => {\r\n+    if (isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, editingHour)) {\r\n+      alert(\"You can't add or modify events for past date/time.\");\r\n+      return;\r\n+    }\r\n+    if (!validate()) return;\r\n+\r\n+    const hourStr = editingHour === 24 ? '00:00' : formatHour(editingHour);\r\n+    const dateTime = `${selectedDay}T${hourStr}:00`;\r\n+\r\n+    const eventPayload = {\r\n+      title: `${formData.type} - ${formData.name}`,\r\n+      date: dateTime,\r\n+      name: formData.name,\r\n+      phone: formData.phone,\r\n+      type: formData.type,\r\n+      status: formData.status,\r\n+    };\r\n+\r\n+    try {\r\n+      const existingEvent = findEventAtHour(editingHour);\r\n+      if (existingEvent) {\r\n+        const res = await fetch(`http://localhost:5000/api/events/${existingEvent._id}`, {\r\n+          method: 'PUT',\r\n+          headers: authHeaders,\r\n+          body: JSON.stringify(eventPayload),\r\n+        });\r\n+        const updated = await res.json();\r\n+        setEvents(events.map(e => (e._id === updated._id ? updated : e)));\r\n+      } else {\r\n+        const res = await fetch('http://localhost:5000/api/events', {\r\n+          method: 'POST',\r\n+          headers: authHeaders,\r\n+          body: JSON.stringify(eventPayload),\r\n+        });\r\n+        const created = await res.json();\r\n+        setEvents([...events, created]);\r\n+      }\r\n+      setOpenEventForm(false);\r\n+      setEditingHour(null);\r\n+      setFormData({ name: '', phone: '', type: 'Point', status: 'CONFIRMED' });\r\n+      setErrors({});\r\n+    } catch (err) {\r\n+      console.error('Save event failed:', err);\r\n+    }\r\n+  };\r\n+\r\n+  const handleDelete = async (hourToDelete) => {\r\n+    if (isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, hourToDelete)) {\r\n+      alert(\"You can't delete events from past date/time.\");\r\n+      return;\r\n+    }\r\n+    const existingEvent = findEventAtHour(hourToDelete);\r\n+    if (!existingEvent) return;\r\n+\r\n+    try {\r\n+      await fetch(`http://localhost:5000/api/events/${existingEvent._id}`, {\r\n+        method: 'DELETE',\r\n+        headers: authHeaders,\r\n+      });\r\n+      setEvents(events.filter(e => e._id !== existingEvent._id));\r\n+      if (editingHour === hourToDelete) {\r\n+        setOpenEventForm(false);\r\n+        setEditingHour(null);\r\n+        setFormData({ name: '', phone: '', type: 'Point', status: 'CONFIRMED' });\r\n+        setErrors({});\r\n+      }\r\n+    } catch (err) {\r\n+      console.error('Delete event failed:', err);\r\n+    }\r\n+  };\r\n+\r\n+  const startEditing = (hour) => {\r\n+    if (isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, hour)) {\r\n+      alert(\"You can't add or modify events for past date/time.\");\r\n+      return;\r\n+    }\r\n+    const ev = findEventAtHour(hour);\r\n+    if (ev) {\r\n+      setFormData({\r\n+        name: ev.name,\r\n+        phone: ev.phone,\r\n+        type: ev.type,\r\n+        status: ev.status || 'CONFIRMED',\r\n+      });\r\n+    } else {\r\n+      setFormData({ name: '', phone: '', type: 'Point', status: 'CONFIRMED' });\r\n+    }\r\n+    setEditingHour(hour);\r\n+    setErrors({});\r\n+    setOpenEventForm(true);\r\n+  };\r\n+\r\n+  const handleDateClick = (arg) => {\r\n+    const clickedDate = arg.dateStr;\r\n+    const hasEventOnDate = events.some(ev => ev.date.startsWith(clickedDate));\r\n+\r\n+    if (isDateBeforeToday(clickedDate) && !hasEventOnDate) {\r\n+      alert('No events on this past date.');\r\n+      return;\r\n+    }\r\n+\r\n+    setSelectedDay(clickedDate);\r\n+    setOpenDayModal(true);\r\n+    setEditingHour(null);\r\n+    setFormData({ name: '', phone: '', type: 'Point', status: 'CONFIRMED' });\r\n+    setErrors({});\r\n+  };\r\n+\r\n+  return (\r\n+    <>\r\n+      <NavBar\r\n+        email={profile?.email}\r\n+        onLogout={() => {\r\n+          localStorage.removeItem('token');\r\n+          navigate('/');\r\n+        }}\r\n+      />\r\n+      <Container maxWidth=\"lg\" sx={{ mt: 4 }}>\r\n+        <Box boxShadow={3} p={2} bgcolor=\"white\" borderRadius={2}>\r\n+          <FullCalendar\r\n+            plugins={[dayGridPlugin, interactionPlugin]}\r\n+            initialView=\"dayGridMonth\"\r\n+            selectable={true}\r\n+            events={events}\r\n+            dateClick={handleDateClick}\r\n+          />\r\n+        </Box>\r\n+      </Container>\r\n+\r\n+      <Dialog\r\n+        open={openDayModal}\r\n+        onClose={() => setOpenDayModal(false)}\r\n+        maxWidth=\"lg\"\r\n+        fullWidth\r\n+      >\r\n+        <DialogTitle>Schedule for {selectedDay}</DialogTitle>\r\n+        <DialogContent>\r\n+          <Table>\r\n+            <TableHead>\r\n+              <TableRow>\r\n+                <TableCell>Hour</TableCell>\r\n+                <TableCell>Event Name</TableCell>\r\n+                <TableCell>Customer Name</TableCell>\r\n+                <TableCell>Customer Phone</TableCell>\r\n+                <TableCell>Status</TableCell>\r\n+                <TableCell>Action</TableCell>\r\n+              </TableRow>\r\n+            </TableHead>\r\n+\r\n+            <TableBody>\r\n+              {HOURS.map((hour) => {\r\n+                const ev = findEventAtHour(hour);\r\n+                const isPast = isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, hour);\r\n+\r\n+                return (\r\n+                  <TableRow key={hour}>\r\n+                    <TableCell>{formatHour(hour)}</TableCell>\r\n+                    <TableCell>{ev?.title || ''}</TableCell>\r\n+                    <TableCell>{ev?.name || ''}</TableCell>\r\n+                    <TableCell>{ev?.phone || ''}</TableCell>\r\n+                    <TableCell>{ev?.status || ''}</TableCell>\r\n+                    <TableCell>\r\n+                      {isPast ? (\r\n+                        <>\r\n+                          {ev ? (\r\n+                            <>\r\n+                              <IconButton size=\"small\" disabled title=\"Modify disabled on past date/time\">\r\n+                                <EditIcon />\r\n+                              </IconButton>\r\n+                              <IconButton size=\"small\" disabled title=\"Delete disabled on past date/time\">\r\n+                                <DeleteIcon />\r\n+                              </IconButton>\r\n+                            </>\r\n+                          ) : (\r\n+                            <IconButton size=\"small\" disabled title=\"Add disabled on past date/time\">\r\n+                              <AddIcon />\r\n+                            </IconButton>\r\n+                          )}\r\n+                        </>\r\n+                      ) : (\r\n+                        <>\r\n+                          <IconButton\r\n+                            color=\"primary\"\r\n+                            size=\"small\"\r\n+                            onClick={() => startEditing(hour)}\r\n+                            title={ev ? 'Modify' : 'Add'}\r\n+                          >\r\n+                            {ev ? <EditIcon /> : <AddIcon />}\r\n+                          </IconButton>\r\n+\r\n+                          {ev && (\r\n+                            <IconButton\r\n+                              color=\"error\"\r\n+                              size=\"small\"\r\n+                              onClick={() => handleDelete(hour)}\r\n+                              title=\"Delete\"\r\n+                            >\r\n+                              <DeleteIcon />\r\n+                            </IconButton>\r\n+                          )}\r\n+                        </>\r\n+                      )}\r\n+                    </TableCell>\r\n+                  </TableRow>\r\n+                );\r\n+              })}\r\n+            </TableBody>\r\n+          </Table>\r\n+        </DialogContent>\r\n+\r\n+        <DialogActions>\r\n+          <Button onClick={() => setOpenDayModal(false)}>Close</Button>\r\n+        </DialogActions>\r\n+      </Dialog>\r\n+\r\n+      <Dialog\r\n+        open={openEventForm}\r\n+        onClose={() => setOpenEventForm(false)}\r\n+        maxWidth=\"sm\"\r\n+        fullWidth\r\n+      >\r\n+        <DialogTitle>\r\n+          {editingHour !== null && findEventAtHour(editingHour)\r\n+            ? 'Modify Event'\r\n+            : 'Add Event'}\r\n+        </DialogTitle>\r\n+        <DialogContent>\r\n+          <Typography variant=\"subtitle1\" gutterBottom>\r\n+            For hour: {editingHour !== null ? formatHour(editingHour) : ''}\r\n+          </Typography>\r\n+\r\n+          <TextField\r\n+            margin=\"dense\"\r\n+            label=\"Customer Name\"\r\n+            fullWidth\r\n+            value={formData.name}\r\n+            onChange={(e) => setFormData({ ...formData, name: e.target.value })}\r\n+            error={!!errors.name}\r\n+            helperText={errors.name}\r\n+          />\r\n+          <TextField\r\n+            margin=\"dense\"\r\n+            label=\"Customer Phone\"\r\n+            fullWidth\r\n+            value={formData.phone}\r\n+            onChange={(e) => setFormData({ ...formData, phone: e.target.value })}\r\n+            error={!!errors.phone}\r\n+            helperText={errors.phone}\r\n+          />\r\n+          <TextField\r\n+            margin=\"dense\"\r\n+            select\r\n+            label=\"Type\"\r\n+            fullWidth\r\n+            value={formData.type}\r\n+            onChange={(e) => setFormData({ ...formData, type: e.target.value })}\r\n+          >\r\n+            <MenuItem value=\"Point\">Point</MenuItem>\r\n+            <MenuItem value=\"Rappel\">Rappel</MenuItem>\r\n+          </TextField>\r\n+\r\n+          {/* Status field only editable if 1 hour passed */}\r\n+          {canModifyStatus() ? (\r\n+            <TextField\r\n+              margin=\"dense\"\r\n+              select\r\n+              label=\"Status\"\r\n+              fullWidth\r\n+              value={formData.status}\r\n+              onChange={(e) => setFormData({ ...formData, status: e.target.value })}\r\n+              error={!!errors.status}\r\n+              helperText={errors.status}\r\n+            >\r\n+              <MenuItem value=\"CONFIRMED\">CONFIRMED</MenuItem>\r\n+              <MenuItem value=\"COMPLETED\">COMPLETED</MenuItem>\r\n+            </TextField>\r\n+          ) : (\r\n+            <Typography\r\n+              variant=\"body2\"\r\n+              color=\"textSecondary\"\r\n+              sx={{ mt: 2, mb: 1 }}\r\n+            >\r\n+              Status can only be modified  one hour after the event time.\r\n+            </Typography>\r\n+          )}\r\n+        </DialogContent>\r\n+\r\n+        <DialogActions>\r\n+          <Button onClick={() => setOpenEventForm(false)}>Cancel</Button>\r\n+          <Button\r\n+            onClick={handleAddOrUpdate}\r\n+            variant=\"contained\"\r\n+            color=\"primary\"\r\n+            disabled={isDateBeforeToday(selectedDay) || isHourInPast(selectedDay, editingHour)}\r\n+          >\r\n+            Save\r\n+          </Button>\r\n+        </DialogActions>\r\n+      </Dialog>\r\n+    </>\r\n+  );\r\n+}\r\n"
                }
            ],
            "date": 1751214595417,
            "name": "Commit-0",
            "content": "import React, { useEffect, useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst API_URL = 'http://localhost:5000/api/admin/profile';\r\n\r\nexport default function Dashboard() {\r\n  const [profile, setProfile] = useState(null);\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    const token = localStorage.getItem('token');\r\n    if (!token) return navigate('/');\r\n\r\n    fetch(API_URL, {\r\n      headers: { Authorization: `Bearer ${token}` },\r\n    })\r\n      .then(res => {\r\n        if (!res.ok) throw new Error('Unauthorized');\r\n        return res.json();\r\n      })\r\n      .then(data => setProfile(data))\r\n      .catch(() => {\r\n        localStorage.removeItem('token');\r\n        navigate('/');\r\n      });\r\n  }, [navigate]);\r\n\r\n  const logout = () => {\r\n    localStorage.removeItem('token');\r\n    navigate('/');\r\n  };\r\n\r\n  return (\r\n    <div className=\"container mt-5\">\r\n      <div className=\"d-flex justify-content-between align-items-center mb-3\">\r\n        <h2>Admin Dashboard</h2>\r\n        <button className=\"btn btn-danger\" onClick={logout}>Logout</button>\r\n      </div>\r\n\r\n      <div className=\"card p-3 shadow-sm\">\r\n        <h5 className=\"mb-3\">Your Profile</h5>\r\n        {profile ? (\r\n          <pre>{JSON.stringify(profile, null, 2)}</pre>\r\n        ) : (\r\n          <p>Loading...</p>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"
        }
    ]
}